//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsftDashboard
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace MsftDashboard.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'CapacitationCenter' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class CapacitationCenter : Entity
    {
        
        private EntityRef<Conectivity> _conectivity;
        
        private DateTime _dateFrom;
        
        private int _idCapacitationCenterInformation;
        
        private int _idConectivity;
        
        private int _idPopulationAttended;
        
        private int _idSocialCause;
        
        private int _idSocialOrganization;
        
        private int _idState;
        
        private double _investment;
        
        private string _name;
        
        private int _numberOfTrainingUsers;
        
        private int _numberOfUsers;
        
        private EntityRef<PopulationAttended> _populationAttended;
        
        private EntityRef<SocialCause> _socialCause;
        
        private EntityRef<SocialOrganization> _socialOrganization;
        
        private double _softwareInvesment;
        
        private EntityRef<State> _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(DateTime value);
        partial void OnDateFromChanged();
        partial void OnIdCapacitationCenterInformationChanging(int value);
        partial void OnIdCapacitationCenterInformationChanged();
        partial void OnIdConectivityChanging(int value);
        partial void OnIdConectivityChanged();
        partial void OnIdPopulationAttendedChanging(int value);
        partial void OnIdPopulationAttendedChanged();
        partial void OnIdSocialCauseChanging(int value);
        partial void OnIdSocialCauseChanged();
        partial void OnIdSocialOrganizationChanging(int value);
        partial void OnIdSocialOrganizationChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnInvestmentChanging(double value);
        partial void OnInvestmentChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNumberOfTrainingUsersChanging(int value);
        partial void OnNumberOfTrainingUsersChanged();
        partial void OnNumberOfUsersChanging(int value);
        partial void OnNumberOfUsersChanged();
        partial void OnSoftwareInvesmentChanging(double value);
        partial void OnSoftwareInvesmentChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CapacitationCenter"/> class.
        /// </summary>
        public CapacitationCenter()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Conectivity"/> entity.
        /// </summary>
        [Association("Conectivity_CapacitationCenter", "IdConectivity", "IdConectivity", IsForeignKey=true)]
        [XmlIgnore()]
        public Conectivity Conectivity
        {
            get
            {
                if ((this._conectivity == null))
                {
                    this._conectivity = new EntityRef<Conectivity>(this, "Conectivity", this.FilterConectivity);
                }
                return this._conectivity.Entity;
            }
            set
            {
                Conectivity previous = this.Conectivity;
                if ((previous != value))
                {
                    this.ValidateProperty("Conectivity", value);
                    if ((previous != null))
                    {
                        this._conectivity.Entity = null;
                        previous.CapacitationCenters.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdConectivity = value.IdConectivity;
                    }
                    else
                    {
                        this.IdConectivity = default(int);
                    }
                    this._conectivity.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenters.Add(this);
                    }
                    this.RaisePropertyChanged("Conectivity");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdCapacitationCenterInformation' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdCapacitationCenterInformation
        {
            get
            {
                return this._idCapacitationCenterInformation;
            }
            set
            {
                if ((this._idCapacitationCenterInformation != value))
                {
                    this.OnIdCapacitationCenterInformationChanging(value);
                    this.ValidateProperty("IdCapacitationCenterInformation", value);
                    this._idCapacitationCenterInformation = value;
                    this.RaisePropertyChanged("IdCapacitationCenterInformation");
                    this.OnIdCapacitationCenterInformationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdConectivity' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdConectivity
        {
            get
            {
                return this._idConectivity;
            }
            set
            {
                if ((this._idConectivity != value))
                {
                    this.OnIdConectivityChanging(value);
                    this.RaiseDataMemberChanging("IdConectivity");
                    this.ValidateProperty("IdConectivity", value);
                    this._idConectivity = value;
                    this.RaiseDataMemberChanged("IdConectivity");
                    this.OnIdConectivityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPopulationAttended' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPopulationAttended
        {
            get
            {
                return this._idPopulationAttended;
            }
            set
            {
                if ((this._idPopulationAttended != value))
                {
                    this.OnIdPopulationAttendedChanging(value);
                    this.RaiseDataMemberChanging("IdPopulationAttended");
                    this.ValidateProperty("IdPopulationAttended", value);
                    this._idPopulationAttended = value;
                    this.RaiseDataMemberChanged("IdPopulationAttended");
                    this.OnIdPopulationAttendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialCause' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSocialCause
        {
            get
            {
                return this._idSocialCause;
            }
            set
            {
                if ((this._idSocialCause != value))
                {
                    this.OnIdSocialCauseChanging(value);
                    this.RaiseDataMemberChanging("IdSocialCause");
                    this.ValidateProperty("IdSocialCause", value);
                    this._idSocialCause = value;
                    this.RaiseDataMemberChanged("IdSocialCause");
                    this.OnIdSocialCauseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialOrganization' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSocialOrganization
        {
            get
            {
                return this._idSocialOrganization;
            }
            set
            {
                if ((this._idSocialOrganization != value))
                {
                    this.OnIdSocialOrganizationChanging(value);
                    this.RaiseDataMemberChanging("IdSocialOrganization");
                    this.ValidateProperty("IdSocialOrganization", value);
                    this._idSocialOrganization = value;
                    this.RaiseDataMemberChanged("IdSocialOrganization");
                    this.OnIdSocialOrganizationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Investment' value.
        /// </summary>
        [DataMember()]
        public double Investment
        {
            get
            {
                return this._investment;
            }
            set
            {
                if ((this._investment != value))
                {
                    this.OnInvestmentChanging(value);
                    this.RaiseDataMemberChanging("Investment");
                    this.ValidateProperty("Investment", value);
                    this._investment = value;
                    this.RaiseDataMemberChanged("Investment");
                    this.OnInvestmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfTrainingUsers' value.
        /// </summary>
        [DataMember()]
        public int NumberOfTrainingUsers
        {
            get
            {
                return this._numberOfTrainingUsers;
            }
            set
            {
                if ((this._numberOfTrainingUsers != value))
                {
                    this.OnNumberOfTrainingUsersChanging(value);
                    this.RaiseDataMemberChanging("NumberOfTrainingUsers");
                    this.ValidateProperty("NumberOfTrainingUsers", value);
                    this._numberOfTrainingUsers = value;
                    this.RaiseDataMemberChanged("NumberOfTrainingUsers");
                    this.OnNumberOfTrainingUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfUsers' value.
        /// </summary>
        [DataMember()]
        public int NumberOfUsers
        {
            get
            {
                return this._numberOfUsers;
            }
            set
            {
                if ((this._numberOfUsers != value))
                {
                    this.OnNumberOfUsersChanging(value);
                    this.RaiseDataMemberChanging("NumberOfUsers");
                    this.ValidateProperty("NumberOfUsers", value);
                    this._numberOfUsers = value;
                    this.RaiseDataMemberChanged("NumberOfUsers");
                    this.OnNumberOfUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PopulationAttended"/> entity.
        /// </summary>
        [Association("PopulationAttended_CapacitationCenter", "IdPopulationAttended", "IdPopulationAttended", IsForeignKey=true)]
        [XmlIgnore()]
        public PopulationAttended PopulationAttended
        {
            get
            {
                if ((this._populationAttended == null))
                {
                    this._populationAttended = new EntityRef<PopulationAttended>(this, "PopulationAttended", this.FilterPopulationAttended);
                }
                return this._populationAttended.Entity;
            }
            set
            {
                PopulationAttended previous = this.PopulationAttended;
                if ((previous != value))
                {
                    this.ValidateProperty("PopulationAttended", value);
                    if ((previous != null))
                    {
                        this._populationAttended.Entity = null;
                        previous.CapacitationCenters.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPopulationAttended = value.IdPopulationAttended;
                    }
                    else
                    {
                        this.IdPopulationAttended = default(int);
                    }
                    this._populationAttended.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenters.Add(this);
                    }
                    this.RaisePropertyChanged("PopulationAttended");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SocialCause"/> entity.
        /// </summary>
        [Association("SocialCause_CapacitationCenter", "IdSocialCause", "IdSocialCause", IsForeignKey=true)]
        [XmlIgnore()]
        public SocialCause SocialCause
        {
            get
            {
                if ((this._socialCause == null))
                {
                    this._socialCause = new EntityRef<SocialCause>(this, "SocialCause", this.FilterSocialCause);
                }
                return this._socialCause.Entity;
            }
            set
            {
                SocialCause previous = this.SocialCause;
                if ((previous != value))
                {
                    this.ValidateProperty("SocialCause", value);
                    if ((previous != null))
                    {
                        this._socialCause.Entity = null;
                        previous.CapacitationCenters.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSocialCause = value.IdSocialCause;
                    }
                    else
                    {
                        this.IdSocialCause = default(int);
                    }
                    this._socialCause.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenters.Add(this);
                    }
                    this.RaisePropertyChanged("SocialCause");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SocialOrganization"/> entity.
        /// </summary>
        [Association("SocialOrganization_CapacitationCenter", "IdSocialOrganization", "IdSocialOrganization", IsForeignKey=true)]
        [XmlIgnore()]
        public SocialOrganization SocialOrganization
        {
            get
            {
                if ((this._socialOrganization == null))
                {
                    this._socialOrganization = new EntityRef<SocialOrganization>(this, "SocialOrganization", this.FilterSocialOrganization);
                }
                return this._socialOrganization.Entity;
            }
            set
            {
                SocialOrganization previous = this.SocialOrganization;
                if ((previous != value))
                {
                    this.ValidateProperty("SocialOrganization", value);
                    if ((previous != null))
                    {
                        this._socialOrganization.Entity = null;
                        previous.CapacitationCenters.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSocialOrganization = value.IdSocialOrganization;
                    }
                    else
                    {
                        this.IdSocialOrganization = default(int);
                    }
                    this._socialOrganization.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenters.Add(this);
                    }
                    this.RaisePropertyChanged("SocialOrganization");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SoftwareInvesment' value.
        /// </summary>
        [DataMember()]
        public double SoftwareInvesment
        {
            get
            {
                return this._softwareInvesment;
            }
            set
            {
                if ((this._softwareInvesment != value))
                {
                    this.OnSoftwareInvesmentChanging(value);
                    this.RaiseDataMemberChanging("SoftwareInvesment");
                    this.ValidateProperty("SoftwareInvesment", value);
                    this._softwareInvesment = value;
                    this.RaiseDataMemberChanged("SoftwareInvesment");
                    this.OnSoftwareInvesmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_CapacitationCenter", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.CapacitationCenters.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenters.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        private bool FilterConectivity(Conectivity entity)
        {
            return (entity.IdConectivity == this.IdConectivity);
        }
        
        private bool FilterPopulationAttended(PopulationAttended entity)
        {
            return (entity.IdPopulationAttended == this.IdPopulationAttended);
        }
        
        private bool FilterSocialCause(SocialCause entity)
        {
            return (entity.IdSocialCause == this.IdSocialCause);
        }
        
        private bool FilterSocialOrganization(SocialOrganization entity)
        {
            return (entity.IdSocialOrganization == this.IdSocialOrganization);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idCapacitationCenterInformation;
        }
    }
    
    /// <summary>
    /// The 'CapacitationCenterInformation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class CapacitationCenterInformation : Entity
    {
        
        private EntityRef<Conectivity> _conectivity;
        
        private Nullable<DateTime> _dateFrom;
        
        private int _idCapacitationCenterInformation;
        
        private int _idConectivity;
        
        private int _idPopulationAttended;
        
        private int _idSocialCause;
        
        private int _idSocialOrganization;
        
        private Nullable<int> _idState;
        
        private double _investment;
        
        private string _name;
        
        private int _numberOfTrainingUsers;
        
        private int _numberOfUsers;
        
        private EntityRef<PopulationAttended> _populationAttended;
        
        private EntityRef<SocialCause> _socialCause;
        
        private EntityRef<SocialOrganization> _socialOrganization;
        
        private double _softwareInvesment;
        
        private EntityRef<State> _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(Nullable<DateTime> value);
        partial void OnDateFromChanged();
        partial void OnIdCapacitationCenterInformationChanging(int value);
        partial void OnIdCapacitationCenterInformationChanged();
        partial void OnIdConectivityChanging(int value);
        partial void OnIdConectivityChanged();
        partial void OnIdPopulationAttendedChanging(int value);
        partial void OnIdPopulationAttendedChanged();
        partial void OnIdSocialCauseChanging(int value);
        partial void OnIdSocialCauseChanged();
        partial void OnIdSocialOrganizationChanging(int value);
        partial void OnIdSocialOrganizationChanged();
        partial void OnIdStateChanging(Nullable<int> value);
        partial void OnIdStateChanged();
        partial void OnInvestmentChanging(double value);
        partial void OnInvestmentChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNumberOfTrainingUsersChanging(int value);
        partial void OnNumberOfTrainingUsersChanged();
        partial void OnNumberOfUsersChanging(int value);
        partial void OnNumberOfUsersChanged();
        partial void OnSoftwareInvesmentChanging(double value);
        partial void OnSoftwareInvesmentChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CapacitationCenterInformation"/> class.
        /// </summary>
        public CapacitationCenterInformation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Conectivity"/> entity.
        /// </summary>
        [Association("Conectivity_CapacitationCenterInformation", "IdConectivity", "IdConectivity", IsForeignKey=true)]
        [XmlIgnore()]
        public Conectivity Conectivity
        {
            get
            {
                if ((this._conectivity == null))
                {
                    this._conectivity = new EntityRef<Conectivity>(this, "Conectivity", this.FilterConectivity);
                }
                return this._conectivity.Entity;
            }
            set
            {
                Conectivity previous = this.Conectivity;
                if ((previous != value))
                {
                    this.ValidateProperty("Conectivity", value);
                    if ((previous != null))
                    {
                        this._conectivity.Entity = null;
                        previous.CapacitationCenterInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdConectivity = value.IdConectivity;
                    }
                    else
                    {
                        this.IdConectivity = default(int);
                    }
                    this._conectivity.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenterInformations.Add(this);
                    }
                    this.RaisePropertyChanged("Conectivity");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdCapacitationCenterInformation' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdCapacitationCenterInformation
        {
            get
            {
                return this._idCapacitationCenterInformation;
            }
            set
            {
                if ((this._idCapacitationCenterInformation != value))
                {
                    this.OnIdCapacitationCenterInformationChanging(value);
                    this.ValidateProperty("IdCapacitationCenterInformation", value);
                    this._idCapacitationCenterInformation = value;
                    this.RaisePropertyChanged("IdCapacitationCenterInformation");
                    this.OnIdCapacitationCenterInformationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdConectivity' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdConectivity
        {
            get
            {
                return this._idConectivity;
            }
            set
            {
                if ((this._idConectivity != value))
                {
                    this.OnIdConectivityChanging(value);
                    this.RaiseDataMemberChanging("IdConectivity");
                    this.ValidateProperty("IdConectivity", value);
                    this._idConectivity = value;
                    this.RaiseDataMemberChanged("IdConectivity");
                    this.OnIdConectivityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPopulationAttended' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPopulationAttended
        {
            get
            {
                return this._idPopulationAttended;
            }
            set
            {
                if ((this._idPopulationAttended != value))
                {
                    this.OnIdPopulationAttendedChanging(value);
                    this.RaiseDataMemberChanging("IdPopulationAttended");
                    this.ValidateProperty("IdPopulationAttended", value);
                    this._idPopulationAttended = value;
                    this.RaiseDataMemberChanged("IdPopulationAttended");
                    this.OnIdPopulationAttendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialCause' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSocialCause
        {
            get
            {
                return this._idSocialCause;
            }
            set
            {
                if ((this._idSocialCause != value))
                {
                    this.OnIdSocialCauseChanging(value);
                    this.RaiseDataMemberChanging("IdSocialCause");
                    this.ValidateProperty("IdSocialCause", value);
                    this._idSocialCause = value;
                    this.RaiseDataMemberChanged("IdSocialCause");
                    this.OnIdSocialCauseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialOrganization' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSocialOrganization
        {
            get
            {
                return this._idSocialOrganization;
            }
            set
            {
                if ((this._idSocialOrganization != value))
                {
                    this.OnIdSocialOrganizationChanging(value);
                    this.RaiseDataMemberChanging("IdSocialOrganization");
                    this.ValidateProperty("IdSocialOrganization", value);
                    this._idSocialOrganization = value;
                    this.RaiseDataMemberChanged("IdSocialOrganization");
                    this.OnIdSocialOrganizationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Investment' value.
        /// </summary>
        [DataMember()]
        public double Investment
        {
            get
            {
                return this._investment;
            }
            set
            {
                if ((this._investment != value))
                {
                    this.OnInvestmentChanging(value);
                    this.RaiseDataMemberChanging("Investment");
                    this.ValidateProperty("Investment", value);
                    this._investment = value;
                    this.RaiseDataMemberChanged("Investment");
                    this.OnInvestmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfTrainingUsers' value.
        /// </summary>
        [DataMember()]
        public int NumberOfTrainingUsers
        {
            get
            {
                return this._numberOfTrainingUsers;
            }
            set
            {
                if ((this._numberOfTrainingUsers != value))
                {
                    this.OnNumberOfTrainingUsersChanging(value);
                    this.RaiseDataMemberChanging("NumberOfTrainingUsers");
                    this.ValidateProperty("NumberOfTrainingUsers", value);
                    this._numberOfTrainingUsers = value;
                    this.RaiseDataMemberChanged("NumberOfTrainingUsers");
                    this.OnNumberOfTrainingUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfUsers' value.
        /// </summary>
        [DataMember()]
        public int NumberOfUsers
        {
            get
            {
                return this._numberOfUsers;
            }
            set
            {
                if ((this._numberOfUsers != value))
                {
                    this.OnNumberOfUsersChanging(value);
                    this.RaiseDataMemberChanging("NumberOfUsers");
                    this.ValidateProperty("NumberOfUsers", value);
                    this._numberOfUsers = value;
                    this.RaiseDataMemberChanged("NumberOfUsers");
                    this.OnNumberOfUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PopulationAttended"/> entity.
        /// </summary>
        [Association("PopulationAttended_CapacitationCenterInformation", "IdPopulationAttended", "IdPopulationAttended", IsForeignKey=true)]
        [XmlIgnore()]
        public PopulationAttended PopulationAttended
        {
            get
            {
                if ((this._populationAttended == null))
                {
                    this._populationAttended = new EntityRef<PopulationAttended>(this, "PopulationAttended", this.FilterPopulationAttended);
                }
                return this._populationAttended.Entity;
            }
            set
            {
                PopulationAttended previous = this.PopulationAttended;
                if ((previous != value))
                {
                    this.ValidateProperty("PopulationAttended", value);
                    if ((previous != null))
                    {
                        this._populationAttended.Entity = null;
                        previous.CapacitationCenterInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPopulationAttended = value.IdPopulationAttended;
                    }
                    else
                    {
                        this.IdPopulationAttended = default(int);
                    }
                    this._populationAttended.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenterInformations.Add(this);
                    }
                    this.RaisePropertyChanged("PopulationAttended");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SocialCause"/> entity.
        /// </summary>
        [Association("SocialCause_CapacitationCenterInformation", "IdSocialCause", "IdSocialCause", IsForeignKey=true)]
        [XmlIgnore()]
        public SocialCause SocialCause
        {
            get
            {
                if ((this._socialCause == null))
                {
                    this._socialCause = new EntityRef<SocialCause>(this, "SocialCause", this.FilterSocialCause);
                }
                return this._socialCause.Entity;
            }
            set
            {
                SocialCause previous = this.SocialCause;
                if ((previous != value))
                {
                    this.ValidateProperty("SocialCause", value);
                    if ((previous != null))
                    {
                        this._socialCause.Entity = null;
                        previous.CapacitationCenterInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSocialCause = value.IdSocialCause;
                    }
                    else
                    {
                        this.IdSocialCause = default(int);
                    }
                    this._socialCause.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenterInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SocialCause");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SocialOrganization"/> entity.
        /// </summary>
        [Association("SocialOrganization_CapacitationCenterInformation", "IdSocialOrganization", "IdSocialOrganization", IsForeignKey=true)]
        [XmlIgnore()]
        public SocialOrganization SocialOrganization
        {
            get
            {
                if ((this._socialOrganization == null))
                {
                    this._socialOrganization = new EntityRef<SocialOrganization>(this, "SocialOrganization", this.FilterSocialOrganization);
                }
                return this._socialOrganization.Entity;
            }
            set
            {
                SocialOrganization previous = this.SocialOrganization;
                if ((previous != value))
                {
                    this.ValidateProperty("SocialOrganization", value);
                    if ((previous != null))
                    {
                        this._socialOrganization.Entity = null;
                        previous.CapacitationCenterInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSocialOrganization = value.IdSocialOrganization;
                    }
                    else
                    {
                        this.IdSocialOrganization = default(int);
                    }
                    this._socialOrganization.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenterInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SocialOrganization");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SoftwareInvesment' value.
        /// </summary>
        [DataMember()]
        public double SoftwareInvesment
        {
            get
            {
                return this._softwareInvesment;
            }
            set
            {
                if ((this._softwareInvesment != value))
                {
                    this.OnSoftwareInvesmentChanging(value);
                    this.RaiseDataMemberChanging("SoftwareInvesment");
                    this.ValidateProperty("SoftwareInvesment", value);
                    this._softwareInvesment = value;
                    this.RaiseDataMemberChanged("SoftwareInvesment");
                    this.OnSoftwareInvesmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_CapacitationCenterInformation", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.CapacitationCenterInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(Nullable<int>);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.CapacitationCenterInformations.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        private bool FilterConectivity(Conectivity entity)
        {
            return (entity.IdConectivity == this.IdConectivity);
        }
        
        private bool FilterPopulationAttended(PopulationAttended entity)
        {
            return (entity.IdPopulationAttended == this.IdPopulationAttended);
        }
        
        private bool FilterSocialCause(SocialCause entity)
        {
            return (entity.IdSocialCause == this.IdSocialCause);
        }
        
        private bool FilterSocialOrganization(SocialOrganization entity)
        {
            return (entity.IdSocialOrganization == this.IdSocialOrganization);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idCapacitationCenterInformation;
        }
    }
    
    /// <summary>
    /// The 'Competition' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Competition : Entity
    {
        
        private EntityRef<Competitor> _competitor;
        
        private DateTime _dateFrom;
        
        private Nullable<DateTime> _dateTo;
        
        private int _idCompetition;
        
        private int _idCompetitor;
        
        private int _idOwner;
        
        private Nullable<int> _idState;
        
        private int _idType;
        
        private double _investment;
        
        private Nullable<int> _number;
        
        private string _observations;
        
        private EntityRef<Owner> _owner;
        
        private Nullable<int> _progress;
        
        private double _roi;
        
        private EntityRef<State> _state;
        
        private EntityRef<TypeSource> _typeSource;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(DateTime value);
        partial void OnDateFromChanged();
        partial void OnDateToChanging(Nullable<DateTime> value);
        partial void OnDateToChanged();
        partial void OnIdCompetitionChanging(int value);
        partial void OnIdCompetitionChanged();
        partial void OnIdCompetitorChanging(int value);
        partial void OnIdCompetitorChanged();
        partial void OnIdOwnerChanging(int value);
        partial void OnIdOwnerChanged();
        partial void OnIdStateChanging(Nullable<int> value);
        partial void OnIdStateChanged();
        partial void OnIdTypeChanging(int value);
        partial void OnIdTypeChanged();
        partial void OnInvestmentChanging(double value);
        partial void OnInvestmentChanged();
        partial void OnNumberChanging(Nullable<int> value);
        partial void OnNumberChanged();
        partial void OnObservationsChanging(string value);
        partial void OnObservationsChanged();
        partial void OnProgressChanging(Nullable<int> value);
        partial void OnProgressChanged();
        partial void OnROIChanging(double value);
        partial void OnROIChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Competition"/> class.
        /// </summary>
        public Competition()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Competitor"/> entity.
        /// </summary>
        [Association("Competitor_Competition", "IdCompetitor", "IdCompetitor", IsForeignKey=true)]
        [XmlIgnore()]
        public Competitor Competitor
        {
            get
            {
                if ((this._competitor == null))
                {
                    this._competitor = new EntityRef<Competitor>(this, "Competitor", this.FilterCompetitor);
                }
                return this._competitor.Entity;
            }
            set
            {
                Competitor previous = this.Competitor;
                if ((previous != value))
                {
                    this.ValidateProperty("Competitor", value);
                    if ((previous != null))
                    {
                        this._competitor.Entity = null;
                        previous.Competitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdCompetitor = value.IdCompetitor;
                    }
                    else
                    {
                        this.IdCompetitor = default(int);
                    }
                    this._competitor.Entity = value;
                    if ((value != null))
                    {
                        value.Competitions.Add(this);
                    }
                    this.RaisePropertyChanged("Competitor");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTo' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateTo
        {
            get
            {
                return this._dateTo;
            }
            set
            {
                if ((this._dateTo != value))
                {
                    this.OnDateToChanging(value);
                    this.RaiseDataMemberChanging("DateTo");
                    this.ValidateProperty("DateTo", value);
                    this._dateTo = value;
                    this.RaiseDataMemberChanged("DateTo");
                    this.OnDateToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdCompetition' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdCompetition
        {
            get
            {
                return this._idCompetition;
            }
            set
            {
                if ((this._idCompetition != value))
                {
                    this.OnIdCompetitionChanging(value);
                    this.ValidateProperty("IdCompetition", value);
                    this._idCompetition = value;
                    this.RaisePropertyChanged("IdCompetition");
                    this.OnIdCompetitionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdCompetitor' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdCompetitor
        {
            get
            {
                return this._idCompetitor;
            }
            set
            {
                if ((this._idCompetitor != value))
                {
                    this.OnIdCompetitorChanging(value);
                    this.RaiseDataMemberChanging("IdCompetitor");
                    this.ValidateProperty("IdCompetitor", value);
                    this._idCompetitor = value;
                    this.RaiseDataMemberChanged("IdCompetitor");
                    this.OnIdCompetitorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdOwner' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdOwner
        {
            get
            {
                return this._idOwner;
            }
            set
            {
                if ((this._idOwner != value))
                {
                    this.OnIdOwnerChanging(value);
                    this.RaiseDataMemberChanging("IdOwner");
                    this.ValidateProperty("IdOwner", value);
                    this._idOwner = value;
                    this.RaiseDataMemberChanged("IdOwner");
                    this.OnIdOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdType
        {
            get
            {
                return this._idType;
            }
            set
            {
                if ((this._idType != value))
                {
                    this.OnIdTypeChanging(value);
                    this.RaiseDataMemberChanging("IdType");
                    this.ValidateProperty("IdType", value);
                    this._idType = value;
                    this.RaiseDataMemberChanged("IdType");
                    this.OnIdTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Investment' value.
        /// </summary>
        [DataMember()]
        public double Investment
        {
            get
            {
                return this._investment;
            }
            set
            {
                if ((this._investment != value))
                {
                    this.OnInvestmentChanging(value);
                    this.RaiseDataMemberChanging("Investment");
                    this.ValidateProperty("Investment", value);
                    this._investment = value;
                    this.RaiseDataMemberChanged("Investment");
                    this.OnInvestmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Owner"/> entity.
        /// </summary>
        [Association("Owner_Competition", "IdOwner", "IdOwner", IsForeignKey=true)]
        [XmlIgnore()]
        public Owner Owner
        {
            get
            {
                if ((this._owner == null))
                {
                    this._owner = new EntityRef<Owner>(this, "Owner", this.FilterOwner);
                }
                return this._owner.Entity;
            }
            set
            {
                Owner previous = this.Owner;
                if ((previous != value))
                {
                    this.ValidateProperty("Owner", value);
                    if ((previous != null))
                    {
                        this._owner.Entity = null;
                        previous.Competitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdOwner = value.IdOwner;
                    }
                    else
                    {
                        this.IdOwner = default(int);
                    }
                    this._owner.Entity = value;
                    if ((value != null))
                    {
                        value.Competitions.Add(this);
                    }
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Progress' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Progress
        {
            get
            {
                return this._progress;
            }
            set
            {
                if ((this._progress != value))
                {
                    this.OnProgressChanging(value);
                    this.RaiseDataMemberChanging("Progress");
                    this.ValidateProperty("Progress", value);
                    this._progress = value;
                    this.RaiseDataMemberChanged("Progress");
                    this.OnProgressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ROI' value.
        /// </summary>
        [DataMember()]
        public double ROI
        {
            get
            {
                return this._roi;
            }
            set
            {
                if ((this._roi != value))
                {
                    this.OnROIChanging(value);
                    this.RaiseDataMemberChanging("ROI");
                    this.ValidateProperty("ROI", value);
                    this._roi = value;
                    this.RaiseDataMemberChanged("ROI");
                    this.OnROIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_Competition", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.Competitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(Nullable<int>);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.Competitions.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TypeSource"/> entity.
        /// </summary>
        [Association("TypeSource_Competition", "IdType", "IdType", IsForeignKey=true)]
        [XmlIgnore()]
        public TypeSource TypeSource
        {
            get
            {
                if ((this._typeSource == null))
                {
                    this._typeSource = new EntityRef<TypeSource>(this, "TypeSource", this.FilterTypeSource);
                }
                return this._typeSource.Entity;
            }
            set
            {
                TypeSource previous = this.TypeSource;
                if ((previous != value))
                {
                    this.ValidateProperty("TypeSource", value);
                    if ((previous != null))
                    {
                        this._typeSource.Entity = null;
                        previous.Competitions.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdType = value.IdType;
                    }
                    else
                    {
                        this.IdType = default(int);
                    }
                    this._typeSource.Entity = value;
                    if ((value != null))
                    {
                        value.Competitions.Add(this);
                    }
                    this.RaisePropertyChanged("TypeSource");
                }
            }
        }
        
        private bool FilterCompetitor(Competitor entity)
        {
            return (entity.IdCompetitor == this.IdCompetitor);
        }
        
        private bool FilterOwner(Owner entity)
        {
            return (entity.IdOwner == this.IdOwner);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private bool FilterTypeSource(TypeSource entity)
        {
            return (entity.IdType == this.IdType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idCompetition;
        }
    }
    
    /// <summary>
    /// The 'Competitor' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Competitor : Entity
    {
        
        private EntityCollection<Competition> _competitions;
        
        private int _idCompetitor;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdCompetitorChanging(int value);
        partial void OnIdCompetitorChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Competitor"/> class.
        /// </summary>
        public Competitor()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Competition"/> entity instances.
        /// </summary>
        [Association("Competitor_Competition", "IdCompetitor", "IdCompetitor")]
        [XmlIgnore()]
        public EntityCollection<Competition> Competitions
        {
            get
            {
                if ((this._competitions == null))
                {
                    this._competitions = new EntityCollection<Competition>(this, "Competitions", this.FilterCompetitions, this.AttachCompetitions, this.DetachCompetitions);
                }
                return this._competitions;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdCompetitor' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdCompetitor
        {
            get
            {
                return this._idCompetitor;
            }
            set
            {
                if ((this._idCompetitor != value))
                {
                    this.OnIdCompetitorChanging(value);
                    this.ValidateProperty("IdCompetitor", value);
                    this._idCompetitor = value;
                    this.RaisePropertyChanged("IdCompetitor");
                    this.OnIdCompetitorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachCompetitions(Competition entity)
        {
            entity.Competitor = this;
        }
        
        private void DetachCompetitions(Competition entity)
        {
            entity.Competitor = null;
        }
        
        private bool FilterCompetitions(Competition entity)
        {
            return (entity.IdCompetitor == this.IdCompetitor);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idCompetitor;
        }
    }
    
    /// <summary>
    /// The 'Conectivity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Conectivity : Entity
    {
        
        private EntityCollection<CapacitationCenterInformation> _capacitationCenterInformations;
        
        private EntityCollection<CapacitationCenter> _capacitationCenters;
        
        private int _idConectivity;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdConectivityChanging(int value);
        partial void OnIdConectivityChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Conectivity"/> class.
        /// </summary>
        public Conectivity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenterInformation"/> entity instances.
        /// </summary>
        [Association("Conectivity_CapacitationCenterInformation", "IdConectivity", "IdConectivity")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenterInformation> CapacitationCenterInformations
        {
            get
            {
                if ((this._capacitationCenterInformations == null))
                {
                    this._capacitationCenterInformations = new EntityCollection<CapacitationCenterInformation>(this, "CapacitationCenterInformations", this.FilterCapacitationCenterInformations, this.AttachCapacitationCenterInformations, this.DetachCapacitationCenterInformations);
                }
                return this._capacitationCenterInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenter"/> entity instances.
        /// </summary>
        [Association("Conectivity_CapacitationCenter", "IdConectivity", "IdConectivity")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenter> CapacitationCenters
        {
            get
            {
                if ((this._capacitationCenters == null))
                {
                    this._capacitationCenters = new EntityCollection<CapacitationCenter>(this, "CapacitationCenters", this.FilterCapacitationCenters, this.AttachCapacitationCenters, this.DetachCapacitationCenters);
                }
                return this._capacitationCenters;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdConectivity' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdConectivity
        {
            get
            {
                return this._idConectivity;
            }
            set
            {
                if ((this._idConectivity != value))
                {
                    this.OnIdConectivityChanging(value);
                    this.ValidateProperty("IdConectivity", value);
                    this._idConectivity = value;
                    this.RaisePropertyChanged("IdConectivity");
                    this.OnIdConectivityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.Conectivity = this;
        }
        
        private void DetachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.Conectivity = null;
        }
        
        private bool FilterCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            return (entity.IdConectivity == this.IdConectivity);
        }
        
        private void AttachCapacitationCenters(CapacitationCenter entity)
        {
            entity.Conectivity = this;
        }
        
        private void DetachCapacitationCenters(CapacitationCenter entity)
        {
            entity.Conectivity = null;
        }
        
        private bool FilterCapacitationCenters(CapacitationCenter entity)
        {
            return (entity.IdConectivity == this.IdConectivity);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idConectivity;
        }
    }
    
    /// <summary>
    /// The 'Contact' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Contact : Entity
    {
        
        private string _cellPhone;
        
        private string _email;
        
        private string _firstName;
        
        private int _idContact;
        
        private string _lastName;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates1;
        
        private EntityCollection<OpenSourceStateCommunity> _openSourceStateCommunities;
        
        private EntityCollection<StateProgram> _statePrograms;
        
        private EntityCollection<StateProgram> _statePrograms1;
        
        private Nullable<bool> _status;
        
        private string _telephone;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCellPhoneChanging(string value);
        partial void OnCellPhoneChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnIdContactChanging(int value);
        partial void OnIdContactChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnStatusChanging(Nullable<bool> value);
        partial void OnStatusChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact"/> class.
        /// </summary>
        public Contact()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CellPhone' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CellPhone
        {
            get
            {
                return this._cellPhone;
            }
            set
            {
                if ((this._cellPhone != value))
                {
                    this.OnCellPhoneChanging(value);
                    this.RaiseDataMemberChanging("CellPhone");
                    this.ValidateProperty("CellPhone", value);
                    this._cellPhone = value;
                    this.RaiseDataMemberChanged("CellPhone");
                    this.OnCellPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdContact' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdContact
        {
            get
            {
                return this._idContact;
            }
            set
            {
                if ((this._idContact != value))
                {
                    this.OnIdContactChanging(value);
                    this.ValidateProperty("IdContact", value);
                    this._idContact = value;
                    this.RaisePropertyChanged("IdContact");
                    this.OnIdContactChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("Contact_MicrosoftProgramState", "IdContact", "IdContactMsft")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                if ((this._microsoftProgramStates == null))
                {
                    this._microsoftProgramStates = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates", this.FilterMicrosoftProgramStates, this.AttachMicrosoftProgramStates, this.DetachMicrosoftProgramStates);
                }
                return this._microsoftProgramStates;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("Contact_MicrosoftProgramState1", "IdContact", "IdContactState")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates1
        {
            get
            {
                if ((this._microsoftProgramStates1 == null))
                {
                    this._microsoftProgramStates1 = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates1", this.FilterMicrosoftProgramStates1, this.AttachMicrosoftProgramStates1, this.DetachMicrosoftProgramStates1);
                }
                return this._microsoftProgramStates1;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceStateCommunity"/> entity instances.
        /// </summary>
        [Association("Contact_OpenSourceStateCommunity", "IdContact", "IdContact")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceStateCommunity> OpenSourceStateCommunities
        {
            get
            {
                if ((this._openSourceStateCommunities == null))
                {
                    this._openSourceStateCommunities = new EntityCollection<OpenSourceStateCommunity>(this, "OpenSourceStateCommunities", this.FilterOpenSourceStateCommunities, this.AttachOpenSourceStateCommunities, this.DetachOpenSourceStateCommunities);
                }
                return this._openSourceStateCommunities;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("Contact_StateProgram", "IdContact", "IdContactMsft")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms
        {
            get
            {
                if ((this._statePrograms == null))
                {
                    this._statePrograms = new EntityCollection<StateProgram>(this, "StatePrograms", this.FilterStatePrograms, this.AttachStatePrograms, this.DetachStatePrograms);
                }
                return this._statePrograms;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("Contact_StateProgram1", "IdContact", "IdContactState")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms1
        {
            get
            {
                if ((this._statePrograms1 == null))
                {
                    this._statePrograms1 = new EntityCollection<StateProgram>(this, "StatePrograms1", this.FilterStatePrograms1, this.AttachStatePrograms1, this.DetachStatePrograms1);
                }
                return this._statePrograms1;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Telephone' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Telephone
        {
            get
            {
                return this._telephone;
            }
            set
            {
                if ((this._telephone != value))
                {
                    this.OnTelephoneChanging(value);
                    this.RaiseDataMemberChanging("Telephone");
                    this.ValidateProperty("Telephone", value);
                    this._telephone = value;
                    this.RaiseDataMemberChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }
        
        private void AttachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Contact = this;
        }
        
        private void DetachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Contact = null;
        }
        
        private bool FilterMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            return (entity.IdContactMsft == this.IdContact);
        }
        
        private void AttachMicrosoftProgramStates1(MicrosoftProgramState entity)
        {
            entity.Contact1 = this;
        }
        
        private void DetachMicrosoftProgramStates1(MicrosoftProgramState entity)
        {
            entity.Contact1 = null;
        }
        
        private bool FilterMicrosoftProgramStates1(MicrosoftProgramState entity)
        {
            return (entity.IdContactState == this.IdContact);
        }
        
        private void AttachOpenSourceStateCommunities(OpenSourceStateCommunity entity)
        {
            entity.Contact = this;
        }
        
        private void DetachOpenSourceStateCommunities(OpenSourceStateCommunity entity)
        {
            entity.Contact = null;
        }
        
        private bool FilterOpenSourceStateCommunities(OpenSourceStateCommunity entity)
        {
            return (entity.IdContact == this.IdContact);
        }
        
        private void AttachStatePrograms(StateProgram entity)
        {
            entity.Contact = this;
        }
        
        private void DetachStatePrograms(StateProgram entity)
        {
            entity.Contact = null;
        }
        
        private bool FilterStatePrograms(StateProgram entity)
        {
            return (entity.IdContactMsft == this.IdContact);
        }
        
        private void AttachStatePrograms1(StateProgram entity)
        {
            entity.Contact1 = this;
        }
        
        private void DetachStatePrograms1(StateProgram entity)
        {
            entity.Contact1 = null;
        }
        
        private bool FilterStatePrograms1(StateProgram entity)
        {
            return (entity.IdContactState == this.IdContact);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idContact;
        }
    }
    
    /// <summary>
    /// The 'EducationInformationState' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class EducationInformationState : Entity
    {
        
        private double _currentExpenditures;
        
        private EntityCollection<EnlaceTest> _enlaceTests;
        
        private int _idEducationInformationState;
        
        private int _idState;
        
        private double _investment;
        
        private double _investmentHighSchool;
        
        private double _investmentITProjects;
        
        private double _investmentPublicEducation;
        
        private EntityCollection<MainUniversity> _mainUniversities;
        
        private int _numberInvestigators;
        
        private EntityCollection<SchoolsInformation> _schoolsInformations;
        
        private EntityCollection<SEPProjectState> _sepProjectStates;
        
        private EntityRef<State> _state;
        
        private EntityCollection<StudentsInformation> _studentsInformations;
        
        private EntityCollection<TeachersInformation> _teachersInformations;
        
        private int _year;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCurrentExpendituresChanging(double value);
        partial void OnCurrentExpendituresChanged();
        partial void OnIdEducationInformationStateChanging(int value);
        partial void OnIdEducationInformationStateChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnInvestmentChanging(double value);
        partial void OnInvestmentChanged();
        partial void OnInvestmentHighSchoolChanging(double value);
        partial void OnInvestmentHighSchoolChanged();
        partial void OnInvestmentITProjectsChanging(double value);
        partial void OnInvestmentITProjectsChanged();
        partial void OnInvestmentPublicEducationChanging(double value);
        partial void OnInvestmentPublicEducationChanged();
        partial void OnNumberInvestigatorsChanging(int value);
        partial void OnNumberInvestigatorsChanged();
        partial void OnYearChanging(int value);
        partial void OnYearChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EducationInformationState"/> class.
        /// </summary>
        public EducationInformationState()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentExpenditures' value.
        /// </summary>
        [DataMember()]
        public double CurrentExpenditures
        {
            get
            {
                return this._currentExpenditures;
            }
            set
            {
                if ((this._currentExpenditures != value))
                {
                    this.OnCurrentExpendituresChanging(value);
                    this.RaiseDataMemberChanging("CurrentExpenditures");
                    this.ValidateProperty("CurrentExpenditures", value);
                    this._currentExpenditures = value;
                    this.RaiseDataMemberChanged("CurrentExpenditures");
                    this.OnCurrentExpendituresChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="EnlaceTest"/> entity instances.
        /// </summary>
        [Association("EducationInformationState_EnlaceTest", "IdEducationInformationState", "IdEducationInformationState")]
        [XmlIgnore()]
        public EntityCollection<EnlaceTest> EnlaceTests
        {
            get
            {
                if ((this._enlaceTests == null))
                {
                    this._enlaceTests = new EntityCollection<EnlaceTest>(this, "EnlaceTests", this.FilterEnlaceTests, this.AttachEnlaceTests, this.DetachEnlaceTests);
                }
                return this._enlaceTests;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEducationInformationState' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdEducationInformationState
        {
            get
            {
                return this._idEducationInformationState;
            }
            set
            {
                if ((this._idEducationInformationState != value))
                {
                    this.OnIdEducationInformationStateChanging(value);
                    this.ValidateProperty("IdEducationInformationState", value);
                    this._idEducationInformationState = value;
                    this.RaisePropertyChanged("IdEducationInformationState");
                    this.OnIdEducationInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Investment' value.
        /// </summary>
        [DataMember()]
        public double Investment
        {
            get
            {
                return this._investment;
            }
            set
            {
                if ((this._investment != value))
                {
                    this.OnInvestmentChanging(value);
                    this.RaiseDataMemberChanging("Investment");
                    this.ValidateProperty("Investment", value);
                    this._investment = value;
                    this.RaiseDataMemberChanged("Investment");
                    this.OnInvestmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InvestmentHighSchool' value.
        /// </summary>
        [DataMember()]
        public double InvestmentHighSchool
        {
            get
            {
                return this._investmentHighSchool;
            }
            set
            {
                if ((this._investmentHighSchool != value))
                {
                    this.OnInvestmentHighSchoolChanging(value);
                    this.RaiseDataMemberChanging("InvestmentHighSchool");
                    this.ValidateProperty("InvestmentHighSchool", value);
                    this._investmentHighSchool = value;
                    this.RaiseDataMemberChanged("InvestmentHighSchool");
                    this.OnInvestmentHighSchoolChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InvestmentITProjects' value.
        /// </summary>
        [DataMember()]
        public double InvestmentITProjects
        {
            get
            {
                return this._investmentITProjects;
            }
            set
            {
                if ((this._investmentITProjects != value))
                {
                    this.OnInvestmentITProjectsChanging(value);
                    this.RaiseDataMemberChanging("InvestmentITProjects");
                    this.ValidateProperty("InvestmentITProjects", value);
                    this._investmentITProjects = value;
                    this.RaiseDataMemberChanged("InvestmentITProjects");
                    this.OnInvestmentITProjectsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InvestmentPublicEducation' value.
        /// </summary>
        [DataMember()]
        public double InvestmentPublicEducation
        {
            get
            {
                return this._investmentPublicEducation;
            }
            set
            {
                if ((this._investmentPublicEducation != value))
                {
                    this.OnInvestmentPublicEducationChanging(value);
                    this.RaiseDataMemberChanging("InvestmentPublicEducation");
                    this.ValidateProperty("InvestmentPublicEducation", value);
                    this._investmentPublicEducation = value;
                    this.RaiseDataMemberChanged("InvestmentPublicEducation");
                    this.OnInvestmentPublicEducationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MainUniversity"/> entity instances.
        /// </summary>
        [Association("EducationInformationState_MainUniversity", "IdEducationInformationState", "IdEducationInformationState")]
        [XmlIgnore()]
        public EntityCollection<MainUniversity> MainUniversities
        {
            get
            {
                if ((this._mainUniversities == null))
                {
                    this._mainUniversities = new EntityCollection<MainUniversity>(this, "MainUniversities", this.FilterMainUniversities, this.AttachMainUniversities, this.DetachMainUniversities);
                }
                return this._mainUniversities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberInvestigators' value.
        /// </summary>
        [DataMember()]
        public int NumberInvestigators
        {
            get
            {
                return this._numberInvestigators;
            }
            set
            {
                if ((this._numberInvestigators != value))
                {
                    this.OnNumberInvestigatorsChanging(value);
                    this.RaiseDataMemberChanging("NumberInvestigators");
                    this.ValidateProperty("NumberInvestigators", value);
                    this._numberInvestigators = value;
                    this.RaiseDataMemberChanged("NumberInvestigators");
                    this.OnNumberInvestigatorsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SchoolsInformation"/> entity instances.
        /// </summary>
        [Association("EducationInformationState_SchoolsInformation", "IdEducationInformationState", "IdEducationInformationState")]
        [XmlIgnore()]
        public EntityCollection<SchoolsInformation> SchoolsInformations
        {
            get
            {
                if ((this._schoolsInformations == null))
                {
                    this._schoolsInformations = new EntityCollection<SchoolsInformation>(this, "SchoolsInformations", this.FilterSchoolsInformations, this.AttachSchoolsInformations, this.DetachSchoolsInformations);
                }
                return this._schoolsInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SEPProjectState"/> entity instances.
        /// </summary>
        [Association("EducationInformationState_SEPProjectState", "IdEducationInformationState", "IdEducationInformationState")]
        [XmlIgnore()]
        public EntityCollection<SEPProjectState> SEPProjectStates
        {
            get
            {
                if ((this._sepProjectStates == null))
                {
                    this._sepProjectStates = new EntityCollection<SEPProjectState>(this, "SEPProjectStates", this.FilterSEPProjectStates, this.AttachSEPProjectStates, this.DetachSEPProjectStates);
                }
                return this._sepProjectStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_EducationInformationState", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.EducationInformationStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.EducationInformationStates.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StudentsInformation"/> entity instances.
        /// </summary>
        [Association("EducationInformationState_StudentsInformation", "IdEducationInformationState", "IdEducationInformationState")]
        [XmlIgnore()]
        public EntityCollection<StudentsInformation> StudentsInformations
        {
            get
            {
                if ((this._studentsInformations == null))
                {
                    this._studentsInformations = new EntityCollection<StudentsInformation>(this, "StudentsInformations", this.FilterStudentsInformations, this.AttachStudentsInformations, this.DetachStudentsInformations);
                }
                return this._studentsInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TeachersInformation"/> entity instances.
        /// </summary>
        [Association("EducationInformationState_TeachersInformation", "IdEducationInformationState", "IdEducationInformationState")]
        [XmlIgnore()]
        public EntityCollection<TeachersInformation> TeachersInformations
        {
            get
            {
                if ((this._teachersInformations == null))
                {
                    this._teachersInformations = new EntityCollection<TeachersInformation>(this, "TeachersInformations", this.FilterTeachersInformations, this.AttachTeachersInformations, this.DetachTeachersInformations);
                }
                return this._teachersInformations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Year' value.
        /// </summary>
        [DataMember()]
        public int Year
        {
            get
            {
                return this._year;
            }
            set
            {
                if ((this._year != value))
                {
                    this.OnYearChanging(value);
                    this.RaiseDataMemberChanging("Year");
                    this.ValidateProperty("Year", value);
                    this._year = value;
                    this.RaiseDataMemberChanged("Year");
                    this.OnYearChanged();
                }
            }
        }
        
        private void AttachEnlaceTests(EnlaceTest entity)
        {
            entity.EducationInformationState = this;
        }
        
        private void DetachEnlaceTests(EnlaceTest entity)
        {
            entity.EducationInformationState = null;
        }
        
        private bool FilterEnlaceTests(EnlaceTest entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private void AttachMainUniversities(MainUniversity entity)
        {
            entity.EducationInformationState = this;
        }
        
        private void DetachMainUniversities(MainUniversity entity)
        {
            entity.EducationInformationState = null;
        }
        
        private bool FilterMainUniversities(MainUniversity entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private void AttachSchoolsInformations(SchoolsInformation entity)
        {
            entity.EducationInformationState = this;
        }
        
        private void DetachSchoolsInformations(SchoolsInformation entity)
        {
            entity.EducationInformationState = null;
        }
        
        private bool FilterSchoolsInformations(SchoolsInformation entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private void AttachSEPProjectStates(SEPProjectState entity)
        {
            entity.EducationInformationState = this;
        }
        
        private void DetachSEPProjectStates(SEPProjectState entity)
        {
            entity.EducationInformationState = null;
        }
        
        private bool FilterSEPProjectStates(SEPProjectState entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachStudentsInformations(StudentsInformation entity)
        {
            entity.EducationInformationState = this;
        }
        
        private void DetachStudentsInformations(StudentsInformation entity)
        {
            entity.EducationInformationState = null;
        }
        
        private bool FilterStudentsInformations(StudentsInformation entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private void AttachTeachersInformations(TeachersInformation entity)
        {
            entity.EducationInformationState = this;
        }
        
        private void DetachTeachersInformations(TeachersInformation entity)
        {
            entity.EducationInformationState = null;
        }
        
        private bool FilterTeachersInformations(TeachersInformation entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idEducationInformationState;
        }
    }
    
    /// <summary>
    /// The 'EnlaceTest' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class EnlaceTest : Entity
    {
        
        private EntityRef<EducationInformationState> _educationInformationState;
        
        private int _idEducationInformationState;
        
        private int _idEnlaceTest;
        
        private int _idSchoolGrade;
        
        private long _number;
        
        private EntityRef<SchoolGrade> _schoolGrade;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdEducationInformationStateChanging(int value);
        partial void OnIdEducationInformationStateChanged();
        partial void OnIdEnlaceTestChanging(int value);
        partial void OnIdEnlaceTestChanged();
        partial void OnIdSchoolGradeChanging(int value);
        partial void OnIdSchoolGradeChanged();
        partial void OnNumberChanging(long value);
        partial void OnNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EnlaceTest"/> class.
        /// </summary>
        public EnlaceTest()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EducationInformationState"/> entity.
        /// </summary>
        [Association("EducationInformationState_EnlaceTest", "IdEducationInformationState", "IdEducationInformationState", IsForeignKey=true)]
        [XmlIgnore()]
        public EducationInformationState EducationInformationState
        {
            get
            {
                if ((this._educationInformationState == null))
                {
                    this._educationInformationState = new EntityRef<EducationInformationState>(this, "EducationInformationState", this.FilterEducationInformationState);
                }
                return this._educationInformationState.Entity;
            }
            set
            {
                EducationInformationState previous = this.EducationInformationState;
                if ((previous != value))
                {
                    this.ValidateProperty("EducationInformationState", value);
                    if ((previous != null))
                    {
                        this._educationInformationState.Entity = null;
                        previous.EnlaceTests.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdEducationInformationState = value.IdEducationInformationState;
                    }
                    else
                    {
                        this.IdEducationInformationState = default(int);
                    }
                    this._educationInformationState.Entity = value;
                    if ((value != null))
                    {
                        value.EnlaceTests.Add(this);
                    }
                    this.RaisePropertyChanged("EducationInformationState");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEducationInformationState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdEducationInformationState
        {
            get
            {
                return this._idEducationInformationState;
            }
            set
            {
                if ((this._idEducationInformationState != value))
                {
                    this.OnIdEducationInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdEducationInformationState");
                    this.ValidateProperty("IdEducationInformationState", value);
                    this._idEducationInformationState = value;
                    this.RaiseDataMemberChanged("IdEducationInformationState");
                    this.OnIdEducationInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEnlaceTest' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdEnlaceTest
        {
            get
            {
                return this._idEnlaceTest;
            }
            set
            {
                if ((this._idEnlaceTest != value))
                {
                    this.OnIdEnlaceTestChanging(value);
                    this.ValidateProperty("IdEnlaceTest", value);
                    this._idEnlaceTest = value;
                    this.RaisePropertyChanged("IdEnlaceTest");
                    this.OnIdEnlaceTestChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolGrade' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSchoolGrade
        {
            get
            {
                return this._idSchoolGrade;
            }
            set
            {
                if ((this._idSchoolGrade != value))
                {
                    this.OnIdSchoolGradeChanging(value);
                    this.RaiseDataMemberChanging("IdSchoolGrade");
                    this.ValidateProperty("IdSchoolGrade", value);
                    this._idSchoolGrade = value;
                    this.RaiseDataMemberChanged("IdSchoolGrade");
                    this.OnIdSchoolGradeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public long Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SchoolGrade"/> entity.
        /// </summary>
        [Association("SchoolGrade_EnlaceTest", "IdSchoolGrade", "IdSchoolGrade", IsForeignKey=true)]
        [XmlIgnore()]
        public SchoolGrade SchoolGrade
        {
            get
            {
                if ((this._schoolGrade == null))
                {
                    this._schoolGrade = new EntityRef<SchoolGrade>(this, "SchoolGrade", this.FilterSchoolGrade);
                }
                return this._schoolGrade.Entity;
            }
            set
            {
                SchoolGrade previous = this.SchoolGrade;
                if ((previous != value))
                {
                    this.ValidateProperty("SchoolGrade", value);
                    if ((previous != null))
                    {
                        this._schoolGrade.Entity = null;
                        previous.EnlaceTests.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSchoolGrade = value.IdSchoolGrade;
                    }
                    else
                    {
                        this.IdSchoolGrade = default(int);
                    }
                    this._schoolGrade.Entity = value;
                    if ((value != null))
                    {
                        value.EnlaceTests.Add(this);
                    }
                    this.RaisePropertyChanged("SchoolGrade");
                }
            }
        }
        
        private bool FilterEducationInformationState(EducationInformationState entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private bool FilterSchoolGrade(SchoolGrade entity)
        {
            return (entity.IdSchoolGrade == this.IdSchoolGrade);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idEnlaceTest;
        }
    }
    
    /// <summary>
    /// The 'MainUniversity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class MainUniversity : Entity
    {
        
        private EntityRef<EducationInformationState> _educationInformationState;
        
        private int _idEducationInformationState;
        
        private int _idMainUniversitie;
        
        private int _idUniversity;
        
        private int _penetration;
        
        private EntityRef<University> _university;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdEducationInformationStateChanging(int value);
        partial void OnIdEducationInformationStateChanged();
        partial void OnIdMainUniversitieChanging(int value);
        partial void OnIdMainUniversitieChanged();
        partial void OnIdUniversityChanging(int value);
        partial void OnIdUniversityChanged();
        partial void OnPenetrationChanging(int value);
        partial void OnPenetrationChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MainUniversity"/> class.
        /// </summary>
        public MainUniversity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EducationInformationState"/> entity.
        /// </summary>
        [Association("EducationInformationState_MainUniversity", "IdEducationInformationState", "IdEducationInformationState", IsForeignKey=true)]
        [XmlIgnore()]
        public EducationInformationState EducationInformationState
        {
            get
            {
                if ((this._educationInformationState == null))
                {
                    this._educationInformationState = new EntityRef<EducationInformationState>(this, "EducationInformationState", this.FilterEducationInformationState);
                }
                return this._educationInformationState.Entity;
            }
            set
            {
                EducationInformationState previous = this.EducationInformationState;
                if ((previous != value))
                {
                    this.ValidateProperty("EducationInformationState", value);
                    if ((previous != null))
                    {
                        this._educationInformationState.Entity = null;
                        previous.MainUniversities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdEducationInformationState = value.IdEducationInformationState;
                    }
                    else
                    {
                        this.IdEducationInformationState = default(int);
                    }
                    this._educationInformationState.Entity = value;
                    if ((value != null))
                    {
                        value.MainUniversities.Add(this);
                    }
                    this.RaisePropertyChanged("EducationInformationState");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEducationInformationState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdEducationInformationState
        {
            get
            {
                return this._idEducationInformationState;
            }
            set
            {
                if ((this._idEducationInformationState != value))
                {
                    this.OnIdEducationInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdEducationInformationState");
                    this.ValidateProperty("IdEducationInformationState", value);
                    this._idEducationInformationState = value;
                    this.RaiseDataMemberChanged("IdEducationInformationState");
                    this.OnIdEducationInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdMainUniversitie' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdMainUniversitie
        {
            get
            {
                return this._idMainUniversitie;
            }
            set
            {
                if ((this._idMainUniversitie != value))
                {
                    this.OnIdMainUniversitieChanging(value);
                    this.ValidateProperty("IdMainUniversitie", value);
                    this._idMainUniversitie = value;
                    this.RaisePropertyChanged("IdMainUniversitie");
                    this.OnIdMainUniversitieChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdUniversity' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdUniversity
        {
            get
            {
                return this._idUniversity;
            }
            set
            {
                if ((this._idUniversity != value))
                {
                    this.OnIdUniversityChanging(value);
                    this.RaiseDataMemberChanging("IdUniversity");
                    this.ValidateProperty("IdUniversity", value);
                    this._idUniversity = value;
                    this.RaiseDataMemberChanged("IdUniversity");
                    this.OnIdUniversityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Penetration' value.
        /// </summary>
        [DataMember()]
        public int Penetration
        {
            get
            {
                return this._penetration;
            }
            set
            {
                if ((this._penetration != value))
                {
                    this.OnPenetrationChanging(value);
                    this.RaiseDataMemberChanging("Penetration");
                    this.ValidateProperty("Penetration", value);
                    this._penetration = value;
                    this.RaiseDataMemberChanged("Penetration");
                    this.OnPenetrationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="University"/> entity.
        /// </summary>
        [Association("University_MainUniversity", "IdUniversity", "IdUniversity", IsForeignKey=true)]
        [XmlIgnore()]
        public University University
        {
            get
            {
                if ((this._university == null))
                {
                    this._university = new EntityRef<University>(this, "University", this.FilterUniversity);
                }
                return this._university.Entity;
            }
            set
            {
                University previous = this.University;
                if ((previous != value))
                {
                    this.ValidateProperty("University", value);
                    if ((previous != null))
                    {
                        this._university.Entity = null;
                        previous.MainUniversities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdUniversity = value.IdUniversity;
                    }
                    else
                    {
                        this.IdUniversity = default(int);
                    }
                    this._university.Entity = value;
                    if ((value != null))
                    {
                        value.MainUniversities.Add(this);
                    }
                    this.RaisePropertyChanged("University");
                }
            }
        }
        
        private bool FilterEducationInformationState(EducationInformationState entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private bool FilterUniversity(University entity)
        {
            return (entity.IdUniversity == this.IdUniversity);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idMainUniversitie;
        }
    }
    
    /// <summary>
    /// The 'MexicoAgreement' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class MexicoAgreement : Entity
    {
        
        private DateTime _dateFrom;
        
        private DateTime _dateTo;
        
        private int _idMexicoAgreements;
        
        private int _idState;
        
        private int _idTypeAgreement;
        
        private string _name;
        
        private string _observations;
        
        private int _progress;
        
        private EntityRef<State> _state;
        
        private EntityRef<TypeAgreement> _typeAgreement;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(DateTime value);
        partial void OnDateFromChanged();
        partial void OnDateToChanging(DateTime value);
        partial void OnDateToChanged();
        partial void OnIdMexicoAgreementsChanging(int value);
        partial void OnIdMexicoAgreementsChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnIdTypeAgreementChanging(int value);
        partial void OnIdTypeAgreementChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnObservationsChanging(string value);
        partial void OnObservationsChanged();
        partial void OnProgressChanging(int value);
        partial void OnProgressChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MexicoAgreement"/> class.
        /// </summary>
        public MexicoAgreement()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTo' value.
        /// </summary>
        [DataMember()]
        public DateTime DateTo
        {
            get
            {
                return this._dateTo;
            }
            set
            {
                if ((this._dateTo != value))
                {
                    this.OnDateToChanging(value);
                    this.RaiseDataMemberChanging("DateTo");
                    this.ValidateProperty("DateTo", value);
                    this._dateTo = value;
                    this.RaiseDataMemberChanged("DateTo");
                    this.OnDateToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdMexicoAgreements' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdMexicoAgreements
        {
            get
            {
                return this._idMexicoAgreements;
            }
            set
            {
                if ((this._idMexicoAgreements != value))
                {
                    this.OnIdMexicoAgreementsChanging(value);
                    this.ValidateProperty("IdMexicoAgreements", value);
                    this._idMexicoAgreements = value;
                    this.RaisePropertyChanged("IdMexicoAgreements");
                    this.OnIdMexicoAgreementsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdTypeAgreement' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdTypeAgreement
        {
            get
            {
                return this._idTypeAgreement;
            }
            set
            {
                if ((this._idTypeAgreement != value))
                {
                    this.OnIdTypeAgreementChanging(value);
                    this.RaiseDataMemberChanging("IdTypeAgreement");
                    this.ValidateProperty("IdTypeAgreement", value);
                    this._idTypeAgreement = value;
                    this.RaiseDataMemberChanged("IdTypeAgreement");
                    this.OnIdTypeAgreementChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Progress' value.
        /// </summary>
        [DataMember()]
        public int Progress
        {
            get
            {
                return this._progress;
            }
            set
            {
                if ((this._progress != value))
                {
                    this.OnProgressChanging(value);
                    this.RaiseDataMemberChanging("Progress");
                    this.ValidateProperty("Progress", value);
                    this._progress = value;
                    this.RaiseDataMemberChanged("Progress");
                    this.OnProgressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_MexicoAgreement", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.MexicoAgreements.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.MexicoAgreements.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TypeAgreement"/> entity.
        /// </summary>
        [Association("TypeAgreement_MexicoAgreement", "IdTypeAgreement", "IdTypeAgreement", IsForeignKey=true)]
        [XmlIgnore()]
        public TypeAgreement TypeAgreement
        {
            get
            {
                if ((this._typeAgreement == null))
                {
                    this._typeAgreement = new EntityRef<TypeAgreement>(this, "TypeAgreement", this.FilterTypeAgreement);
                }
                return this._typeAgreement.Entity;
            }
            set
            {
                TypeAgreement previous = this.TypeAgreement;
                if ((previous != value))
                {
                    this.ValidateProperty("TypeAgreement", value);
                    if ((previous != null))
                    {
                        this._typeAgreement.Entity = null;
                        previous.MexicoAgreements.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdTypeAgreement = value.IdTypeAgreement;
                    }
                    else
                    {
                        this.IdTypeAgreement = default(int);
                    }
                    this._typeAgreement.Entity = value;
                    if ((value != null))
                    {
                        value.MexicoAgreements.Add(this);
                    }
                    this.RaisePropertyChanged("TypeAgreement");
                }
            }
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private bool FilterTypeAgreement(TypeAgreement entity)
        {
            return (entity.IdTypeAgreement == this.IdTypeAgreement);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idMexicoAgreements;
        }
    }
    
    /// <summary>
    /// The 'MicrosoftProgramState' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class MicrosoftProgramState : Entity
    {
        
        private EntityRef<Contact> _contact;
        
        private EntityRef<Contact> _contact1;
        
        private Nullable<DateTime> _dateFrom;
        
        private Nullable<DateTime> _dateTo;
        
        private Nullable<int> _idContactMsft;
        
        private Nullable<int> _idContactState;
        
        private int _idMsftProgramState;
        
        private int _idOwner;
        
        private int _idPartner;
        
        private int _idProgram;
        
        private int _idSource;
        
        private int _idState;
        
        private Nullable<int> _idType;
        
        private Nullable<double> _investment;
        
        private Nullable<int> _number;
        
        private EntityRef<Owner> _owner;
        
        private EntityRef<Partner> _partner;
        
        private EntityRef<Program> _program;
        
        private Nullable<int> _progress;
        
        private Nullable<double> _roi;
        
        private EntityRef<Source> _source;
        
        private EntityRef<State> _state;
        
        private EntityRef<TypeSource> _typeSource;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(Nullable<DateTime> value);
        partial void OnDateFromChanged();
        partial void OnDateToChanging(Nullable<DateTime> value);
        partial void OnDateToChanged();
        partial void OnIdContactMsftChanging(Nullable<int> value);
        partial void OnIdContactMsftChanged();
        partial void OnIdContactStateChanging(Nullable<int> value);
        partial void OnIdContactStateChanged();
        partial void OnIdMsftProgramStateChanging(int value);
        partial void OnIdMsftProgramStateChanged();
        partial void OnIdOwnerChanging(int value);
        partial void OnIdOwnerChanged();
        partial void OnIdPartnerChanging(int value);
        partial void OnIdPartnerChanged();
        partial void OnIdProgramChanging(int value);
        partial void OnIdProgramChanged();
        partial void OnIdSourceChanging(int value);
        partial void OnIdSourceChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnIdTypeChanging(Nullable<int> value);
        partial void OnIdTypeChanged();
        partial void OnInvestmentChanging(Nullable<double> value);
        partial void OnInvestmentChanged();
        partial void OnNumberChanging(Nullable<int> value);
        partial void OnNumberChanged();
        partial void OnProgressChanging(Nullable<int> value);
        partial void OnProgressChanged();
        partial void OnROIChanging(Nullable<double> value);
        partial void OnROIChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MicrosoftProgramState"/> class.
        /// </summary>
        public MicrosoftProgramState()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Contact_MicrosoftProgramState", "IdContactMsft", "IdContact", IsForeignKey=true)]
        [XmlIgnore()]
        public Contact Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityRef<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact.Entity;
            }
            set
            {
                Contact previous = this.Contact;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact", value);
                    if ((previous != null))
                    {
                        this._contact.Entity = null;
                        previous.MicrosoftProgramStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdContactMsft = value.IdContact;
                    }
                    else
                    {
                        this.IdContactMsft = default(Nullable<int>);
                    }
                    this._contact.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates.Add(this);
                    }
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Contact_MicrosoftProgramState1", "IdContactState", "IdContact", IsForeignKey=true)]
        [XmlIgnore()]
        public Contact Contact1
        {
            get
            {
                if ((this._contact1 == null))
                {
                    this._contact1 = new EntityRef<Contact>(this, "Contact1", this.FilterContact1);
                }
                return this._contact1.Entity;
            }
            set
            {
                Contact previous = this.Contact1;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact1", value);
                    if ((previous != null))
                    {
                        this._contact1.Entity = null;
                        previous.MicrosoftProgramStates1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdContactState = value.IdContact;
                    }
                    else
                    {
                        this.IdContactState = default(Nullable<int>);
                    }
                    this._contact1.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates1.Add(this);
                    }
                    this.RaisePropertyChanged("Contact1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTo' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateTo
        {
            get
            {
                return this._dateTo;
            }
            set
            {
                if ((this._dateTo != value))
                {
                    this.OnDateToChanging(value);
                    this.RaiseDataMemberChanging("DateTo");
                    this.ValidateProperty("DateTo", value);
                    this._dateTo = value;
                    this.RaiseDataMemberChanged("DateTo");
                    this.OnDateToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdContactMsft' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdContactMsft
        {
            get
            {
                return this._idContactMsft;
            }
            set
            {
                if ((this._idContactMsft != value))
                {
                    this.OnIdContactMsftChanging(value);
                    this.RaiseDataMemberChanging("IdContactMsft");
                    this.ValidateProperty("IdContactMsft", value);
                    this._idContactMsft = value;
                    this.RaiseDataMemberChanged("IdContactMsft");
                    this.OnIdContactMsftChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdContactState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdContactState
        {
            get
            {
                return this._idContactState;
            }
            set
            {
                if ((this._idContactState != value))
                {
                    this.OnIdContactStateChanging(value);
                    this.RaiseDataMemberChanging("IdContactState");
                    this.ValidateProperty("IdContactState", value);
                    this._idContactState = value;
                    this.RaiseDataMemberChanged("IdContactState");
                    this.OnIdContactStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdMsftProgramState' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdMsftProgramState
        {
            get
            {
                return this._idMsftProgramState;
            }
            set
            {
                if ((this._idMsftProgramState != value))
                {
                    this.OnIdMsftProgramStateChanging(value);
                    this.ValidateProperty("IdMsftProgramState", value);
                    this._idMsftProgramState = value;
                    this.RaisePropertyChanged("IdMsftProgramState");
                    this.OnIdMsftProgramStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdOwner' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdOwner
        {
            get
            {
                return this._idOwner;
            }
            set
            {
                if ((this._idOwner != value))
                {
                    this.OnIdOwnerChanging(value);
                    this.RaiseDataMemberChanging("IdOwner");
                    this.ValidateProperty("IdOwner", value);
                    this._idOwner = value;
                    this.RaiseDataMemberChanged("IdOwner");
                    this.OnIdOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPartner' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPartner
        {
            get
            {
                return this._idPartner;
            }
            set
            {
                if ((this._idPartner != value))
                {
                    this.OnIdPartnerChanging(value);
                    this.RaiseDataMemberChanging("IdPartner");
                    this.ValidateProperty("IdPartner", value);
                    this._idPartner = value;
                    this.RaiseDataMemberChanged("IdPartner");
                    this.OnIdPartnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdProgram' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdProgram
        {
            get
            {
                return this._idProgram;
            }
            set
            {
                if ((this._idProgram != value))
                {
                    this.OnIdProgramChanging(value);
                    this.RaiseDataMemberChanging("IdProgram");
                    this.ValidateProperty("IdProgram", value);
                    this._idProgram = value;
                    this.RaiseDataMemberChanged("IdProgram");
                    this.OnIdProgramChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSource' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSource
        {
            get
            {
                return this._idSource;
            }
            set
            {
                if ((this._idSource != value))
                {
                    this.OnIdSourceChanging(value);
                    this.RaiseDataMemberChanging("IdSource");
                    this.ValidateProperty("IdSource", value);
                    this._idSource = value;
                    this.RaiseDataMemberChanged("IdSource");
                    this.OnIdSourceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdType
        {
            get
            {
                return this._idType;
            }
            set
            {
                if ((this._idType != value))
                {
                    this.OnIdTypeChanging(value);
                    this.RaiseDataMemberChanging("IdType");
                    this.ValidateProperty("IdType", value);
                    this._idType = value;
                    this.RaiseDataMemberChanged("IdType");
                    this.OnIdTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Investment' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Investment
        {
            get
            {
                return this._investment;
            }
            set
            {
                if ((this._investment != value))
                {
                    this.OnInvestmentChanging(value);
                    this.RaiseDataMemberChanging("Investment");
                    this.ValidateProperty("Investment", value);
                    this._investment = value;
                    this.RaiseDataMemberChanged("Investment");
                    this.OnInvestmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Owner"/> entity.
        /// </summary>
        [Association("Owner_MicrosoftProgramState", "IdOwner", "IdOwner", IsForeignKey=true)]
        [XmlIgnore()]
        public Owner Owner
        {
            get
            {
                if ((this._owner == null))
                {
                    this._owner = new EntityRef<Owner>(this, "Owner", this.FilterOwner);
                }
                return this._owner.Entity;
            }
            set
            {
                Owner previous = this.Owner;
                if ((previous != value))
                {
                    this.ValidateProperty("Owner", value);
                    if ((previous != null))
                    {
                        this._owner.Entity = null;
                        previous.MicrosoftProgramStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdOwner = value.IdOwner;
                    }
                    else
                    {
                        this.IdOwner = default(int);
                    }
                    this._owner.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates.Add(this);
                    }
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Partner"/> entity.
        /// </summary>
        [Association("Partner_MicrosoftProgramState", "IdPartner", "IdPartner", IsForeignKey=true)]
        [XmlIgnore()]
        public Partner Partner
        {
            get
            {
                if ((this._partner == null))
                {
                    this._partner = new EntityRef<Partner>(this, "Partner", this.FilterPartner);
                }
                return this._partner.Entity;
            }
            set
            {
                Partner previous = this.Partner;
                if ((previous != value))
                {
                    this.ValidateProperty("Partner", value);
                    if ((previous != null))
                    {
                        this._partner.Entity = null;
                        previous.MicrosoftProgramStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPartner = value.IdPartner;
                    }
                    else
                    {
                        this.IdPartner = default(int);
                    }
                    this._partner.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates.Add(this);
                    }
                    this.RaisePropertyChanged("Partner");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Program"/> entity.
        /// </summary>
        [Association("Program_MicrosoftProgramState", "IdProgram", "IdProgram", IsForeignKey=true)]
        [XmlIgnore()]
        public Program Program
        {
            get
            {
                if ((this._program == null))
                {
                    this._program = new EntityRef<Program>(this, "Program", this.FilterProgram);
                }
                return this._program.Entity;
            }
            set
            {
                Program previous = this.Program;
                if ((previous != value))
                {
                    this.ValidateProperty("Program", value);
                    if ((previous != null))
                    {
                        this._program.Entity = null;
                        previous.MicrosoftProgramStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdProgram = value.IdProgram;
                    }
                    else
                    {
                        this.IdProgram = default(int);
                    }
                    this._program.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates.Add(this);
                    }
                    this.RaisePropertyChanged("Program");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Progress' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Progress
        {
            get
            {
                return this._progress;
            }
            set
            {
                if ((this._progress != value))
                {
                    this.OnProgressChanging(value);
                    this.RaiseDataMemberChanging("Progress");
                    this.ValidateProperty("Progress", value);
                    this._progress = value;
                    this.RaiseDataMemberChanged("Progress");
                    this.OnProgressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ROI' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ROI
        {
            get
            {
                return this._roi;
            }
            set
            {
                if ((this._roi != value))
                {
                    this.OnROIChanging(value);
                    this.RaiseDataMemberChanging("ROI");
                    this.ValidateProperty("ROI", value);
                    this._roi = value;
                    this.RaiseDataMemberChanged("ROI");
                    this.OnROIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Source"/> entity.
        /// </summary>
        [Association("Source_MicrosoftProgramState", "IdSource", "IdSource", IsForeignKey=true)]
        [XmlIgnore()]
        public Source Source
        {
            get
            {
                if ((this._source == null))
                {
                    this._source = new EntityRef<Source>(this, "Source", this.FilterSource);
                }
                return this._source.Entity;
            }
            set
            {
                Source previous = this.Source;
                if ((previous != value))
                {
                    this.ValidateProperty("Source", value);
                    if ((previous != null))
                    {
                        this._source.Entity = null;
                        previous.MicrosoftProgramStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSource = value.IdSource;
                    }
                    else
                    {
                        this.IdSource = default(int);
                    }
                    this._source.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates.Add(this);
                    }
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_MicrosoftProgramState", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.MicrosoftProgramStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TypeSource"/> entity.
        /// </summary>
        [Association("TypeSource_MicrosoftProgramState", "IdType", "IdType", IsForeignKey=true)]
        [XmlIgnore()]
        public TypeSource TypeSource
        {
            get
            {
                if ((this._typeSource == null))
                {
                    this._typeSource = new EntityRef<TypeSource>(this, "TypeSource", this.FilterTypeSource);
                }
                return this._typeSource.Entity;
            }
            set
            {
                TypeSource previous = this.TypeSource;
                if ((previous != value))
                {
                    this.ValidateProperty("TypeSource", value);
                    if ((previous != null))
                    {
                        this._typeSource.Entity = null;
                        previous.MicrosoftProgramStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdType = value.IdType;
                    }
                    else
                    {
                        this.IdType = default(Nullable<int>);
                    }
                    this._typeSource.Entity = value;
                    if ((value != null))
                    {
                        value.MicrosoftProgramStates.Add(this);
                    }
                    this.RaisePropertyChanged("TypeSource");
                }
            }
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.IdContact == this.IdContactMsft);
        }
        
        private bool FilterContact1(Contact entity)
        {
            return (entity.IdContact == this.IdContactState);
        }
        
        private bool FilterOwner(Owner entity)
        {
            return (entity.IdOwner == this.IdOwner);
        }
        
        private bool FilterPartner(Partner entity)
        {
            return (entity.IdPartner == this.IdPartner);
        }
        
        private bool FilterProgram(Program entity)
        {
            return (entity.IdProgram == this.IdProgram);
        }
        
        private bool FilterSource(Source entity)
        {
            return (entity.IdSource == this.IdSource);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private bool FilterTypeSource(TypeSource entity)
        {
            return (entity.IdType == this.IdType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idMsftProgramState;
        }
    }
    
    /// <summary>
    /// The 'Month' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Month : Entity
    {
        
        private int _id;
        
        private string _monts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnMontsChanging(string value);
        partial void OnMontsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Month"/> class.
        /// </summary>
        public Month()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Monts' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string Monts
        {
            get
            {
                return this._monts;
            }
            set
            {
                if ((this._monts != value))
                {
                    this.OnMontsChanging(value);
                    this.RaiseDataMemberChanging("Monts");
                    this.ValidateProperty("Monts", value);
                    this._monts = value;
                    this.RaiseDataMemberChanged("Monts");
                    this.OnMontsChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Municipality' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Municipality : Entity
    {
        
        private int _idMunicipality;
        
        private int _idState;
        
        private bool _mainMunicipality;
        
        private string _name;
        
        private EntityCollection<PoliticalInformationMunicipality> _politicalInformationMunicipalities;
        
        private Nullable<long> _population;
        
        private EntityRef<State> _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdMunicipalityChanging(int value);
        partial void OnIdMunicipalityChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnMainMunicipalityChanging(bool value);
        partial void OnMainMunicipalityChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPopulationChanging(Nullable<long> value);
        partial void OnPopulationChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Municipality"/> class.
        /// </summary>
        public Municipality()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdMunicipality' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdMunicipality
        {
            get
            {
                return this._idMunicipality;
            }
            set
            {
                if ((this._idMunicipality != value))
                {
                    this.OnIdMunicipalityChanging(value);
                    this.ValidateProperty("IdMunicipality", value);
                    this._idMunicipality = value;
                    this.RaisePropertyChanged("IdMunicipality");
                    this.OnIdMunicipalityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MainMunicipality' value.
        /// </summary>
        [DataMember()]
        public bool MainMunicipality
        {
            get
            {
                return this._mainMunicipality;
            }
            set
            {
                if ((this._mainMunicipality != value))
                {
                    this.OnMainMunicipalityChanging(value);
                    this.RaiseDataMemberChanging("MainMunicipality");
                    this.ValidateProperty("MainMunicipality", value);
                    this._mainMunicipality = value;
                    this.RaiseDataMemberChanged("MainMunicipality");
                    this.OnMainMunicipalityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PoliticalInformationMunicipality"/> entity instances.
        /// </summary>
        [Association("Municipality_PoliticalInformationMunicipality", "IdMunicipality", "IdMunicipality")]
        [XmlIgnore()]
        public EntityCollection<PoliticalInformationMunicipality> PoliticalInformationMunicipalities
        {
            get
            {
                if ((this._politicalInformationMunicipalities == null))
                {
                    this._politicalInformationMunicipalities = new EntityCollection<PoliticalInformationMunicipality>(this, "PoliticalInformationMunicipalities", this.FilterPoliticalInformationMunicipalities, this.AttachPoliticalInformationMunicipalities, this.DetachPoliticalInformationMunicipalities);
                }
                return this._politicalInformationMunicipalities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Population' value.
        /// </summary>
        [DataMember()]
        public Nullable<long> Population
        {
            get
            {
                return this._population;
            }
            set
            {
                if ((this._population != value))
                {
                    this.OnPopulationChanging(value);
                    this.RaiseDataMemberChanging("Population");
                    this.ValidateProperty("Population", value);
                    this._population = value;
                    this.RaiseDataMemberChanged("Population");
                    this.OnPopulationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_Municipality", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.Municipalities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.Municipalities.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        private void AttachPoliticalInformationMunicipalities(PoliticalInformationMunicipality entity)
        {
            entity.Municipality = this;
        }
        
        private void DetachPoliticalInformationMunicipalities(PoliticalInformationMunicipality entity)
        {
            entity.Municipality = null;
        }
        
        private bool FilterPoliticalInformationMunicipalities(PoliticalInformationMunicipality entity)
        {
            return (entity.IdMunicipality == this.IdMunicipality);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idMunicipality;
        }
    }
    
    /// <summary>
    /// The 'OpenSourceState' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class OpenSourceState : Entity
    {
        
        private int _idOSSState;
        
        private int _idPenetration;
        
        private int _idProduct;
        
        private int _idState;
        
        private int _idTypeProduct;
        
        private EntityRef<Penetration> _penetration;
        
        private EntityRef<Product> _product;
        
        private EntityRef<State> _state;
        
        private EntityRef<TypeProduct> _typeProduct;
        
        private Nullable<int> _year;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdOSSStateChanging(int value);
        partial void OnIdOSSStateChanged();
        partial void OnIdPenetrationChanging(int value);
        partial void OnIdPenetrationChanged();
        partial void OnIdProductChanging(int value);
        partial void OnIdProductChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnIdTypeProductChanging(int value);
        partial void OnIdTypeProductChanged();
        partial void OnYearChanging(Nullable<int> value);
        partial void OnYearChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenSourceState"/> class.
        /// </summary>
        public OpenSourceState()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdOSSState' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdOSSState
        {
            get
            {
                return this._idOSSState;
            }
            set
            {
                if ((this._idOSSState != value))
                {
                    this.OnIdOSSStateChanging(value);
                    this.ValidateProperty("IdOSSState", value);
                    this._idOSSState = value;
                    this.RaisePropertyChanged("IdOSSState");
                    this.OnIdOSSStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPenetration' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPenetration
        {
            get
            {
                return this._idPenetration;
            }
            set
            {
                if ((this._idPenetration != value))
                {
                    this.OnIdPenetrationChanging(value);
                    this.RaiseDataMemberChanging("IdPenetration");
                    this.ValidateProperty("IdPenetration", value);
                    this._idPenetration = value;
                    this.RaiseDataMemberChanged("IdPenetration");
                    this.OnIdPenetrationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdProduct' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdProduct
        {
            get
            {
                return this._idProduct;
            }
            set
            {
                if ((this._idProduct != value))
                {
                    this.OnIdProductChanging(value);
                    this.RaiseDataMemberChanging("IdProduct");
                    this.ValidateProperty("IdProduct", value);
                    this._idProduct = value;
                    this.RaiseDataMemberChanged("IdProduct");
                    this.OnIdProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdTypeProduct' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdTypeProduct
        {
            get
            {
                return this._idTypeProduct;
            }
            set
            {
                if ((this._idTypeProduct != value))
                {
                    this.OnIdTypeProductChanging(value);
                    this.RaiseDataMemberChanging("IdTypeProduct");
                    this.ValidateProperty("IdTypeProduct", value);
                    this._idTypeProduct = value;
                    this.RaiseDataMemberChanged("IdTypeProduct");
                    this.OnIdTypeProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Penetration"/> entity.
        /// </summary>
        [Association("Penetration_OpenSourceState", "IdPenetration", "IdPenetration", IsForeignKey=true)]
        [XmlIgnore()]
        public Penetration Penetration
        {
            get
            {
                if ((this._penetration == null))
                {
                    this._penetration = new EntityRef<Penetration>(this, "Penetration", this.FilterPenetration);
                }
                return this._penetration.Entity;
            }
            set
            {
                Penetration previous = this.Penetration;
                if ((previous != value))
                {
                    this.ValidateProperty("Penetration", value);
                    if ((previous != null))
                    {
                        this._penetration.Entity = null;
                        previous.OpenSourceStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPenetration = value.IdPenetration;
                    }
                    else
                    {
                        this.IdPenetration = default(int);
                    }
                    this._penetration.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStates.Add(this);
                    }
                    this.RaisePropertyChanged("Penetration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_OpenSourceState", "IdProduct", "IdProduct", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.OpenSourceStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdProduct = value.IdProduct;
                    }
                    else
                    {
                        this.IdProduct = default(int);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStates.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_OpenSourceState", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.OpenSourceStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStates.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TypeProduct"/> entity.
        /// </summary>
        [Association("TypeProduct_OpenSourceState", "IdTypeProduct", "IdTypeProduct", IsForeignKey=true)]
        [XmlIgnore()]
        public TypeProduct TypeProduct
        {
            get
            {
                if ((this._typeProduct == null))
                {
                    this._typeProduct = new EntityRef<TypeProduct>(this, "TypeProduct", this.FilterTypeProduct);
                }
                return this._typeProduct.Entity;
            }
            set
            {
                TypeProduct previous = this.TypeProduct;
                if ((previous != value))
                {
                    this.ValidateProperty("TypeProduct", value);
                    if ((previous != null))
                    {
                        this._typeProduct.Entity = null;
                        previous.OpenSourceStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdTypeProduct = value.IdTypeProduct;
                    }
                    else
                    {
                        this.IdTypeProduct = default(int);
                    }
                    this._typeProduct.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStates.Add(this);
                    }
                    this.RaisePropertyChanged("TypeProduct");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Year' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Year
        {
            get
            {
                return this._year;
            }
            set
            {
                if ((this._year != value))
                {
                    this.OnYearChanging(value);
                    this.RaiseDataMemberChanging("Year");
                    this.ValidateProperty("Year", value);
                    this._year = value;
                    this.RaiseDataMemberChanged("Year");
                    this.OnYearChanged();
                }
            }
        }
        
        private bool FilterPenetration(Penetration entity)
        {
            return (entity.IdPenetration == this.IdPenetration);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.IdProduct == this.IdProduct);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private bool FilterTypeProduct(TypeProduct entity)
        {
            return (entity.IdTypeProduct == this.IdTypeProduct);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idOSSState;
        }
    }
    
    /// <summary>
    /// The 'OpenSourceStateCommunity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class OpenSourceStateCommunity : Entity
    {
        
        private EntityRef<Contact> _contact;
        
        private int _idContact;
        
        private int _idOpenSourceCommunityState;
        
        private Nullable<int> _idState;
        
        private string _name;
        
        private EntityRef<State> _state;
        
        private string _universityRelationship;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdContactChanging(int value);
        partial void OnIdContactChanged();
        partial void OnIdOpenSourceCommunityStateChanging(int value);
        partial void OnIdOpenSourceCommunityStateChanged();
        partial void OnIdStateChanging(Nullable<int> value);
        partial void OnIdStateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnUniversityRelationshipChanging(string value);
        partial void OnUniversityRelationshipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenSourceStateCommunity"/> class.
        /// </summary>
        public OpenSourceStateCommunity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Contact_OpenSourceStateCommunity", "IdContact", "IdContact", IsForeignKey=true)]
        [XmlIgnore()]
        public Contact Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityRef<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact.Entity;
            }
            set
            {
                Contact previous = this.Contact;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact", value);
                    if ((previous != null))
                    {
                        this._contact.Entity = null;
                        previous.OpenSourceStateCommunities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdContact = value.IdContact;
                    }
                    else
                    {
                        this.IdContact = default(int);
                    }
                    this._contact.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStateCommunities.Add(this);
                    }
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdContact' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdContact
        {
            get
            {
                return this._idContact;
            }
            set
            {
                if ((this._idContact != value))
                {
                    this.OnIdContactChanging(value);
                    this.RaiseDataMemberChanging("IdContact");
                    this.ValidateProperty("IdContact", value);
                    this._idContact = value;
                    this.RaiseDataMemberChanged("IdContact");
                    this.OnIdContactChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdOpenSourceCommunityState' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdOpenSourceCommunityState
        {
            get
            {
                return this._idOpenSourceCommunityState;
            }
            set
            {
                if ((this._idOpenSourceCommunityState != value))
                {
                    this.OnIdOpenSourceCommunityStateChanging(value);
                    this.ValidateProperty("IdOpenSourceCommunityState", value);
                    this._idOpenSourceCommunityState = value;
                    this.RaisePropertyChanged("IdOpenSourceCommunityState");
                    this.OnIdOpenSourceCommunityStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_OpenSourceStateCommunity", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.OpenSourceStateCommunities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(Nullable<int>);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStateCommunities.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UniversityRelationship' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string UniversityRelationship
        {
            get
            {
                return this._universityRelationship;
            }
            set
            {
                if ((this._universityRelationship != value))
                {
                    this.OnUniversityRelationshipChanging(value);
                    this.RaiseDataMemberChanging("UniversityRelationship");
                    this.ValidateProperty("UniversityRelationship", value);
                    this._universityRelationship = value;
                    this.RaiseDataMemberChanged("UniversityRelationship");
                    this.OnUniversityRelationshipChanged();
                }
            }
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.IdContact == this.IdContact);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idOpenSourceCommunityState;
        }
    }
    
    /// <summary>
    /// The 'OpenSourceStateProvider' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class OpenSourceStateProvider : Entity
    {
        
        private DateTime _dateFrom;
        
        private int _idOpenSourceStateProvider;
        
        private int _idProduct;
        
        private Nullable<int> _idState;
        
        private double _invoicing;
        
        private string _name;
        
        private EntityRef<Product> _product;
        
        private EntityRef<State> _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(DateTime value);
        partial void OnDateFromChanged();
        partial void OnIdOpenSourceStateProviderChanging(int value);
        partial void OnIdOpenSourceStateProviderChanged();
        partial void OnIdProductChanging(int value);
        partial void OnIdProductChanged();
        partial void OnIdStateChanging(Nullable<int> value);
        partial void OnIdStateChanged();
        partial void OnInvoicingChanging(double value);
        partial void OnInvoicingChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenSourceStateProvider"/> class.
        /// </summary>
        public OpenSourceStateProvider()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdOpenSourceStateProvider' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdOpenSourceStateProvider
        {
            get
            {
                return this._idOpenSourceStateProvider;
            }
            set
            {
                if ((this._idOpenSourceStateProvider != value))
                {
                    this.OnIdOpenSourceStateProviderChanging(value);
                    this.ValidateProperty("IdOpenSourceStateProvider", value);
                    this._idOpenSourceStateProvider = value;
                    this.RaisePropertyChanged("IdOpenSourceStateProvider");
                    this.OnIdOpenSourceStateProviderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdProduct' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdProduct
        {
            get
            {
                return this._idProduct;
            }
            set
            {
                if ((this._idProduct != value))
                {
                    this.OnIdProductChanging(value);
                    this.RaiseDataMemberChanging("IdProduct");
                    this.ValidateProperty("IdProduct", value);
                    this._idProduct = value;
                    this.RaiseDataMemberChanged("IdProduct");
                    this.OnIdProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Invoicing' value.
        /// </summary>
        [DataMember()]
        public double Invoicing
        {
            get
            {
                return this._invoicing;
            }
            set
            {
                if ((this._invoicing != value))
                {
                    this.OnInvoicingChanging(value);
                    this.RaiseDataMemberChanging("Invoicing");
                    this.ValidateProperty("Invoicing", value);
                    this._invoicing = value;
                    this.RaiseDataMemberChanged("Invoicing");
                    this.OnInvoicingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Product_OpenSourceStateProvider", "IdProduct", "IdProduct", IsForeignKey=true)]
        [XmlIgnore()]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    if ((previous != null))
                    {
                        this._product.Entity = null;
                        previous.OpenSourceStateProviders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdProduct = value.IdProduct;
                    }
                    else
                    {
                        this.IdProduct = default(int);
                    }
                    this._product.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStateProviders.Add(this);
                    }
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_OpenSourceStateProvider", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.OpenSourceStateProviders.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(Nullable<int>);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.OpenSourceStateProviders.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.IdProduct == this.IdProduct);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idOpenSourceStateProvider;
        }
    }
    
    /// <summary>
    /// The 'Organization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Organization : Entity
    {
        
        private int _idOrganization;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdOrganizationChanging(int value);
        partial void OnIdOrganizationChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization"/> class.
        /// </summary>
        public Organization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdOrganization' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdOrganization
        {
            get
            {
                return this._idOrganization;
            }
            set
            {
                if ((this._idOrganization != value))
                {
                    this.OnIdOrganizationChanging(value);
                    this.ValidateProperty("IdOrganization", value);
                    this._idOrganization = value;
                    this.RaisePropertyChanged("IdOrganization");
                    this.OnIdOrganizationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idOrganization;
        }
    }
    
    /// <summary>
    /// The 'Owner' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Owner : Entity
    {
        
        private EntityCollection<Competition> _competitions;
        
        private int _idOwner;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates;
        
        private string _name;
        
        private EntityCollection<StateProgram> _statePrograms;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdOwnerChanging(int value);
        partial void OnIdOwnerChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Owner"/> class.
        /// </summary>
        public Owner()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Competition"/> entity instances.
        /// </summary>
        [Association("Owner_Competition", "IdOwner", "IdOwner")]
        [XmlIgnore()]
        public EntityCollection<Competition> Competitions
        {
            get
            {
                if ((this._competitions == null))
                {
                    this._competitions = new EntityCollection<Competition>(this, "Competitions", this.FilterCompetitions, this.AttachCompetitions, this.DetachCompetitions);
                }
                return this._competitions;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdOwner' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdOwner
        {
            get
            {
                return this._idOwner;
            }
            set
            {
                if ((this._idOwner != value))
                {
                    this.OnIdOwnerChanging(value);
                    this.ValidateProperty("IdOwner", value);
                    this._idOwner = value;
                    this.RaisePropertyChanged("IdOwner");
                    this.OnIdOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("Owner_MicrosoftProgramState", "IdOwner", "IdOwner")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                if ((this._microsoftProgramStates == null))
                {
                    this._microsoftProgramStates = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates", this.FilterMicrosoftProgramStates, this.AttachMicrosoftProgramStates, this.DetachMicrosoftProgramStates);
                }
                return this._microsoftProgramStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("Owner_StateProgram", "IdOwner", "IdOwner")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms
        {
            get
            {
                if ((this._statePrograms == null))
                {
                    this._statePrograms = new EntityCollection<StateProgram>(this, "StatePrograms", this.FilterStatePrograms, this.AttachStatePrograms, this.DetachStatePrograms);
                }
                return this._statePrograms;
            }
        }
        
        private void AttachCompetitions(Competition entity)
        {
            entity.Owner = this;
        }
        
        private void DetachCompetitions(Competition entity)
        {
            entity.Owner = null;
        }
        
        private bool FilterCompetitions(Competition entity)
        {
            return (entity.IdOwner == this.IdOwner);
        }
        
        private void AttachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Owner = this;
        }
        
        private void DetachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Owner = null;
        }
        
        private bool FilterMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            return (entity.IdOwner == this.IdOwner);
        }
        
        private void AttachStatePrograms(StateProgram entity)
        {
            entity.Owner = this;
        }
        
        private void DetachStatePrograms(StateProgram entity)
        {
            entity.Owner = null;
        }
        
        private bool FilterStatePrograms(StateProgram entity)
        {
            return (entity.IdOwner == this.IdOwner);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idOwner;
        }
    }
    
    /// <summary>
    /// The 'Partner' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Partner : Entity
    {
        
        private int _idPartner;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates;
        
        private string _name;
        
        private EntityCollection<StateProgram> _statePrograms;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdPartnerChanging(int value);
        partial void OnIdPartnerChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Partner"/> class.
        /// </summary>
        public Partner()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdPartner' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdPartner
        {
            get
            {
                return this._idPartner;
            }
            set
            {
                if ((this._idPartner != value))
                {
                    this.OnIdPartnerChanging(value);
                    this.ValidateProperty("IdPartner", value);
                    this._idPartner = value;
                    this.RaisePropertyChanged("IdPartner");
                    this.OnIdPartnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("Partner_MicrosoftProgramState", "IdPartner", "IdPartner")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                if ((this._microsoftProgramStates == null))
                {
                    this._microsoftProgramStates = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates", this.FilterMicrosoftProgramStates, this.AttachMicrosoftProgramStates, this.DetachMicrosoftProgramStates);
                }
                return this._microsoftProgramStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("Partner_StateProgram", "IdPartner", "IdPartner")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms
        {
            get
            {
                if ((this._statePrograms == null))
                {
                    this._statePrograms = new EntityCollection<StateProgram>(this, "StatePrograms", this.FilterStatePrograms, this.AttachStatePrograms, this.DetachStatePrograms);
                }
                return this._statePrograms;
            }
        }
        
        private void AttachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Partner = this;
        }
        
        private void DetachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Partner = null;
        }
        
        private bool FilterMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            return (entity.IdPartner == this.IdPartner);
        }
        
        private void AttachStatePrograms(StateProgram entity)
        {
            entity.Partner = this;
        }
        
        private void DetachStatePrograms(StateProgram entity)
        {
            entity.Partner = null;
        }
        
        private bool FilterStatePrograms(StateProgram entity)
        {
            return (entity.IdPartner == this.IdPartner);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idPartner;
        }
    }
    
    /// <summary>
    /// The 'Penetration' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Penetration : Entity
    {
        
        private int _idPenetration;
        
        private string _name;
        
        private EntityCollection<OpenSourceState> _openSourceStates;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdPenetrationChanging(int value);
        partial void OnIdPenetrationChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Penetration"/> class.
        /// </summary>
        public Penetration()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdPenetration' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdPenetration
        {
            get
            {
                return this._idPenetration;
            }
            set
            {
                if ((this._idPenetration != value))
                {
                    this.OnIdPenetrationChanging(value);
                    this.ValidateProperty("IdPenetration", value);
                    this._idPenetration = value;
                    this.RaisePropertyChanged("IdPenetration");
                    this.OnIdPenetrationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceState"/> entity instances.
        /// </summary>
        [Association("Penetration_OpenSourceState", "IdPenetration", "IdPenetration")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceState> OpenSourceStates
        {
            get
            {
                if ((this._openSourceStates == null))
                {
                    this._openSourceStates = new EntityCollection<OpenSourceState>(this, "OpenSourceStates", this.FilterOpenSourceStates, this.AttachOpenSourceStates, this.DetachOpenSourceStates);
                }
                return this._openSourceStates;
            }
        }
        
        private void AttachOpenSourceStates(OpenSourceState entity)
        {
            entity.Penetration = this;
        }
        
        private void DetachOpenSourceStates(OpenSourceState entity)
        {
            entity.Penetration = null;
        }
        
        private bool FilterOpenSourceStates(OpenSourceState entity)
        {
            return (entity.IdPenetration == this.IdPenetration);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idPenetration;
        }
    }
    
    /// <summary>
    /// The 'PoliticalInformationMunicipality' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class PoliticalInformationMunicipality : Entity
    {
        
        private DateTime _dateFrom;
        
        private DateTime _dateTo;
        
        private string _developmentPlan;
        
        private int _idMunicipality;
        
        private int _idPoliticalInformationMunicipality;
        
        private int _idPoliticalInformationState;
        
        private int _idPoliticalParty;
        
        private EntityRef<Municipality> _municipality;
        
        private string _observations;
        
        private EntityRef<PoliticalParty> _politicalParty;
        
        private string _sectorials;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(DateTime value);
        partial void OnDateFromChanged();
        partial void OnDateToChanging(DateTime value);
        partial void OnDateToChanged();
        partial void OnDevelopmentPlanChanging(string value);
        partial void OnDevelopmentPlanChanged();
        partial void OnIdMunicipalityChanging(int value);
        partial void OnIdMunicipalityChanged();
        partial void OnIdPoliticalInformationMunicipalityChanging(int value);
        partial void OnIdPoliticalInformationMunicipalityChanged();
        partial void OnIdPoliticalInformationStateChanging(int value);
        partial void OnIdPoliticalInformationStateChanged();
        partial void OnIdPoliticalPartyChanging(int value);
        partial void OnIdPoliticalPartyChanged();
        partial void OnObservationsChanging(string value);
        partial void OnObservationsChanged();
        partial void OnSectorialsChanging(string value);
        partial void OnSectorialsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PoliticalInformationMunicipality"/> class.
        /// </summary>
        public PoliticalInformationMunicipality()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTo' value.
        /// </summary>
        [DataMember()]
        public DateTime DateTo
        {
            get
            {
                return this._dateTo;
            }
            set
            {
                if ((this._dateTo != value))
                {
                    this.OnDateToChanging(value);
                    this.RaiseDataMemberChanging("DateTo");
                    this.ValidateProperty("DateTo", value);
                    this._dateTo = value;
                    this.RaiseDataMemberChanged("DateTo");
                    this.OnDateToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DevelopmentPlan' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DevelopmentPlan
        {
            get
            {
                return this._developmentPlan;
            }
            set
            {
                if ((this._developmentPlan != value))
                {
                    this.OnDevelopmentPlanChanging(value);
                    this.RaiseDataMemberChanging("DevelopmentPlan");
                    this.ValidateProperty("DevelopmentPlan", value);
                    this._developmentPlan = value;
                    this.RaiseDataMemberChanged("DevelopmentPlan");
                    this.OnDevelopmentPlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdMunicipality' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdMunicipality
        {
            get
            {
                return this._idMunicipality;
            }
            set
            {
                if ((this._idMunicipality != value))
                {
                    this.OnIdMunicipalityChanging(value);
                    this.RaiseDataMemberChanging("IdMunicipality");
                    this.ValidateProperty("IdMunicipality", value);
                    this._idMunicipality = value;
                    this.RaiseDataMemberChanged("IdMunicipality");
                    this.OnIdMunicipalityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPoliticalInformationMunicipality' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdPoliticalInformationMunicipality
        {
            get
            {
                return this._idPoliticalInformationMunicipality;
            }
            set
            {
                if ((this._idPoliticalInformationMunicipality != value))
                {
                    this.OnIdPoliticalInformationMunicipalityChanging(value);
                    this.ValidateProperty("IdPoliticalInformationMunicipality", value);
                    this._idPoliticalInformationMunicipality = value;
                    this.RaisePropertyChanged("IdPoliticalInformationMunicipality");
                    this.OnIdPoliticalInformationMunicipalityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPoliticalInformationState' value.
        /// </summary>
        [DataMember()]
        public int IdPoliticalInformationState
        {
            get
            {
                return this._idPoliticalInformationState;
            }
            set
            {
                if ((this._idPoliticalInformationState != value))
                {
                    this.OnIdPoliticalInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdPoliticalInformationState");
                    this.ValidateProperty("IdPoliticalInformationState", value);
                    this._idPoliticalInformationState = value;
                    this.RaiseDataMemberChanged("IdPoliticalInformationState");
                    this.OnIdPoliticalInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPoliticalParty' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPoliticalParty
        {
            get
            {
                return this._idPoliticalParty;
            }
            set
            {
                if ((this._idPoliticalParty != value))
                {
                    this.OnIdPoliticalPartyChanging(value);
                    this.RaiseDataMemberChanging("IdPoliticalParty");
                    this.ValidateProperty("IdPoliticalParty", value);
                    this._idPoliticalParty = value;
                    this.RaiseDataMemberChanged("IdPoliticalParty");
                    this.OnIdPoliticalPartyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Municipality"/> entity.
        /// </summary>
        [Association("Municipality_PoliticalInformationMunicipality", "IdMunicipality", "IdMunicipality", IsForeignKey=true)]
        [XmlIgnore()]
        public Municipality Municipality
        {
            get
            {
                if ((this._municipality == null))
                {
                    this._municipality = new EntityRef<Municipality>(this, "Municipality", this.FilterMunicipality);
                }
                return this._municipality.Entity;
            }
            set
            {
                Municipality previous = this.Municipality;
                if ((previous != value))
                {
                    this.ValidateProperty("Municipality", value);
                    if ((previous != null))
                    {
                        this._municipality.Entity = null;
                        previous.PoliticalInformationMunicipalities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdMunicipality = value.IdMunicipality;
                    }
                    else
                    {
                        this.IdMunicipality = default(int);
                    }
                    this._municipality.Entity = value;
                    if ((value != null))
                    {
                        value.PoliticalInformationMunicipalities.Add(this);
                    }
                    this.RaisePropertyChanged("Municipality");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PoliticalParty"/> entity.
        /// </summary>
        [Association("PoliticalParty_PoliticalInformationMunicipality", "IdPoliticalParty", "IdPoliticalParty", IsForeignKey=true)]
        [XmlIgnore()]
        public PoliticalParty PoliticalParty
        {
            get
            {
                if ((this._politicalParty == null))
                {
                    this._politicalParty = new EntityRef<PoliticalParty>(this, "PoliticalParty", this.FilterPoliticalParty);
                }
                return this._politicalParty.Entity;
            }
            set
            {
                PoliticalParty previous = this.PoliticalParty;
                if ((previous != value))
                {
                    this.ValidateProperty("PoliticalParty", value);
                    if ((previous != null))
                    {
                        this._politicalParty.Entity = null;
                        previous.PoliticalInformationMunicipalities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPoliticalParty = value.IdPoliticalParty;
                    }
                    else
                    {
                        this.IdPoliticalParty = default(int);
                    }
                    this._politicalParty.Entity = value;
                    if ((value != null))
                    {
                        value.PoliticalInformationMunicipalities.Add(this);
                    }
                    this.RaisePropertyChanged("PoliticalParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sectorials' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Sectorials
        {
            get
            {
                return this._sectorials;
            }
            set
            {
                if ((this._sectorials != value))
                {
                    this.OnSectorialsChanging(value);
                    this.RaiseDataMemberChanging("Sectorials");
                    this.ValidateProperty("Sectorials", value);
                    this._sectorials = value;
                    this.RaiseDataMemberChanged("Sectorials");
                    this.OnSectorialsChanged();
                }
            }
        }
        
        private bool FilterMunicipality(Municipality entity)
        {
            return (entity.IdMunicipality == this.IdMunicipality);
        }
        
        private bool FilterPoliticalParty(PoliticalParty entity)
        {
            return (entity.IdPoliticalParty == this.IdPoliticalParty);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idPoliticalInformationMunicipality;
        }
    }
    
    /// <summary>
    /// The 'PoliticalInformationState' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class PoliticalInformationState : Entity
    {
        
        private DateTime _dateFrom;
        
        private DateTime _dateTo;
        
        private string _developmentPlan;
        
        private int _idPoliticalInformationState;
        
        private int _idPoliticalParty;
        
        private int _idState;
        
        private string _observations;
        
        private EntityCollection<PoliticalInformationStateFile> _politicalInformationStateFiles;
        
        private EntityRef<PoliticalParty> _politicalParty;
        
        private string _sectorials;
        
        private EntityRef<State> _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(DateTime value);
        partial void OnDateFromChanged();
        partial void OnDateToChanging(DateTime value);
        partial void OnDateToChanged();
        partial void OnDevelopmentPlanChanging(string value);
        partial void OnDevelopmentPlanChanged();
        partial void OnIdPoliticalInformationStateChanging(int value);
        partial void OnIdPoliticalInformationStateChanged();
        partial void OnIdPoliticalPartyChanging(int value);
        partial void OnIdPoliticalPartyChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnObservationsChanging(string value);
        partial void OnObservationsChanged();
        partial void OnSectorialsChanging(string value);
        partial void OnSectorialsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PoliticalInformationState"/> class.
        /// </summary>
        public PoliticalInformationState()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTo' value.
        /// </summary>
        [DataMember()]
        public DateTime DateTo
        {
            get
            {
                return this._dateTo;
            }
            set
            {
                if ((this._dateTo != value))
                {
                    this.OnDateToChanging(value);
                    this.RaiseDataMemberChanging("DateTo");
                    this.ValidateProperty("DateTo", value);
                    this._dateTo = value;
                    this.RaiseDataMemberChanged("DateTo");
                    this.OnDateToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DevelopmentPlan' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string DevelopmentPlan
        {
            get
            {
                return this._developmentPlan;
            }
            set
            {
                if ((this._developmentPlan != value))
                {
                    this.OnDevelopmentPlanChanging(value);
                    this.RaiseDataMemberChanging("DevelopmentPlan");
                    this.ValidateProperty("DevelopmentPlan", value);
                    this._developmentPlan = value;
                    this.RaiseDataMemberChanged("DevelopmentPlan");
                    this.OnDevelopmentPlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPoliticalInformationState' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdPoliticalInformationState
        {
            get
            {
                return this._idPoliticalInformationState;
            }
            set
            {
                if ((this._idPoliticalInformationState != value))
                {
                    this.OnIdPoliticalInformationStateChanging(value);
                    this.ValidateProperty("IdPoliticalInformationState", value);
                    this._idPoliticalInformationState = value;
                    this.RaisePropertyChanged("IdPoliticalInformationState");
                    this.OnIdPoliticalInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPoliticalParty' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPoliticalParty
        {
            get
            {
                return this._idPoliticalParty;
            }
            set
            {
                if ((this._idPoliticalParty != value))
                {
                    this.OnIdPoliticalPartyChanging(value);
                    this.RaiseDataMemberChanging("IdPoliticalParty");
                    this.ValidateProperty("IdPoliticalParty", value);
                    this._idPoliticalParty = value;
                    this.RaiseDataMemberChanged("IdPoliticalParty");
                    this.OnIdPoliticalPartyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observations' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Observations
        {
            get
            {
                return this._observations;
            }
            set
            {
                if ((this._observations != value))
                {
                    this.OnObservationsChanging(value);
                    this.RaiseDataMemberChanging("Observations");
                    this.ValidateProperty("Observations", value);
                    this._observations = value;
                    this.RaiseDataMemberChanged("Observations");
                    this.OnObservationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PoliticalInformationStateFile"/> entity instances.
        /// </summary>
        [Association("PoliticalInformationState_PoliticalInformationStateFile", "IdPoliticalInformationState", "IdPoliticalInformationState")]
        [XmlIgnore()]
        public EntityCollection<PoliticalInformationStateFile> PoliticalInformationStateFiles
        {
            get
            {
                if ((this._politicalInformationStateFiles == null))
                {
                    this._politicalInformationStateFiles = new EntityCollection<PoliticalInformationStateFile>(this, "PoliticalInformationStateFiles", this.FilterPoliticalInformationStateFiles, this.AttachPoliticalInformationStateFiles, this.DetachPoliticalInformationStateFiles);
                }
                return this._politicalInformationStateFiles;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PoliticalParty"/> entity.
        /// </summary>
        [Association("PoliticalParty_PoliticalInformationState", "IdPoliticalParty", "IdPoliticalParty", IsForeignKey=true)]
        [XmlIgnore()]
        public PoliticalParty PoliticalParty
        {
            get
            {
                if ((this._politicalParty == null))
                {
                    this._politicalParty = new EntityRef<PoliticalParty>(this, "PoliticalParty", this.FilterPoliticalParty);
                }
                return this._politicalParty.Entity;
            }
            set
            {
                PoliticalParty previous = this.PoliticalParty;
                if ((previous != value))
                {
                    this.ValidateProperty("PoliticalParty", value);
                    if ((previous != null))
                    {
                        this._politicalParty.Entity = null;
                        previous.PoliticalInformationStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPoliticalParty = value.IdPoliticalParty;
                    }
                    else
                    {
                        this.IdPoliticalParty = default(int);
                    }
                    this._politicalParty.Entity = value;
                    if ((value != null))
                    {
                        value.PoliticalInformationStates.Add(this);
                    }
                    this.RaisePropertyChanged("PoliticalParty");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Sectorials' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Sectorials
        {
            get
            {
                return this._sectorials;
            }
            set
            {
                if ((this._sectorials != value))
                {
                    this.OnSectorialsChanging(value);
                    this.RaiseDataMemberChanging("Sectorials");
                    this.ValidateProperty("Sectorials", value);
                    this._sectorials = value;
                    this.RaiseDataMemberChanged("Sectorials");
                    this.OnSectorialsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_PoliticalInformationState", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.PoliticalInformationStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.PoliticalInformationStates.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        private void AttachPoliticalInformationStateFiles(PoliticalInformationStateFile entity)
        {
            entity.PoliticalInformationState = this;
        }
        
        private void DetachPoliticalInformationStateFiles(PoliticalInformationStateFile entity)
        {
            entity.PoliticalInformationState = null;
        }
        
        private bool FilterPoliticalInformationStateFiles(PoliticalInformationStateFile entity)
        {
            return (entity.IdPoliticalInformationState == this.IdPoliticalInformationState);
        }
        
        private bool FilterPoliticalParty(PoliticalParty entity)
        {
            return (entity.IdPoliticalParty == this.IdPoliticalParty);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idPoliticalInformationState;
        }
    }
    
    /// <summary>
    /// The 'PoliticalInformationStateFile' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class PoliticalInformationStateFile : Entity
    {
        
        private byte[] _fileData;
        
        private string _fileName;
        
        private int _idFilePoliticalStateInformation;
        
        private int _idPoliticalInformationState;
        
        private EntityRef<PoliticalInformationState> _politicalInformationState;
        
        private Guid _rowGuid;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFileDataChanging(byte[] value);
        partial void OnFileDataChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnIdFilePoliticalStateInformationChanging(int value);
        partial void OnIdFilePoliticalStateInformationChanged();
        partial void OnIdPoliticalInformationStateChanging(int value);
        partial void OnIdPoliticalInformationStateChanged();
        partial void OnRowGuidChanging(Guid value);
        partial void OnRowGuidChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PoliticalInformationStateFile"/> class.
        /// </summary>
        public PoliticalInformationStateFile()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FileData' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public byte[] FileData
        {
            get
            {
                return this._fileData;
            }
            set
            {
                if ((this._fileData != value))
                {
                    this.OnFileDataChanging(value);
                    this.RaiseDataMemberChanging("FileData");
                    this.ValidateProperty("FileData", value);
                    this._fileData = value;
                    this.RaiseDataMemberChanged("FileData");
                    this.OnFileDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.RaiseDataMemberChanging("FileName");
                    this.ValidateProperty("FileName", value);
                    this._fileName = value;
                    this.RaiseDataMemberChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdFilePoliticalStateInformation' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdFilePoliticalStateInformation
        {
            get
            {
                return this._idFilePoliticalStateInformation;
            }
            set
            {
                if ((this._idFilePoliticalStateInformation != value))
                {
                    this.OnIdFilePoliticalStateInformationChanging(value);
                    this.ValidateProperty("IdFilePoliticalStateInformation", value);
                    this._idFilePoliticalStateInformation = value;
                    this.RaisePropertyChanged("IdFilePoliticalStateInformation");
                    this.OnIdFilePoliticalStateInformationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPoliticalInformationState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPoliticalInformationState
        {
            get
            {
                return this._idPoliticalInformationState;
            }
            set
            {
                if ((this._idPoliticalInformationState != value))
                {
                    this.OnIdPoliticalInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdPoliticalInformationState");
                    this.ValidateProperty("IdPoliticalInformationState", value);
                    this._idPoliticalInformationState = value;
                    this.RaiseDataMemberChanged("IdPoliticalInformationState");
                    this.OnIdPoliticalInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PoliticalInformationState"/> entity.
        /// </summary>
        [Association("PoliticalInformationState_PoliticalInformationStateFile", "IdPoliticalInformationState", "IdPoliticalInformationState", IsForeignKey=true)]
        [XmlIgnore()]
        public PoliticalInformationState PoliticalInformationState
        {
            get
            {
                if ((this._politicalInformationState == null))
                {
                    this._politicalInformationState = new EntityRef<PoliticalInformationState>(this, "PoliticalInformationState", this.FilterPoliticalInformationState);
                }
                return this._politicalInformationState.Entity;
            }
            set
            {
                PoliticalInformationState previous = this.PoliticalInformationState;
                if ((previous != value))
                {
                    this.ValidateProperty("PoliticalInformationState", value);
                    if ((previous != null))
                    {
                        this._politicalInformationState.Entity = null;
                        previous.PoliticalInformationStateFiles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPoliticalInformationState = value.IdPoliticalInformationState;
                    }
                    else
                    {
                        this.IdPoliticalInformationState = default(int);
                    }
                    this._politicalInformationState.Entity = value;
                    if ((value != null))
                    {
                        value.PoliticalInformationStateFiles.Add(this);
                    }
                    this.RaisePropertyChanged("PoliticalInformationState");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowGuid' value.
        /// </summary>
        [DataMember()]
        public Guid RowGuid
        {
            get
            {
                return this._rowGuid;
            }
            set
            {
                if ((this._rowGuid != value))
                {
                    this.OnRowGuidChanging(value);
                    this.RaiseDataMemberChanging("RowGuid");
                    this.ValidateProperty("RowGuid", value);
                    this._rowGuid = value;
                    this.RaiseDataMemberChanged("RowGuid");
                    this.OnRowGuidChanged();
                }
            }
        }
        
        private bool FilterPoliticalInformationState(PoliticalInformationState entity)
        {
            return (entity.IdPoliticalInformationState == this.IdPoliticalInformationState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idFilePoliticalStateInformation;
        }
    }
    
    /// <summary>
    /// The 'PoliticalParty' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class PoliticalParty : Entity
    {
        
        private string _color;
        
        private Nullable<int> _colorIndex;
        
        private int _idPoliticalParty;
        
        private string _name;
        
        private EntityCollection<PoliticalInformationMunicipality> _politicalInformationMunicipalities;
        
        private EntityCollection<PoliticalInformationState> _politicalInformationStates;
        
        private string _shortName;
        
        private bool _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnColorIndexChanging(Nullable<int> value);
        partial void OnColorIndexChanged();
        partial void OnIdPoliticalPartyChanging(int value);
        partial void OnIdPoliticalPartyChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnShortNameChanging(string value);
        partial void OnShortNameChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PoliticalParty"/> class.
        /// </summary>
        public PoliticalParty()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Color' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Color
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OnColorChanging(value);
                    this.RaiseDataMemberChanging("Color");
                    this.ValidateProperty("Color", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("Color");
                    this.OnColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ColorIndex' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ColorIndex
        {
            get
            {
                return this._colorIndex;
            }
            set
            {
                if ((this._colorIndex != value))
                {
                    this.OnColorIndexChanging(value);
                    this.RaiseDataMemberChanging("ColorIndex");
                    this.ValidateProperty("ColorIndex", value);
                    this._colorIndex = value;
                    this.RaiseDataMemberChanged("ColorIndex");
                    this.OnColorIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPoliticalParty' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdPoliticalParty
        {
            get
            {
                return this._idPoliticalParty;
            }
            set
            {
                if ((this._idPoliticalParty != value))
                {
                    this.OnIdPoliticalPartyChanging(value);
                    this.ValidateProperty("IdPoliticalParty", value);
                    this._idPoliticalParty = value;
                    this.RaisePropertyChanged("IdPoliticalParty");
                    this.OnIdPoliticalPartyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PoliticalInformationMunicipality"/> entity instances.
        /// </summary>
        [Association("PoliticalParty_PoliticalInformationMunicipality", "IdPoliticalParty", "IdPoliticalParty")]
        [XmlIgnore()]
        public EntityCollection<PoliticalInformationMunicipality> PoliticalInformationMunicipalities
        {
            get
            {
                if ((this._politicalInformationMunicipalities == null))
                {
                    this._politicalInformationMunicipalities = new EntityCollection<PoliticalInformationMunicipality>(this, "PoliticalInformationMunicipalities", this.FilterPoliticalInformationMunicipalities, this.AttachPoliticalInformationMunicipalities, this.DetachPoliticalInformationMunicipalities);
                }
                return this._politicalInformationMunicipalities;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PoliticalInformationState"/> entity instances.
        /// </summary>
        [Association("PoliticalParty_PoliticalInformationState", "IdPoliticalParty", "IdPoliticalParty")]
        [XmlIgnore()]
        public EntityCollection<PoliticalInformationState> PoliticalInformationStates
        {
            get
            {
                if ((this._politicalInformationStates == null))
                {
                    this._politicalInformationStates = new EntityCollection<PoliticalInformationState>(this, "PoliticalInformationStates", this.FilterPoliticalInformationStates, this.AttachPoliticalInformationStates, this.DetachPoliticalInformationStates);
                }
                return this._politicalInformationStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShortName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string ShortName
        {
            get
            {
                return this._shortName;
            }
            set
            {
                if ((this._shortName != value))
                {
                    this.OnShortNameChanging(value);
                    this.RaiseDataMemberChanging("ShortName");
                    this.ValidateProperty("ShortName", value);
                    this._shortName = value;
                    this.RaiseDataMemberChanged("ShortName");
                    this.OnShortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public bool Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private void AttachPoliticalInformationMunicipalities(PoliticalInformationMunicipality entity)
        {
            entity.PoliticalParty = this;
        }
        
        private void DetachPoliticalInformationMunicipalities(PoliticalInformationMunicipality entity)
        {
            entity.PoliticalParty = null;
        }
        
        private bool FilterPoliticalInformationMunicipalities(PoliticalInformationMunicipality entity)
        {
            return (entity.IdPoliticalParty == this.IdPoliticalParty);
        }
        
        private void AttachPoliticalInformationStates(PoliticalInformationState entity)
        {
            entity.PoliticalParty = this;
        }
        
        private void DetachPoliticalInformationStates(PoliticalInformationState entity)
        {
            entity.PoliticalParty = null;
        }
        
        private bool FilterPoliticalInformationStates(PoliticalInformationState entity)
        {
            return (entity.IdPoliticalParty == this.IdPoliticalParty);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idPoliticalParty;
        }
    }
    
    /// <summary>
    /// The 'PopulationAttended' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class PopulationAttended : Entity
    {
        
        private EntityCollection<CapacitationCenterInformation> _capacitationCenterInformations;
        
        private EntityCollection<CapacitationCenter> _capacitationCenters;
        
        private int _idPopulationAttended;
        
        private string _name;
        
        private EntityCollection<SocialOrganizationInformation> _socialOrganizationInformations;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdPopulationAttendedChanging(int value);
        partial void OnIdPopulationAttendedChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PopulationAttended"/> class.
        /// </summary>
        public PopulationAttended()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenterInformation"/> entity instances.
        /// </summary>
        [Association("PopulationAttended_CapacitationCenterInformation", "IdPopulationAttended", "IdPopulationAttended")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenterInformation> CapacitationCenterInformations
        {
            get
            {
                if ((this._capacitationCenterInformations == null))
                {
                    this._capacitationCenterInformations = new EntityCollection<CapacitationCenterInformation>(this, "CapacitationCenterInformations", this.FilterCapacitationCenterInformations, this.AttachCapacitationCenterInformations, this.DetachCapacitationCenterInformations);
                }
                return this._capacitationCenterInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenter"/> entity instances.
        /// </summary>
        [Association("PopulationAttended_CapacitationCenter", "IdPopulationAttended", "IdPopulationAttended")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenter> CapacitationCenters
        {
            get
            {
                if ((this._capacitationCenters == null))
                {
                    this._capacitationCenters = new EntityCollection<CapacitationCenter>(this, "CapacitationCenters", this.FilterCapacitationCenters, this.AttachCapacitationCenters, this.DetachCapacitationCenters);
                }
                return this._capacitationCenters;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPopulationAttended' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdPopulationAttended
        {
            get
            {
                return this._idPopulationAttended;
            }
            set
            {
                if ((this._idPopulationAttended != value))
                {
                    this.OnIdPopulationAttendedChanging(value);
                    this.ValidateProperty("IdPopulationAttended", value);
                    this._idPopulationAttended = value;
                    this.RaisePropertyChanged("IdPopulationAttended");
                    this.OnIdPopulationAttendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SocialOrganizationInformation"/> entity instances.
        /// </summary>
        [Association("PopulationAttended_SocialOrganizationInformation", "IdPopulationAttended", "IdPopulationAttended")]
        [XmlIgnore()]
        public EntityCollection<SocialOrganizationInformation> SocialOrganizationInformations
        {
            get
            {
                if ((this._socialOrganizationInformations == null))
                {
                    this._socialOrganizationInformations = new EntityCollection<SocialOrganizationInformation>(this, "SocialOrganizationInformations", this.FilterSocialOrganizationInformations, this.AttachSocialOrganizationInformations, this.DetachSocialOrganizationInformations);
                }
                return this._socialOrganizationInformations;
            }
        }
        
        private void AttachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.PopulationAttended = this;
        }
        
        private void DetachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.PopulationAttended = null;
        }
        
        private bool FilterCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            return (entity.IdPopulationAttended == this.IdPopulationAttended);
        }
        
        private void AttachCapacitationCenters(CapacitationCenter entity)
        {
            entity.PopulationAttended = this;
        }
        
        private void DetachCapacitationCenters(CapacitationCenter entity)
        {
            entity.PopulationAttended = null;
        }
        
        private bool FilterCapacitationCenters(CapacitationCenter entity)
        {
            return (entity.IdPopulationAttended == this.IdPopulationAttended);
        }
        
        private void AttachSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            entity.PopulationAttended = this;
        }
        
        private void DetachSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            entity.PopulationAttended = null;
        }
        
        private bool FilterSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            return (entity.IdPopulationAttended == this.IdPopulationAttended);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idPopulationAttended;
        }
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Product : Entity
    {
        
        private int _idProduct;
        
        private int _idTypeProduct;
        
        private string _name;
        
        private bool _openSource;
        
        private EntityCollection<OpenSourceStateProvider> _openSourceStateProviders;
        
        private EntityCollection<OpenSourceState> _openSourceStates;
        
        private EntityRef<TypeProduct> _typeProduct;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdProductChanging(int value);
        partial void OnIdProductChanged();
        partial void OnIdTypeProductChanging(int value);
        partial void OnIdTypeProductChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOpenSourceChanging(bool value);
        partial void OnOpenSourceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdProduct' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdProduct
        {
            get
            {
                return this._idProduct;
            }
            set
            {
                if ((this._idProduct != value))
                {
                    this.OnIdProductChanging(value);
                    this.ValidateProperty("IdProduct", value);
                    this._idProduct = value;
                    this.RaisePropertyChanged("IdProduct");
                    this.OnIdProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdTypeProduct' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdTypeProduct
        {
            get
            {
                return this._idTypeProduct;
            }
            set
            {
                if ((this._idTypeProduct != value))
                {
                    this.OnIdTypeProductChanging(value);
                    this.RaiseDataMemberChanging("IdTypeProduct");
                    this.ValidateProperty("IdTypeProduct", value);
                    this._idTypeProduct = value;
                    this.RaiseDataMemberChanged("IdTypeProduct");
                    this.OnIdTypeProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenSource' value.
        /// </summary>
        [DataMember()]
        public bool OpenSource
        {
            get
            {
                return this._openSource;
            }
            set
            {
                if ((this._openSource != value))
                {
                    this.OnOpenSourceChanging(value);
                    this.RaiseDataMemberChanging("OpenSource");
                    this.ValidateProperty("OpenSource", value);
                    this._openSource = value;
                    this.RaiseDataMemberChanged("OpenSource");
                    this.OnOpenSourceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceStateProvider"/> entity instances.
        /// </summary>
        [Association("Product_OpenSourceStateProvider", "IdProduct", "IdProduct")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceStateProvider> OpenSourceStateProviders
        {
            get
            {
                if ((this._openSourceStateProviders == null))
                {
                    this._openSourceStateProviders = new EntityCollection<OpenSourceStateProvider>(this, "OpenSourceStateProviders", this.FilterOpenSourceStateProviders, this.AttachOpenSourceStateProviders, this.DetachOpenSourceStateProviders);
                }
                return this._openSourceStateProviders;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceState"/> entity instances.
        /// </summary>
        [Association("Product_OpenSourceState", "IdProduct", "IdProduct")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceState> OpenSourceStates
        {
            get
            {
                if ((this._openSourceStates == null))
                {
                    this._openSourceStates = new EntityCollection<OpenSourceState>(this, "OpenSourceStates", this.FilterOpenSourceStates, this.AttachOpenSourceStates, this.DetachOpenSourceStates);
                }
                return this._openSourceStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TypeProduct"/> entity.
        /// </summary>
        [Association("TypeProduct_Product", "IdTypeProduct", "IdTypeProduct", IsForeignKey=true)]
        [XmlIgnore()]
        public TypeProduct TypeProduct
        {
            get
            {
                if ((this._typeProduct == null))
                {
                    this._typeProduct = new EntityRef<TypeProduct>(this, "TypeProduct", this.FilterTypeProduct);
                }
                return this._typeProduct.Entity;
            }
            set
            {
                TypeProduct previous = this.TypeProduct;
                if ((previous != value))
                {
                    this.ValidateProperty("TypeProduct", value);
                    if ((previous != null))
                    {
                        this._typeProduct.Entity = null;
                        previous.Products.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdTypeProduct = value.IdTypeProduct;
                    }
                    else
                    {
                        this.IdTypeProduct = default(int);
                    }
                    this._typeProduct.Entity = value;
                    if ((value != null))
                    {
                        value.Products.Add(this);
                    }
                    this.RaisePropertyChanged("TypeProduct");
                }
            }
        }
        
        private void AttachOpenSourceStateProviders(OpenSourceStateProvider entity)
        {
            entity.Product = this;
        }
        
        private void DetachOpenSourceStateProviders(OpenSourceStateProvider entity)
        {
            entity.Product = null;
        }
        
        private bool FilterOpenSourceStateProviders(OpenSourceStateProvider entity)
        {
            return (entity.IdProduct == this.IdProduct);
        }
        
        private void AttachOpenSourceStates(OpenSourceState entity)
        {
            entity.Product = this;
        }
        
        private void DetachOpenSourceStates(OpenSourceState entity)
        {
            entity.Product = null;
        }
        
        private bool FilterOpenSourceStates(OpenSourceState entity)
        {
            return (entity.IdProduct == this.IdProduct);
        }
        
        private bool FilterTypeProduct(TypeProduct entity)
        {
            return (entity.IdTypeProduct == this.IdTypeProduct);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idProduct;
        }
    }
    
    /// <summary>
    /// The 'Program' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Program : Entity
    {
        
        private int _idProgram;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates;
        
        private string _name;
        
        private EntityCollection<StateProgram> _statePrograms;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdProgramChanging(int value);
        partial void OnIdProgramChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Program"/> class.
        /// </summary>
        public Program()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdProgram' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdProgram
        {
            get
            {
                return this._idProgram;
            }
            set
            {
                if ((this._idProgram != value))
                {
                    this.OnIdProgramChanging(value);
                    this.ValidateProperty("IdProgram", value);
                    this._idProgram = value;
                    this.RaisePropertyChanged("IdProgram");
                    this.OnIdProgramChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("Program_MicrosoftProgramState", "IdProgram", "IdProgram")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                if ((this._microsoftProgramStates == null))
                {
                    this._microsoftProgramStates = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates", this.FilterMicrosoftProgramStates, this.AttachMicrosoftProgramStates, this.DetachMicrosoftProgramStates);
                }
                return this._microsoftProgramStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("Program_StateProgram", "IdProgram", "IdProgram")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms
        {
            get
            {
                if ((this._statePrograms == null))
                {
                    this._statePrograms = new EntityCollection<StateProgram>(this, "StatePrograms", this.FilterStatePrograms, this.AttachStatePrograms, this.DetachStatePrograms);
                }
                return this._statePrograms;
            }
        }
        
        private void AttachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Program = this;
        }
        
        private void DetachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Program = null;
        }
        
        private bool FilterMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            return (entity.IdProgram == this.IdProgram);
        }
        
        private void AttachStatePrograms(StateProgram entity)
        {
            entity.Program = this;
        }
        
        private void DetachStatePrograms(StateProgram entity)
        {
            entity.Program = null;
        }
        
        private bool FilterStatePrograms(StateProgram entity)
        {
            return (entity.IdProgram == this.IdProgram);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idProgram;
        }
    }
    
    /// <summary>
    /// The 'SchoolGrade' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SchoolGrade : Entity
    {
        
        private EntityCollection<EnlaceTest> _enlaceTests;
        
        private int _idSchoolGrade;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdSchoolGradeChanging(int value);
        partial void OnIdSchoolGradeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolGrade"/> class.
        /// </summary>
        public SchoolGrade()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="EnlaceTest"/> entity instances.
        /// </summary>
        [Association("SchoolGrade_EnlaceTest", "IdSchoolGrade", "IdSchoolGrade")]
        [XmlIgnore()]
        public EntityCollection<EnlaceTest> EnlaceTests
        {
            get
            {
                if ((this._enlaceTests == null))
                {
                    this._enlaceTests = new EntityCollection<EnlaceTest>(this, "EnlaceTests", this.FilterEnlaceTests, this.AttachEnlaceTests, this.DetachEnlaceTests);
                }
                return this._enlaceTests;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolGrade' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSchoolGrade
        {
            get
            {
                return this._idSchoolGrade;
            }
            set
            {
                if ((this._idSchoolGrade != value))
                {
                    this.OnIdSchoolGradeChanging(value);
                    this.ValidateProperty("IdSchoolGrade", value);
                    this._idSchoolGrade = value;
                    this.RaisePropertyChanged("IdSchoolGrade");
                    this.OnIdSchoolGradeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachEnlaceTests(EnlaceTest entity)
        {
            entity.SchoolGrade = this;
        }
        
        private void DetachEnlaceTests(EnlaceTest entity)
        {
            entity.SchoolGrade = null;
        }
        
        private bool FilterEnlaceTests(EnlaceTest entity)
        {
            return (entity.IdSchoolGrade == this.IdSchoolGrade);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSchoolGrade;
        }
    }
    
    /// <summary>
    /// The 'SchoolLevel' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SchoolLevel : Entity
    {
        
        private int _idSchoolLevel;
        
        private string _name;
        
        private EntityCollection<SchoolsInformation> _schoolsInformations;
        
        private EntityCollection<StudentsInformation> _studentsInformations;
        
        private EntityCollection<TeachersInformation> _teachersInformations;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdSchoolLevelChanging(int value);
        partial void OnIdSchoolLevelChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolLevel"/> class.
        /// </summary>
        public SchoolLevel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolLevel' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSchoolLevel
        {
            get
            {
                return this._idSchoolLevel;
            }
            set
            {
                if ((this._idSchoolLevel != value))
                {
                    this.OnIdSchoolLevelChanging(value);
                    this.ValidateProperty("IdSchoolLevel", value);
                    this._idSchoolLevel = value;
                    this.RaisePropertyChanged("IdSchoolLevel");
                    this.OnIdSchoolLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SchoolsInformation"/> entity instances.
        /// </summary>
        [Association("SchoolLevel_SchoolsInformation", "IdSchoolLevel", "IdSchoolLevel")]
        [XmlIgnore()]
        public EntityCollection<SchoolsInformation> SchoolsInformations
        {
            get
            {
                if ((this._schoolsInformations == null))
                {
                    this._schoolsInformations = new EntityCollection<SchoolsInformation>(this, "SchoolsInformations", this.FilterSchoolsInformations, this.AttachSchoolsInformations, this.DetachSchoolsInformations);
                }
                return this._schoolsInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StudentsInformation"/> entity instances.
        /// </summary>
        [Association("SchoolLevel_StudentsInformation", "IdSchoolLevel", "IdSchoolLevel")]
        [XmlIgnore()]
        public EntityCollection<StudentsInformation> StudentsInformations
        {
            get
            {
                if ((this._studentsInformations == null))
                {
                    this._studentsInformations = new EntityCollection<StudentsInformation>(this, "StudentsInformations", this.FilterStudentsInformations, this.AttachStudentsInformations, this.DetachStudentsInformations);
                }
                return this._studentsInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TeachersInformation"/> entity instances.
        /// </summary>
        [Association("SchoolLevel_TeachersInformation", "IdSchoolLevel", "IdSchoolLevel")]
        [XmlIgnore()]
        public EntityCollection<TeachersInformation> TeachersInformations
        {
            get
            {
                if ((this._teachersInformations == null))
                {
                    this._teachersInformations = new EntityCollection<TeachersInformation>(this, "TeachersInformations", this.FilterTeachersInformations, this.AttachTeachersInformations, this.DetachTeachersInformations);
                }
                return this._teachersInformations;
            }
        }
        
        private void AttachSchoolsInformations(SchoolsInformation entity)
        {
            entity.SchoolLevel = this;
        }
        
        private void DetachSchoolsInformations(SchoolsInformation entity)
        {
            entity.SchoolLevel = null;
        }
        
        private bool FilterSchoolsInformations(SchoolsInformation entity)
        {
            return (entity.IdSchoolLevel == this.IdSchoolLevel);
        }
        
        private void AttachStudentsInformations(StudentsInformation entity)
        {
            entity.SchoolLevel = this;
        }
        
        private void DetachStudentsInformations(StudentsInformation entity)
        {
            entity.SchoolLevel = null;
        }
        
        private bool FilterStudentsInformations(StudentsInformation entity)
        {
            return (entity.IdSchoolLevel == this.IdSchoolLevel);
        }
        
        private void AttachTeachersInformations(TeachersInformation entity)
        {
            entity.SchoolLevel = this;
        }
        
        private void DetachTeachersInformations(TeachersInformation entity)
        {
            entity.SchoolLevel = null;
        }
        
        private bool FilterTeachersInformations(TeachersInformation entity)
        {
            return (entity.IdSchoolLevel == this.IdSchoolLevel);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSchoolLevel;
        }
    }
    
    /// <summary>
    /// The 'SchoolsInformation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SchoolsInformation : Entity
    {
        
        private EntityRef<EducationInformationState> _educationInformationState;
        
        private int _idEducationInformationState;
        
        private int _idSchoolInformation;
        
        private int _idSchoolLevel;
        
        private int _idSchoolType;
        
        private int _number;
        
        private EntityRef<SchoolLevel> _schoolLevel;
        
        private EntityRef<SchoolType> _schoolType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdEducationInformationStateChanging(int value);
        partial void OnIdEducationInformationStateChanged();
        partial void OnIdSchoolInformationChanging(int value);
        partial void OnIdSchoolInformationChanged();
        partial void OnIdSchoolLevelChanging(int value);
        partial void OnIdSchoolLevelChanged();
        partial void OnIdSchoolTypeChanging(int value);
        partial void OnIdSchoolTypeChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolsInformation"/> class.
        /// </summary>
        public SchoolsInformation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EducationInformationState"/> entity.
        /// </summary>
        [Association("EducationInformationState_SchoolsInformation", "IdEducationInformationState", "IdEducationInformationState", IsForeignKey=true)]
        [XmlIgnore()]
        public EducationInformationState EducationInformationState
        {
            get
            {
                if ((this._educationInformationState == null))
                {
                    this._educationInformationState = new EntityRef<EducationInformationState>(this, "EducationInformationState", this.FilterEducationInformationState);
                }
                return this._educationInformationState.Entity;
            }
            set
            {
                EducationInformationState previous = this.EducationInformationState;
                if ((previous != value))
                {
                    this.ValidateProperty("EducationInformationState", value);
                    if ((previous != null))
                    {
                        this._educationInformationState.Entity = null;
                        previous.SchoolsInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdEducationInformationState = value.IdEducationInformationState;
                    }
                    else
                    {
                        this.IdEducationInformationState = default(int);
                    }
                    this._educationInformationState.Entity = value;
                    if ((value != null))
                    {
                        value.SchoolsInformations.Add(this);
                    }
                    this.RaisePropertyChanged("EducationInformationState");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEducationInformationState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdEducationInformationState
        {
            get
            {
                return this._idEducationInformationState;
            }
            set
            {
                if ((this._idEducationInformationState != value))
                {
                    this.OnIdEducationInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdEducationInformationState");
                    this.ValidateProperty("IdEducationInformationState", value);
                    this._idEducationInformationState = value;
                    this.RaiseDataMemberChanged("IdEducationInformationState");
                    this.OnIdEducationInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolInformation' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSchoolInformation
        {
            get
            {
                return this._idSchoolInformation;
            }
            set
            {
                if ((this._idSchoolInformation != value))
                {
                    this.OnIdSchoolInformationChanging(value);
                    this.ValidateProperty("IdSchoolInformation", value);
                    this._idSchoolInformation = value;
                    this.RaisePropertyChanged("IdSchoolInformation");
                    this.OnIdSchoolInformationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolLevel' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSchoolLevel
        {
            get
            {
                return this._idSchoolLevel;
            }
            set
            {
                if ((this._idSchoolLevel != value))
                {
                    this.OnIdSchoolLevelChanging(value);
                    this.RaiseDataMemberChanging("IdSchoolLevel");
                    this.ValidateProperty("IdSchoolLevel", value);
                    this._idSchoolLevel = value;
                    this.RaiseDataMemberChanged("IdSchoolLevel");
                    this.OnIdSchoolLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSchoolType
        {
            get
            {
                return this._idSchoolType;
            }
            set
            {
                if ((this._idSchoolType != value))
                {
                    this.OnIdSchoolTypeChanging(value);
                    this.RaiseDataMemberChanging("IdSchoolType");
                    this.ValidateProperty("IdSchoolType", value);
                    this._idSchoolType = value;
                    this.RaiseDataMemberChanged("IdSchoolType");
                    this.OnIdSchoolTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SchoolLevel"/> entity.
        /// </summary>
        [Association("SchoolLevel_SchoolsInformation", "IdSchoolLevel", "IdSchoolLevel", IsForeignKey=true)]
        [XmlIgnore()]
        public SchoolLevel SchoolLevel
        {
            get
            {
                if ((this._schoolLevel == null))
                {
                    this._schoolLevel = new EntityRef<SchoolLevel>(this, "SchoolLevel", this.FilterSchoolLevel);
                }
                return this._schoolLevel.Entity;
            }
            set
            {
                SchoolLevel previous = this.SchoolLevel;
                if ((previous != value))
                {
                    this.ValidateProperty("SchoolLevel", value);
                    if ((previous != null))
                    {
                        this._schoolLevel.Entity = null;
                        previous.SchoolsInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSchoolLevel = value.IdSchoolLevel;
                    }
                    else
                    {
                        this.IdSchoolLevel = default(int);
                    }
                    this._schoolLevel.Entity = value;
                    if ((value != null))
                    {
                        value.SchoolsInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SchoolLevel");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SchoolType"/> entity.
        /// </summary>
        [Association("SchoolType_SchoolsInformation", "IdSchoolType", "IdSchoolType", IsForeignKey=true)]
        [XmlIgnore()]
        public SchoolType SchoolType
        {
            get
            {
                if ((this._schoolType == null))
                {
                    this._schoolType = new EntityRef<SchoolType>(this, "SchoolType", this.FilterSchoolType);
                }
                return this._schoolType.Entity;
            }
            set
            {
                SchoolType previous = this.SchoolType;
                if ((previous != value))
                {
                    this.ValidateProperty("SchoolType", value);
                    if ((previous != null))
                    {
                        this._schoolType.Entity = null;
                        previous.SchoolsInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSchoolType = value.IdSchoolType;
                    }
                    else
                    {
                        this.IdSchoolType = default(int);
                    }
                    this._schoolType.Entity = value;
                    if ((value != null))
                    {
                        value.SchoolsInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SchoolType");
                }
            }
        }
        
        private bool FilterEducationInformationState(EducationInformationState entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private bool FilterSchoolLevel(SchoolLevel entity)
        {
            return (entity.IdSchoolLevel == this.IdSchoolLevel);
        }
        
        private bool FilterSchoolType(SchoolType entity)
        {
            return (entity.IdSchoolType == this.IdSchoolType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSchoolInformation;
        }
    }
    
    /// <summary>
    /// The 'SchoolType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SchoolType : Entity
    {
        
        private int _idSchoolType;
        
        private string _name;
        
        private EntityCollection<SchoolsInformation> _schoolsInformations;
        
        private EntityCollection<StudentsInformation> _studentsInformations;
        
        private EntityCollection<TeachersInformation> _teachersInformations;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdSchoolTypeChanging(int value);
        partial void OnIdSchoolTypeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolType"/> class.
        /// </summary>
        public SchoolType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolType' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSchoolType
        {
            get
            {
                return this._idSchoolType;
            }
            set
            {
                if ((this._idSchoolType != value))
                {
                    this.OnIdSchoolTypeChanging(value);
                    this.ValidateProperty("IdSchoolType", value);
                    this._idSchoolType = value;
                    this.RaisePropertyChanged("IdSchoolType");
                    this.OnIdSchoolTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SchoolsInformation"/> entity instances.
        /// </summary>
        [Association("SchoolType_SchoolsInformation", "IdSchoolType", "IdSchoolType")]
        [XmlIgnore()]
        public EntityCollection<SchoolsInformation> SchoolsInformations
        {
            get
            {
                if ((this._schoolsInformations == null))
                {
                    this._schoolsInformations = new EntityCollection<SchoolsInformation>(this, "SchoolsInformations", this.FilterSchoolsInformations, this.AttachSchoolsInformations, this.DetachSchoolsInformations);
                }
                return this._schoolsInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StudentsInformation"/> entity instances.
        /// </summary>
        [Association("SchoolType_StudentsInformation", "IdSchoolType", "IdSchoolType")]
        [XmlIgnore()]
        public EntityCollection<StudentsInformation> StudentsInformations
        {
            get
            {
                if ((this._studentsInformations == null))
                {
                    this._studentsInformations = new EntityCollection<StudentsInformation>(this, "StudentsInformations", this.FilterStudentsInformations, this.AttachStudentsInformations, this.DetachStudentsInformations);
                }
                return this._studentsInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TeachersInformation"/> entity instances.
        /// </summary>
        [Association("SchoolType_TeachersInformation", "IdSchoolType", "IdSchoolType")]
        [XmlIgnore()]
        public EntityCollection<TeachersInformation> TeachersInformations
        {
            get
            {
                if ((this._teachersInformations == null))
                {
                    this._teachersInformations = new EntityCollection<TeachersInformation>(this, "TeachersInformations", this.FilterTeachersInformations, this.AttachTeachersInformations, this.DetachTeachersInformations);
                }
                return this._teachersInformations;
            }
        }
        
        private void AttachSchoolsInformations(SchoolsInformation entity)
        {
            entity.SchoolType = this;
        }
        
        private void DetachSchoolsInformations(SchoolsInformation entity)
        {
            entity.SchoolType = null;
        }
        
        private bool FilterSchoolsInformations(SchoolsInformation entity)
        {
            return (entity.IdSchoolType == this.IdSchoolType);
        }
        
        private void AttachStudentsInformations(StudentsInformation entity)
        {
            entity.SchoolType = this;
        }
        
        private void DetachStudentsInformations(StudentsInformation entity)
        {
            entity.SchoolType = null;
        }
        
        private bool FilterStudentsInformations(StudentsInformation entity)
        {
            return (entity.IdSchoolType == this.IdSchoolType);
        }
        
        private void AttachTeachersInformations(TeachersInformation entity)
        {
            entity.SchoolType = this;
        }
        
        private void DetachTeachersInformations(TeachersInformation entity)
        {
            entity.SchoolType = null;
        }
        
        private bool FilterTeachersInformations(TeachersInformation entity)
        {
            return (entity.IdSchoolType == this.IdSchoolType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSchoolType;
        }
    }
    
    /// <summary>
    /// The 'SEPProjectState' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SEPProjectState : Entity
    {
        
        private EntityRef<EducationInformationState> _educationInformationState;
        
        private int _idEducationInformationState;
        
        private int _idSepProjectState;
        
        private int _idTypeSepProject;
        
        private long _percentage;
        
        private EntityRef<TypeSepProject> _typeSepProject;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdEducationInformationStateChanging(int value);
        partial void OnIdEducationInformationStateChanged();
        partial void OnIdSepProjectStateChanging(int value);
        partial void OnIdSepProjectStateChanged();
        partial void OnIdTypeSepProjectChanging(int value);
        partial void OnIdTypeSepProjectChanged();
        partial void OnPercentageChanging(long value);
        partial void OnPercentageChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SEPProjectState"/> class.
        /// </summary>
        public SEPProjectState()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EducationInformationState"/> entity.
        /// </summary>
        [Association("EducationInformationState_SEPProjectState", "IdEducationInformationState", "IdEducationInformationState", IsForeignKey=true)]
        [XmlIgnore()]
        public EducationInformationState EducationInformationState
        {
            get
            {
                if ((this._educationInformationState == null))
                {
                    this._educationInformationState = new EntityRef<EducationInformationState>(this, "EducationInformationState", this.FilterEducationInformationState);
                }
                return this._educationInformationState.Entity;
            }
            set
            {
                EducationInformationState previous = this.EducationInformationState;
                if ((previous != value))
                {
                    this.ValidateProperty("EducationInformationState", value);
                    if ((previous != null))
                    {
                        this._educationInformationState.Entity = null;
                        previous.SEPProjectStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdEducationInformationState = value.IdEducationInformationState;
                    }
                    else
                    {
                        this.IdEducationInformationState = default(int);
                    }
                    this._educationInformationState.Entity = value;
                    if ((value != null))
                    {
                        value.SEPProjectStates.Add(this);
                    }
                    this.RaisePropertyChanged("EducationInformationState");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEducationInformationState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdEducationInformationState
        {
            get
            {
                return this._idEducationInformationState;
            }
            set
            {
                if ((this._idEducationInformationState != value))
                {
                    this.OnIdEducationInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdEducationInformationState");
                    this.ValidateProperty("IdEducationInformationState", value);
                    this._idEducationInformationState = value;
                    this.RaiseDataMemberChanged("IdEducationInformationState");
                    this.OnIdEducationInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSepProjectState' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSepProjectState
        {
            get
            {
                return this._idSepProjectState;
            }
            set
            {
                if ((this._idSepProjectState != value))
                {
                    this.OnIdSepProjectStateChanging(value);
                    this.ValidateProperty("IdSepProjectState", value);
                    this._idSepProjectState = value;
                    this.RaisePropertyChanged("IdSepProjectState");
                    this.OnIdSepProjectStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdTypeSepProject' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdTypeSepProject
        {
            get
            {
                return this._idTypeSepProject;
            }
            set
            {
                if ((this._idTypeSepProject != value))
                {
                    this.OnIdTypeSepProjectChanging(value);
                    this.RaiseDataMemberChanging("IdTypeSepProject");
                    this.ValidateProperty("IdTypeSepProject", value);
                    this._idTypeSepProject = value;
                    this.RaiseDataMemberChanged("IdTypeSepProject");
                    this.OnIdTypeSepProjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Percentage' value.
        /// </summary>
        [DataMember()]
        public long Percentage
        {
            get
            {
                return this._percentage;
            }
            set
            {
                if ((this._percentage != value))
                {
                    this.OnPercentageChanging(value);
                    this.RaiseDataMemberChanging("Percentage");
                    this.ValidateProperty("Percentage", value);
                    this._percentage = value;
                    this.RaiseDataMemberChanged("Percentage");
                    this.OnPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TypeSepProject"/> entity.
        /// </summary>
        [Association("TypeSepProject_SEPProjectState", "IdTypeSepProject", "IdTypeSepProject", IsForeignKey=true)]
        [XmlIgnore()]
        public TypeSepProject TypeSepProject
        {
            get
            {
                if ((this._typeSepProject == null))
                {
                    this._typeSepProject = new EntityRef<TypeSepProject>(this, "TypeSepProject", this.FilterTypeSepProject);
                }
                return this._typeSepProject.Entity;
            }
            set
            {
                TypeSepProject previous = this.TypeSepProject;
                if ((previous != value))
                {
                    this.ValidateProperty("TypeSepProject", value);
                    if ((previous != null))
                    {
                        this._typeSepProject.Entity = null;
                        previous.SEPProjectStates.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdTypeSepProject = value.IdTypeSepProject;
                    }
                    else
                    {
                        this.IdTypeSepProject = default(int);
                    }
                    this._typeSepProject.Entity = value;
                    if ((value != null))
                    {
                        value.SEPProjectStates.Add(this);
                    }
                    this.RaisePropertyChanged("TypeSepProject");
                }
            }
        }
        
        private bool FilterEducationInformationState(EducationInformationState entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private bool FilterTypeSepProject(TypeSepProject entity)
        {
            return (entity.IdTypeSepProject == this.IdTypeSepProject);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSepProjectState;
        }
    }
    
    /// <summary>
    /// The 'SocialCause' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SocialCause : Entity
    {
        
        private EntityCollection<CapacitationCenterInformation> _capacitationCenterInformations;
        
        private EntityCollection<CapacitationCenter> _capacitationCenters;
        
        private int _idSocialCause;
        
        private string _name;
        
        private EntityCollection<SocialOrganizationInformation> _socialOrganizationInformations;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdSocialCauseChanging(int value);
        partial void OnIdSocialCauseChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialCause"/> class.
        /// </summary>
        public SocialCause()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenterInformation"/> entity instances.
        /// </summary>
        [Association("SocialCause_CapacitationCenterInformation", "IdSocialCause", "IdSocialCause")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenterInformation> CapacitationCenterInformations
        {
            get
            {
                if ((this._capacitationCenterInformations == null))
                {
                    this._capacitationCenterInformations = new EntityCollection<CapacitationCenterInformation>(this, "CapacitationCenterInformations", this.FilterCapacitationCenterInformations, this.AttachCapacitationCenterInformations, this.DetachCapacitationCenterInformations);
                }
                return this._capacitationCenterInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenter"/> entity instances.
        /// </summary>
        [Association("SocialCause_CapacitationCenter", "IdSocialCause", "IdSocialCause")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenter> CapacitationCenters
        {
            get
            {
                if ((this._capacitationCenters == null))
                {
                    this._capacitationCenters = new EntityCollection<CapacitationCenter>(this, "CapacitationCenters", this.FilterCapacitationCenters, this.AttachCapacitationCenters, this.DetachCapacitationCenters);
                }
                return this._capacitationCenters;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialCause' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSocialCause
        {
            get
            {
                return this._idSocialCause;
            }
            set
            {
                if ((this._idSocialCause != value))
                {
                    this.OnIdSocialCauseChanging(value);
                    this.ValidateProperty("IdSocialCause", value);
                    this._idSocialCause = value;
                    this.RaisePropertyChanged("IdSocialCause");
                    this.OnIdSocialCauseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SocialOrganizationInformation"/> entity instances.
        /// </summary>
        [Association("SocialCause_SocialOrganizationInformation", "IdSocialCause", "IdSocialCause")]
        [XmlIgnore()]
        public EntityCollection<SocialOrganizationInformation> SocialOrganizationInformations
        {
            get
            {
                if ((this._socialOrganizationInformations == null))
                {
                    this._socialOrganizationInformations = new EntityCollection<SocialOrganizationInformation>(this, "SocialOrganizationInformations", this.FilterSocialOrganizationInformations, this.AttachSocialOrganizationInformations, this.DetachSocialOrganizationInformations);
                }
                return this._socialOrganizationInformations;
            }
        }
        
        private void AttachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.SocialCause = this;
        }
        
        private void DetachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.SocialCause = null;
        }
        
        private bool FilterCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            return (entity.IdSocialCause == this.IdSocialCause);
        }
        
        private void AttachCapacitationCenters(CapacitationCenter entity)
        {
            entity.SocialCause = this;
        }
        
        private void DetachCapacitationCenters(CapacitationCenter entity)
        {
            entity.SocialCause = null;
        }
        
        private bool FilterCapacitationCenters(CapacitationCenter entity)
        {
            return (entity.IdSocialCause == this.IdSocialCause);
        }
        
        private void AttachSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            entity.SocialCause = this;
        }
        
        private void DetachSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            entity.SocialCause = null;
        }
        
        private bool FilterSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            return (entity.IdSocialCause == this.IdSocialCause);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSocialCause;
        }
    }
    
    /// <summary>
    /// The 'SocialOrganization' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SocialOrganization : Entity
    {
        
        private EntityCollection<CapacitationCenterInformation> _capacitationCenterInformations;
        
        private EntityCollection<CapacitationCenter> _capacitationCenters;
        
        private int _idSocialOrganization;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdSocialOrganizationChanging(int value);
        partial void OnIdSocialOrganizationChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialOrganization"/> class.
        /// </summary>
        public SocialOrganization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenterInformation"/> entity instances.
        /// </summary>
        [Association("SocialOrganization_CapacitationCenterInformation", "IdSocialOrganization", "IdSocialOrganization")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenterInformation> CapacitationCenterInformations
        {
            get
            {
                if ((this._capacitationCenterInformations == null))
                {
                    this._capacitationCenterInformations = new EntityCollection<CapacitationCenterInformation>(this, "CapacitationCenterInformations", this.FilterCapacitationCenterInformations, this.AttachCapacitationCenterInformations, this.DetachCapacitationCenterInformations);
                }
                return this._capacitationCenterInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenter"/> entity instances.
        /// </summary>
        [Association("SocialOrganization_CapacitationCenter", "IdSocialOrganization", "IdSocialOrganization")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenter> CapacitationCenters
        {
            get
            {
                if ((this._capacitationCenters == null))
                {
                    this._capacitationCenters = new EntityCollection<CapacitationCenter>(this, "CapacitationCenters", this.FilterCapacitationCenters, this.AttachCapacitationCenters, this.DetachCapacitationCenters);
                }
                return this._capacitationCenters;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialOrganization' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSocialOrganization
        {
            get
            {
                return this._idSocialOrganization;
            }
            set
            {
                if ((this._idSocialOrganization != value))
                {
                    this.OnIdSocialOrganizationChanging(value);
                    this.ValidateProperty("IdSocialOrganization", value);
                    this._idSocialOrganization = value;
                    this.RaisePropertyChanged("IdSocialOrganization");
                    this.OnIdSocialOrganizationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.SocialOrganization = this;
        }
        
        private void DetachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.SocialOrganization = null;
        }
        
        private bool FilterCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            return (entity.IdSocialOrganization == this.IdSocialOrganization);
        }
        
        private void AttachCapacitationCenters(CapacitationCenter entity)
        {
            entity.SocialOrganization = this;
        }
        
        private void DetachCapacitationCenters(CapacitationCenter entity)
        {
            entity.SocialOrganization = null;
        }
        
        private bool FilterCapacitationCenters(CapacitationCenter entity)
        {
            return (entity.IdSocialOrganization == this.IdSocialOrganization);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSocialOrganization;
        }
    }
    
    /// <summary>
    /// The 'SocialOrganizationInformation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class SocialOrganizationInformation : Entity
    {
        
        private int _idPopulationAttended;
        
        private int _idSocialCause;
        
        private int _idSocialOrganizationInformation;
        
        private int _idState;
        
        private string _name;
        
        private EntityRef<PopulationAttended> _populationAttended;
        
        private EntityRef<SocialCause> _socialCause;
        
        private EntityRef<State> _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdPopulationAttendedChanging(int value);
        partial void OnIdPopulationAttendedChanged();
        partial void OnIdSocialCauseChanging(int value);
        partial void OnIdSocialCauseChanged();
        partial void OnIdSocialOrganizationInformationChanging(int value);
        partial void OnIdSocialOrganizationInformationChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialOrganizationInformation"/> class.
        /// </summary>
        public SocialOrganizationInformation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdPopulationAttended' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPopulationAttended
        {
            get
            {
                return this._idPopulationAttended;
            }
            set
            {
                if ((this._idPopulationAttended != value))
                {
                    this.OnIdPopulationAttendedChanging(value);
                    this.RaiseDataMemberChanging("IdPopulationAttended");
                    this.ValidateProperty("IdPopulationAttended", value);
                    this._idPopulationAttended = value;
                    this.RaiseDataMemberChanged("IdPopulationAttended");
                    this.OnIdPopulationAttendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialCause' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSocialCause
        {
            get
            {
                return this._idSocialCause;
            }
            set
            {
                if ((this._idSocialCause != value))
                {
                    this.OnIdSocialCauseChanging(value);
                    this.RaiseDataMemberChanging("IdSocialCause");
                    this.ValidateProperty("IdSocialCause", value);
                    this._idSocialCause = value;
                    this.RaiseDataMemberChanged("IdSocialCause");
                    this.OnIdSocialCauseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSocialOrganizationInformation' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSocialOrganizationInformation
        {
            get
            {
                return this._idSocialOrganizationInformation;
            }
            set
            {
                if ((this._idSocialOrganizationInformation != value))
                {
                    this.OnIdSocialOrganizationInformationChanging(value);
                    this.ValidateProperty("IdSocialOrganizationInformation", value);
                    this._idSocialOrganizationInformation = value;
                    this.RaisePropertyChanged("IdSocialOrganizationInformation");
                    this.OnIdSocialOrganizationInformationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PopulationAttended"/> entity.
        /// </summary>
        [Association("PopulationAttended_SocialOrganizationInformation", "IdPopulationAttended", "IdPopulationAttended", IsForeignKey=true)]
        [XmlIgnore()]
        public PopulationAttended PopulationAttended
        {
            get
            {
                if ((this._populationAttended == null))
                {
                    this._populationAttended = new EntityRef<PopulationAttended>(this, "PopulationAttended", this.FilterPopulationAttended);
                }
                return this._populationAttended.Entity;
            }
            set
            {
                PopulationAttended previous = this.PopulationAttended;
                if ((previous != value))
                {
                    this.ValidateProperty("PopulationAttended", value);
                    if ((previous != null))
                    {
                        this._populationAttended.Entity = null;
                        previous.SocialOrganizationInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPopulationAttended = value.IdPopulationAttended;
                    }
                    else
                    {
                        this.IdPopulationAttended = default(int);
                    }
                    this._populationAttended.Entity = value;
                    if ((value != null))
                    {
                        value.SocialOrganizationInformations.Add(this);
                    }
                    this.RaisePropertyChanged("PopulationAttended");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SocialCause"/> entity.
        /// </summary>
        [Association("SocialCause_SocialOrganizationInformation", "IdSocialCause", "IdSocialCause", IsForeignKey=true)]
        [XmlIgnore()]
        public SocialCause SocialCause
        {
            get
            {
                if ((this._socialCause == null))
                {
                    this._socialCause = new EntityRef<SocialCause>(this, "SocialCause", this.FilterSocialCause);
                }
                return this._socialCause.Entity;
            }
            set
            {
                SocialCause previous = this.SocialCause;
                if ((previous != value))
                {
                    this.ValidateProperty("SocialCause", value);
                    if ((previous != null))
                    {
                        this._socialCause.Entity = null;
                        previous.SocialOrganizationInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSocialCause = value.IdSocialCause;
                    }
                    else
                    {
                        this.IdSocialCause = default(int);
                    }
                    this._socialCause.Entity = value;
                    if ((value != null))
                    {
                        value.SocialOrganizationInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SocialCause");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_SocialOrganizationInformation", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.SocialOrganizationInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.SocialOrganizationInformations.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        private bool FilterPopulationAttended(PopulationAttended entity)
        {
            return (entity.IdPopulationAttended == this.IdPopulationAttended);
        }
        
        private bool FilterSocialCause(SocialCause entity)
        {
            return (entity.IdSocialCause == this.IdSocialCause);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSocialOrganizationInformation;
        }
    }
    
    /// <summary>
    /// The 'Source' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Source : Entity
    {
        
        private int _idSource;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates;
        
        private string _name;
        
        private EntityCollection<StateProgram> _statePrograms;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdSourceChanging(int value);
        partial void OnIdSourceChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Source"/> class.
        /// </summary>
        public Source()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdSource' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdSource
        {
            get
            {
                return this._idSource;
            }
            set
            {
                if ((this._idSource != value))
                {
                    this.OnIdSourceChanging(value);
                    this.ValidateProperty("IdSource", value);
                    this._idSource = value;
                    this.RaisePropertyChanged("IdSource");
                    this.OnIdSourceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("Source_MicrosoftProgramState", "IdSource", "IdSource")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                if ((this._microsoftProgramStates == null))
                {
                    this._microsoftProgramStates = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates", this.FilterMicrosoftProgramStates, this.AttachMicrosoftProgramStates, this.DetachMicrosoftProgramStates);
                }
                return this._microsoftProgramStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("Source_StateProgram", "IdSource", "IdSource")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms
        {
            get
            {
                if ((this._statePrograms == null))
                {
                    this._statePrograms = new EntityCollection<StateProgram>(this, "StatePrograms", this.FilterStatePrograms, this.AttachStatePrograms, this.DetachStatePrograms);
                }
                return this._statePrograms;
            }
        }
        
        private void AttachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Source = this;
        }
        
        private void DetachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.Source = null;
        }
        
        private bool FilterMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            return (entity.IdSource == this.IdSource);
        }
        
        private void AttachStatePrograms(StateProgram entity)
        {
            entity.Source = this;
        }
        
        private void DetachStatePrograms(StateProgram entity)
        {
            entity.Source = null;
        }
        
        private bool FilterStatePrograms(StateProgram entity)
        {
            return (entity.IdSource == this.IdSource);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idSource;
        }
    }
    
    /// <summary>
    /// The 'State' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class State : Entity
    {
        
        private EntityCollection<CapacitationCenterInformation> _capacitationCenterInformations;
        
        private EntityCollection<CapacitationCenter> _capacitationCenters;
        
        private EntityCollection<Competition> _competitions;
        
        private EntityCollection<EducationInformationState> _educationInformationStates;
        
        private int _idState;
        
        private EntityCollection<MexicoAgreement> _mexicoAgreements;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates;
        
        private EntityCollection<Municipality> _municipalities;
        
        private string _name;
        
        private EntityCollection<OpenSourceStateCommunity> _openSourceStateCommunities;
        
        private EntityCollection<OpenSourceStateProvider> _openSourceStateProviders;
        
        private EntityCollection<OpenSourceState> _openSourceStates;
        
        private EntityCollection<PoliticalInformationState> _politicalInformationStates;
        
        private EntityCollection<SocialOrganizationInformation> _socialOrganizationInformations;
        
        private EntityCollection<StateEconomicInfo> _stateEconomicInfoes;
        
        private EntityCollection<StateProgram> _statePrograms;
        
        private EntityCollection<University> _universities;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="State"/> class.
        /// </summary>
        public State()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenterInformation"/> entity instances.
        /// </summary>
        [Association("State_CapacitationCenterInformation", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenterInformation> CapacitationCenterInformations
        {
            get
            {
                if ((this._capacitationCenterInformations == null))
                {
                    this._capacitationCenterInformations = new EntityCollection<CapacitationCenterInformation>(this, "CapacitationCenterInformations", this.FilterCapacitationCenterInformations, this.AttachCapacitationCenterInformations, this.DetachCapacitationCenterInformations);
                }
                return this._capacitationCenterInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="CapacitationCenter"/> entity instances.
        /// </summary>
        [Association("State_CapacitationCenter", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<CapacitationCenter> CapacitationCenters
        {
            get
            {
                if ((this._capacitationCenters == null))
                {
                    this._capacitationCenters = new EntityCollection<CapacitationCenter>(this, "CapacitationCenters", this.FilterCapacitationCenters, this.AttachCapacitationCenters, this.DetachCapacitationCenters);
                }
                return this._capacitationCenters;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Competition"/> entity instances.
        /// </summary>
        [Association("State_Competition", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<Competition> Competitions
        {
            get
            {
                if ((this._competitions == null))
                {
                    this._competitions = new EntityCollection<Competition>(this, "Competitions", this.FilterCompetitions, this.AttachCompetitions, this.DetachCompetitions);
                }
                return this._competitions;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="EducationInformationState"/> entity instances.
        /// </summary>
        [Association("State_EducationInformationState", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<EducationInformationState> EducationInformationStates
        {
            get
            {
                if ((this._educationInformationStates == null))
                {
                    this._educationInformationStates = new EntityCollection<EducationInformationState>(this, "EducationInformationStates", this.FilterEducationInformationStates, this.AttachEducationInformationStates, this.DetachEducationInformationStates);
                }
                return this._educationInformationStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaisePropertyChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MexicoAgreement"/> entity instances.
        /// </summary>
        [Association("State_MexicoAgreement", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<MexicoAgreement> MexicoAgreements
        {
            get
            {
                if ((this._mexicoAgreements == null))
                {
                    this._mexicoAgreements = new EntityCollection<MexicoAgreement>(this, "MexicoAgreements", this.FilterMexicoAgreements, this.AttachMexicoAgreements, this.DetachMexicoAgreements);
                }
                return this._mexicoAgreements;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("State_MicrosoftProgramState", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                if ((this._microsoftProgramStates == null))
                {
                    this._microsoftProgramStates = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates", this.FilterMicrosoftProgramStates, this.AttachMicrosoftProgramStates, this.DetachMicrosoftProgramStates);
                }
                return this._microsoftProgramStates;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Municipality"/> entity instances.
        /// </summary>
        [Association("State_Municipality", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<Municipality> Municipalities
        {
            get
            {
                if ((this._municipalities == null))
                {
                    this._municipalities = new EntityCollection<Municipality>(this, "Municipalities", this.FilterMunicipalities, this.AttachMunicipalities, this.DetachMunicipalities);
                }
                return this._municipalities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceStateCommunity"/> entity instances.
        /// </summary>
        [Association("State_OpenSourceStateCommunity", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceStateCommunity> OpenSourceStateCommunities
        {
            get
            {
                if ((this._openSourceStateCommunities == null))
                {
                    this._openSourceStateCommunities = new EntityCollection<OpenSourceStateCommunity>(this, "OpenSourceStateCommunities", this.FilterOpenSourceStateCommunities, this.AttachOpenSourceStateCommunities, this.DetachOpenSourceStateCommunities);
                }
                return this._openSourceStateCommunities;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceStateProvider"/> entity instances.
        /// </summary>
        [Association("State_OpenSourceStateProvider", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceStateProvider> OpenSourceStateProviders
        {
            get
            {
                if ((this._openSourceStateProviders == null))
                {
                    this._openSourceStateProviders = new EntityCollection<OpenSourceStateProvider>(this, "OpenSourceStateProviders", this.FilterOpenSourceStateProviders, this.AttachOpenSourceStateProviders, this.DetachOpenSourceStateProviders);
                }
                return this._openSourceStateProviders;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceState"/> entity instances.
        /// </summary>
        [Association("State_OpenSourceState", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceState> OpenSourceStates
        {
            get
            {
                if ((this._openSourceStates == null))
                {
                    this._openSourceStates = new EntityCollection<OpenSourceState>(this, "OpenSourceStates", this.FilterOpenSourceStates, this.AttachOpenSourceStates, this.DetachOpenSourceStates);
                }
                return this._openSourceStates;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PoliticalInformationState"/> entity instances.
        /// </summary>
        [Association("State_PoliticalInformationState", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<PoliticalInformationState> PoliticalInformationStates
        {
            get
            {
                if ((this._politicalInformationStates == null))
                {
                    this._politicalInformationStates = new EntityCollection<PoliticalInformationState>(this, "PoliticalInformationStates", this.FilterPoliticalInformationStates, this.AttachPoliticalInformationStates, this.DetachPoliticalInformationStates);
                }
                return this._politicalInformationStates;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SocialOrganizationInformation"/> entity instances.
        /// </summary>
        [Association("State_SocialOrganizationInformation", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<SocialOrganizationInformation> SocialOrganizationInformations
        {
            get
            {
                if ((this._socialOrganizationInformations == null))
                {
                    this._socialOrganizationInformations = new EntityCollection<SocialOrganizationInformation>(this, "SocialOrganizationInformations", this.FilterSocialOrganizationInformations, this.AttachSocialOrganizationInformations, this.DetachSocialOrganizationInformations);
                }
                return this._socialOrganizationInformations;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateEconomicInfo"/> entity instances.
        /// </summary>
        [Association("State_StateEconomicInfo", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<StateEconomicInfo> StateEconomicInfoes
        {
            get
            {
                if ((this._stateEconomicInfoes == null))
                {
                    this._stateEconomicInfoes = new EntityCollection<StateEconomicInfo>(this, "StateEconomicInfoes", this.FilterStateEconomicInfoes, this.AttachStateEconomicInfoes, this.DetachStateEconomicInfoes);
                }
                return this._stateEconomicInfoes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("State_StateProgram", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms
        {
            get
            {
                if ((this._statePrograms == null))
                {
                    this._statePrograms = new EntityCollection<StateProgram>(this, "StatePrograms", this.FilterStatePrograms, this.AttachStatePrograms, this.DetachStatePrograms);
                }
                return this._statePrograms;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="University"/> entity instances.
        /// </summary>
        [Association("State_University", "IdState", "IdState")]
        [XmlIgnore()]
        public EntityCollection<University> Universities
        {
            get
            {
                if ((this._universities == null))
                {
                    this._universities = new EntityCollection<University>(this, "Universities", this.FilterUniversities, this.AttachUniversities, this.DetachUniversities);
                }
                return this._universities;
            }
        }
        
        private void AttachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.State = this;
        }
        
        private void DetachCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            entity.State = null;
        }
        
        private bool FilterCapacitationCenterInformations(CapacitationCenterInformation entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachCapacitationCenters(CapacitationCenter entity)
        {
            entity.State = this;
        }
        
        private void DetachCapacitationCenters(CapacitationCenter entity)
        {
            entity.State = null;
        }
        
        private bool FilterCapacitationCenters(CapacitationCenter entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachCompetitions(Competition entity)
        {
            entity.State = this;
        }
        
        private void DetachCompetitions(Competition entity)
        {
            entity.State = null;
        }
        
        private bool FilterCompetitions(Competition entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachEducationInformationStates(EducationInformationState entity)
        {
            entity.State = this;
        }
        
        private void DetachEducationInformationStates(EducationInformationState entity)
        {
            entity.State = null;
        }
        
        private bool FilterEducationInformationStates(EducationInformationState entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachMexicoAgreements(MexicoAgreement entity)
        {
            entity.State = this;
        }
        
        private void DetachMexicoAgreements(MexicoAgreement entity)
        {
            entity.State = null;
        }
        
        private bool FilterMexicoAgreements(MexicoAgreement entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.State = this;
        }
        
        private void DetachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.State = null;
        }
        
        private bool FilterMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachMunicipalities(Municipality entity)
        {
            entity.State = this;
        }
        
        private void DetachMunicipalities(Municipality entity)
        {
            entity.State = null;
        }
        
        private bool FilterMunicipalities(Municipality entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachOpenSourceStateCommunities(OpenSourceStateCommunity entity)
        {
            entity.State = this;
        }
        
        private void DetachOpenSourceStateCommunities(OpenSourceStateCommunity entity)
        {
            entity.State = null;
        }
        
        private bool FilterOpenSourceStateCommunities(OpenSourceStateCommunity entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachOpenSourceStateProviders(OpenSourceStateProvider entity)
        {
            entity.State = this;
        }
        
        private void DetachOpenSourceStateProviders(OpenSourceStateProvider entity)
        {
            entity.State = null;
        }
        
        private bool FilterOpenSourceStateProviders(OpenSourceStateProvider entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachOpenSourceStates(OpenSourceState entity)
        {
            entity.State = this;
        }
        
        private void DetachOpenSourceStates(OpenSourceState entity)
        {
            entity.State = null;
        }
        
        private bool FilterOpenSourceStates(OpenSourceState entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachPoliticalInformationStates(PoliticalInformationState entity)
        {
            entity.State = this;
        }
        
        private void DetachPoliticalInformationStates(PoliticalInformationState entity)
        {
            entity.State = null;
        }
        
        private bool FilterPoliticalInformationStates(PoliticalInformationState entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            entity.State = this;
        }
        
        private void DetachSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            entity.State = null;
        }
        
        private bool FilterSocialOrganizationInformations(SocialOrganizationInformation entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachStateEconomicInfoes(StateEconomicInfo entity)
        {
            entity.State = this;
        }
        
        private void DetachStateEconomicInfoes(StateEconomicInfo entity)
        {
            entity.State = null;
        }
        
        private bool FilterStateEconomicInfoes(StateEconomicInfo entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachStatePrograms(StateProgram entity)
        {
            entity.State = this;
        }
        
        private void DetachStatePrograms(StateProgram entity)
        {
            entity.State = null;
        }
        
        private bool FilterStatePrograms(StateProgram entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private void AttachUniversities(University entity)
        {
            entity.State = this;
        }
        
        private void DetachUniversities(University entity)
        {
            entity.State = null;
        }
        
        private bool FilterUniversities(University entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idState;
        }
    }
    
    /// <summary>
    /// The 'StateEconomicInfo' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class StateEconomicInfo : Entity
    {
        
        private Nullable<double> _budgetPublicAdministration;
        
        private Nullable<double> _budgetSoftware;
        
        private Nullable<double> _budgetTIC;
        
        private DateTime _fromDate;
        
        private int _idState;
        
        private int _idStateEconomicInfo;
        
        private EntityRef<State> _state;
        
        private bool _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBudgetPublicAdministrationChanging(Nullable<double> value);
        partial void OnBudgetPublicAdministrationChanged();
        partial void OnBudgetSoftwareChanging(Nullable<double> value);
        partial void OnBudgetSoftwareChanged();
        partial void OnBudgetTICChanging(Nullable<double> value);
        partial void OnBudgetTICChanged();
        partial void OnFromDateChanging(DateTime value);
        partial void OnFromDateChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnIdStateEconomicInfoChanging(int value);
        partial void OnIdStateEconomicInfoChanged();
        partial void OnStatusChanging(bool value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StateEconomicInfo"/> class.
        /// </summary>
        public StateEconomicInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BudgetPublicAdministration' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> BudgetPublicAdministration
        {
            get
            {
                return this._budgetPublicAdministration;
            }
            set
            {
                if ((this._budgetPublicAdministration != value))
                {
                    this.OnBudgetPublicAdministrationChanging(value);
                    this.RaiseDataMemberChanging("BudgetPublicAdministration");
                    this.ValidateProperty("BudgetPublicAdministration", value);
                    this._budgetPublicAdministration = value;
                    this.RaiseDataMemberChanged("BudgetPublicAdministration");
                    this.OnBudgetPublicAdministrationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BudgetSoftware' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> BudgetSoftware
        {
            get
            {
                return this._budgetSoftware;
            }
            set
            {
                if ((this._budgetSoftware != value))
                {
                    this.OnBudgetSoftwareChanging(value);
                    this.RaiseDataMemberChanging("BudgetSoftware");
                    this.ValidateProperty("BudgetSoftware", value);
                    this._budgetSoftware = value;
                    this.RaiseDataMemberChanged("BudgetSoftware");
                    this.OnBudgetSoftwareChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BudgetTIC' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> BudgetTIC
        {
            get
            {
                return this._budgetTIC;
            }
            set
            {
                if ((this._budgetTIC != value))
                {
                    this.OnBudgetTICChanging(value);
                    this.RaiseDataMemberChanging("BudgetTIC");
                    this.ValidateProperty("BudgetTIC", value);
                    this._budgetTIC = value;
                    this.RaiseDataMemberChanged("BudgetTIC");
                    this.OnBudgetTICChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FromDate' value.
        /// </summary>
        [DataMember()]
        public DateTime FromDate
        {
            get
            {
                return this._fromDate;
            }
            set
            {
                if ((this._fromDate != value))
                {
                    this.OnFromDateChanging(value);
                    this.RaiseDataMemberChanging("FromDate");
                    this.ValidateProperty("FromDate", value);
                    this._fromDate = value;
                    this.RaiseDataMemberChanged("FromDate");
                    this.OnFromDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdStateEconomicInfo' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdStateEconomicInfo
        {
            get
            {
                return this._idStateEconomicInfo;
            }
            set
            {
                if ((this._idStateEconomicInfo != value))
                {
                    this.OnIdStateEconomicInfoChanging(value);
                    this.ValidateProperty("IdStateEconomicInfo", value);
                    this._idStateEconomicInfo = value;
                    this.RaisePropertyChanged("IdStateEconomicInfo");
                    this.OnIdStateEconomicInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_StateEconomicInfo", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.StateEconomicInfoes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.StateEconomicInfoes.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public bool Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idStateEconomicInfo;
        }
    }
    
    /// <summary>
    /// The 'StateProgram' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class StateProgram : Entity
    {
        
        private EntityRef<Contact> _contact;
        
        private EntityRef<Contact> _contact1;
        
        private DateTime _dateFrom;
        
        private DateTime _dateTo;
        
        private Nullable<int> _idContactMsft;
        
        private Nullable<int> _idContactState;
        
        private int _idOwner;
        
        private int _idPartner;
        
        private int _idProgram;
        
        private int _idSource;
        
        private int _idState;
        
        private int _idStateProgram;
        
        private int _idType;
        
        private double _investment;
        
        private int _number;
        
        private EntityRef<Owner> _owner;
        
        private EntityRef<Partner> _partner;
        
        private EntityRef<Program> _program;
        
        private int _progress;
        
        private double _roi;
        
        private EntityRef<Source> _source;
        
        private EntityRef<State> _state;
        
        private EntityRef<TypeSource> _typeSource;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateFromChanging(DateTime value);
        partial void OnDateFromChanged();
        partial void OnDateToChanging(DateTime value);
        partial void OnDateToChanged();
        partial void OnIdContactMsftChanging(Nullable<int> value);
        partial void OnIdContactMsftChanged();
        partial void OnIdContactStateChanging(Nullable<int> value);
        partial void OnIdContactStateChanged();
        partial void OnIdOwnerChanging(int value);
        partial void OnIdOwnerChanged();
        partial void OnIdPartnerChanging(int value);
        partial void OnIdPartnerChanged();
        partial void OnIdProgramChanging(int value);
        partial void OnIdProgramChanged();
        partial void OnIdSourceChanging(int value);
        partial void OnIdSourceChanged();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnIdStateProgramChanging(int value);
        partial void OnIdStateProgramChanged();
        partial void OnIdTypeChanging(int value);
        partial void OnIdTypeChanged();
        partial void OnInvestmentChanging(double value);
        partial void OnInvestmentChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();
        partial void OnProgressChanging(int value);
        partial void OnProgressChanged();
        partial void OnROIChanging(double value);
        partial void OnROIChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StateProgram"/> class.
        /// </summary>
        public StateProgram()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Contact_StateProgram", "IdContactMsft", "IdContact", IsForeignKey=true)]
        [XmlIgnore()]
        public Contact Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityRef<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact.Entity;
            }
            set
            {
                Contact previous = this.Contact;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact", value);
                    if ((previous != null))
                    {
                        this._contact.Entity = null;
                        previous.StatePrograms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdContactMsft = value.IdContact;
                    }
                    else
                    {
                        this.IdContactMsft = default(Nullable<int>);
                    }
                    this._contact.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms.Add(this);
                    }
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Contact_StateProgram1", "IdContactState", "IdContact", IsForeignKey=true)]
        [XmlIgnore()]
        public Contact Contact1
        {
            get
            {
                if ((this._contact1 == null))
                {
                    this._contact1 = new EntityRef<Contact>(this, "Contact1", this.FilterContact1);
                }
                return this._contact1.Entity;
            }
            set
            {
                Contact previous = this.Contact1;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact1", value);
                    if ((previous != null))
                    {
                        this._contact1.Entity = null;
                        previous.StatePrograms1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdContactState = value.IdContact;
                    }
                    else
                    {
                        this.IdContactState = default(Nullable<int>);
                    }
                    this._contact1.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms1.Add(this);
                    }
                    this.RaisePropertyChanged("Contact1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateFrom' value.
        /// </summary>
        [DataMember()]
        public DateTime DateFrom
        {
            get
            {
                return this._dateFrom;
            }
            set
            {
                if ((this._dateFrom != value))
                {
                    this.OnDateFromChanging(value);
                    this.RaiseDataMemberChanging("DateFrom");
                    this.ValidateProperty("DateFrom", value);
                    this._dateFrom = value;
                    this.RaiseDataMemberChanged("DateFrom");
                    this.OnDateFromChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateTo' value.
        /// </summary>
        [DataMember()]
        public DateTime DateTo
        {
            get
            {
                return this._dateTo;
            }
            set
            {
                if ((this._dateTo != value))
                {
                    this.OnDateToChanging(value);
                    this.RaiseDataMemberChanging("DateTo");
                    this.ValidateProperty("DateTo", value);
                    this._dateTo = value;
                    this.RaiseDataMemberChanged("DateTo");
                    this.OnDateToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdContactMsft' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdContactMsft
        {
            get
            {
                return this._idContactMsft;
            }
            set
            {
                if ((this._idContactMsft != value))
                {
                    this.OnIdContactMsftChanging(value);
                    this.RaiseDataMemberChanging("IdContactMsft");
                    this.ValidateProperty("IdContactMsft", value);
                    this._idContactMsft = value;
                    this.RaiseDataMemberChanged("IdContactMsft");
                    this.OnIdContactMsftChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdContactState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> IdContactState
        {
            get
            {
                return this._idContactState;
            }
            set
            {
                if ((this._idContactState != value))
                {
                    this.OnIdContactStateChanging(value);
                    this.RaiseDataMemberChanging("IdContactState");
                    this.ValidateProperty("IdContactState", value);
                    this._idContactState = value;
                    this.RaiseDataMemberChanged("IdContactState");
                    this.OnIdContactStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdOwner' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdOwner
        {
            get
            {
                return this._idOwner;
            }
            set
            {
                if ((this._idOwner != value))
                {
                    this.OnIdOwnerChanging(value);
                    this.RaiseDataMemberChanging("IdOwner");
                    this.ValidateProperty("IdOwner", value);
                    this._idOwner = value;
                    this.RaiseDataMemberChanged("IdOwner");
                    this.OnIdOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdPartner' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdPartner
        {
            get
            {
                return this._idPartner;
            }
            set
            {
                if ((this._idPartner != value))
                {
                    this.OnIdPartnerChanging(value);
                    this.RaiseDataMemberChanging("IdPartner");
                    this.ValidateProperty("IdPartner", value);
                    this._idPartner = value;
                    this.RaiseDataMemberChanged("IdPartner");
                    this.OnIdPartnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdProgram' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdProgram
        {
            get
            {
                return this._idProgram;
            }
            set
            {
                if ((this._idProgram != value))
                {
                    this.OnIdProgramChanging(value);
                    this.RaiseDataMemberChanging("IdProgram");
                    this.ValidateProperty("IdProgram", value);
                    this._idProgram = value;
                    this.RaiseDataMemberChanged("IdProgram");
                    this.OnIdProgramChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSource' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSource
        {
            get
            {
                return this._idSource;
            }
            set
            {
                if ((this._idSource != value))
                {
                    this.OnIdSourceChanging(value);
                    this.RaiseDataMemberChanging("IdSource");
                    this.ValidateProperty("IdSource", value);
                    this._idSource = value;
                    this.RaiseDataMemberChanged("IdSource");
                    this.OnIdSourceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdStateProgram' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdStateProgram
        {
            get
            {
                return this._idStateProgram;
            }
            set
            {
                if ((this._idStateProgram != value))
                {
                    this.OnIdStateProgramChanging(value);
                    this.ValidateProperty("IdStateProgram", value);
                    this._idStateProgram = value;
                    this.RaisePropertyChanged("IdStateProgram");
                    this.OnIdStateProgramChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdType
        {
            get
            {
                return this._idType;
            }
            set
            {
                if ((this._idType != value))
                {
                    this.OnIdTypeChanging(value);
                    this.RaiseDataMemberChanging("IdType");
                    this.ValidateProperty("IdType", value);
                    this._idType = value;
                    this.RaiseDataMemberChanged("IdType");
                    this.OnIdTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Investment' value.
        /// </summary>
        [DataMember()]
        public double Investment
        {
            get
            {
                return this._investment;
            }
            set
            {
                if ((this._investment != value))
                {
                    this.OnInvestmentChanging(value);
                    this.RaiseDataMemberChanging("Investment");
                    this.ValidateProperty("Investment", value);
                    this._investment = value;
                    this.RaiseDataMemberChanged("Investment");
                    this.OnInvestmentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Owner"/> entity.
        /// </summary>
        [Association("Owner_StateProgram", "IdOwner", "IdOwner", IsForeignKey=true)]
        [XmlIgnore()]
        public Owner Owner
        {
            get
            {
                if ((this._owner == null))
                {
                    this._owner = new EntityRef<Owner>(this, "Owner", this.FilterOwner);
                }
                return this._owner.Entity;
            }
            set
            {
                Owner previous = this.Owner;
                if ((previous != value))
                {
                    this.ValidateProperty("Owner", value);
                    if ((previous != null))
                    {
                        this._owner.Entity = null;
                        previous.StatePrograms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdOwner = value.IdOwner;
                    }
                    else
                    {
                        this.IdOwner = default(int);
                    }
                    this._owner.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms.Add(this);
                    }
                    this.RaisePropertyChanged("Owner");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Partner"/> entity.
        /// </summary>
        [Association("Partner_StateProgram", "IdPartner", "IdPartner", IsForeignKey=true)]
        [XmlIgnore()]
        public Partner Partner
        {
            get
            {
                if ((this._partner == null))
                {
                    this._partner = new EntityRef<Partner>(this, "Partner", this.FilterPartner);
                }
                return this._partner.Entity;
            }
            set
            {
                Partner previous = this.Partner;
                if ((previous != value))
                {
                    this.ValidateProperty("Partner", value);
                    if ((previous != null))
                    {
                        this._partner.Entity = null;
                        previous.StatePrograms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdPartner = value.IdPartner;
                    }
                    else
                    {
                        this.IdPartner = default(int);
                    }
                    this._partner.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms.Add(this);
                    }
                    this.RaisePropertyChanged("Partner");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Program"/> entity.
        /// </summary>
        [Association("Program_StateProgram", "IdProgram", "IdProgram", IsForeignKey=true)]
        [XmlIgnore()]
        public Program Program
        {
            get
            {
                if ((this._program == null))
                {
                    this._program = new EntityRef<Program>(this, "Program", this.FilterProgram);
                }
                return this._program.Entity;
            }
            set
            {
                Program previous = this.Program;
                if ((previous != value))
                {
                    this.ValidateProperty("Program", value);
                    if ((previous != null))
                    {
                        this._program.Entity = null;
                        previous.StatePrograms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdProgram = value.IdProgram;
                    }
                    else
                    {
                        this.IdProgram = default(int);
                    }
                    this._program.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms.Add(this);
                    }
                    this.RaisePropertyChanged("Program");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Progress' value.
        /// </summary>
        [DataMember()]
        public int Progress
        {
            get
            {
                return this._progress;
            }
            set
            {
                if ((this._progress != value))
                {
                    this.OnProgressChanging(value);
                    this.RaiseDataMemberChanging("Progress");
                    this.ValidateProperty("Progress", value);
                    this._progress = value;
                    this.RaiseDataMemberChanged("Progress");
                    this.OnProgressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ROI' value.
        /// </summary>
        [DataMember()]
        public double ROI
        {
            get
            {
                return this._roi;
            }
            set
            {
                if ((this._roi != value))
                {
                    this.OnROIChanging(value);
                    this.RaiseDataMemberChanging("ROI");
                    this.ValidateProperty("ROI", value);
                    this._roi = value;
                    this.RaiseDataMemberChanged("ROI");
                    this.OnROIChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Source"/> entity.
        /// </summary>
        [Association("Source_StateProgram", "IdSource", "IdSource", IsForeignKey=true)]
        [XmlIgnore()]
        public Source Source
        {
            get
            {
                if ((this._source == null))
                {
                    this._source = new EntityRef<Source>(this, "Source", this.FilterSource);
                }
                return this._source.Entity;
            }
            set
            {
                Source previous = this.Source;
                if ((previous != value))
                {
                    this.ValidateProperty("Source", value);
                    if ((previous != null))
                    {
                        this._source.Entity = null;
                        previous.StatePrograms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSource = value.IdSource;
                    }
                    else
                    {
                        this.IdSource = default(int);
                    }
                    this._source.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms.Add(this);
                    }
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_StateProgram", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.StatePrograms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TypeSource"/> entity.
        /// </summary>
        [Association("TypeSource_StateProgram", "IdType", "IdType", IsForeignKey=true)]
        [XmlIgnore()]
        public TypeSource TypeSource
        {
            get
            {
                if ((this._typeSource == null))
                {
                    this._typeSource = new EntityRef<TypeSource>(this, "TypeSource", this.FilterTypeSource);
                }
                return this._typeSource.Entity;
            }
            set
            {
                TypeSource previous = this.TypeSource;
                if ((previous != value))
                {
                    this.ValidateProperty("TypeSource", value);
                    if ((previous != null))
                    {
                        this._typeSource.Entity = null;
                        previous.StatePrograms.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdType = value.IdType;
                    }
                    else
                    {
                        this.IdType = default(int);
                    }
                    this._typeSource.Entity = value;
                    if ((value != null))
                    {
                        value.StatePrograms.Add(this);
                    }
                    this.RaisePropertyChanged("TypeSource");
                }
            }
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.IdContact == this.IdContactMsft);
        }
        
        private bool FilterContact1(Contact entity)
        {
            return (entity.IdContact == this.IdContactState);
        }
        
        private bool FilterOwner(Owner entity)
        {
            return (entity.IdOwner == this.IdOwner);
        }
        
        private bool FilterPartner(Partner entity)
        {
            return (entity.IdPartner == this.IdPartner);
        }
        
        private bool FilterProgram(Program entity)
        {
            return (entity.IdProgram == this.IdProgram);
        }
        
        private bool FilterSource(Source entity)
        {
            return (entity.IdSource == this.IdSource);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        private bool FilterTypeSource(TypeSource entity)
        {
            return (entity.IdType == this.IdType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idStateProgram;
        }
    }
    
    /// <summary>
    /// The 'StudentsInformation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class StudentsInformation : Entity
    {
        
        private EntityRef<EducationInformationState> _educationInformationState;
        
        private int _idEducationInformationState;
        
        private int _idSchoolLevel;
        
        private int _idSchoolType;
        
        private int _idStudentInformation;
        
        private int _number;
        
        private EntityRef<SchoolLevel> _schoolLevel;
        
        private EntityRef<SchoolType> _schoolType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdEducationInformationStateChanging(int value);
        partial void OnIdEducationInformationStateChanged();
        partial void OnIdSchoolLevelChanging(int value);
        partial void OnIdSchoolLevelChanged();
        partial void OnIdSchoolTypeChanging(int value);
        partial void OnIdSchoolTypeChanged();
        partial void OnIdStudentInformationChanging(int value);
        partial void OnIdStudentInformationChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentsInformation"/> class.
        /// </summary>
        public StudentsInformation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EducationInformationState"/> entity.
        /// </summary>
        [Association("EducationInformationState_StudentsInformation", "IdEducationInformationState", "IdEducationInformationState", IsForeignKey=true)]
        [XmlIgnore()]
        public EducationInformationState EducationInformationState
        {
            get
            {
                if ((this._educationInformationState == null))
                {
                    this._educationInformationState = new EntityRef<EducationInformationState>(this, "EducationInformationState", this.FilterEducationInformationState);
                }
                return this._educationInformationState.Entity;
            }
            set
            {
                EducationInformationState previous = this.EducationInformationState;
                if ((previous != value))
                {
                    this.ValidateProperty("EducationInformationState", value);
                    if ((previous != null))
                    {
                        this._educationInformationState.Entity = null;
                        previous.StudentsInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdEducationInformationState = value.IdEducationInformationState;
                    }
                    else
                    {
                        this.IdEducationInformationState = default(int);
                    }
                    this._educationInformationState.Entity = value;
                    if ((value != null))
                    {
                        value.StudentsInformations.Add(this);
                    }
                    this.RaisePropertyChanged("EducationInformationState");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEducationInformationState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdEducationInformationState
        {
            get
            {
                return this._idEducationInformationState;
            }
            set
            {
                if ((this._idEducationInformationState != value))
                {
                    this.OnIdEducationInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdEducationInformationState");
                    this.ValidateProperty("IdEducationInformationState", value);
                    this._idEducationInformationState = value;
                    this.RaiseDataMemberChanged("IdEducationInformationState");
                    this.OnIdEducationInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolLevel' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSchoolLevel
        {
            get
            {
                return this._idSchoolLevel;
            }
            set
            {
                if ((this._idSchoolLevel != value))
                {
                    this.OnIdSchoolLevelChanging(value);
                    this.RaiseDataMemberChanging("IdSchoolLevel");
                    this.ValidateProperty("IdSchoolLevel", value);
                    this._idSchoolLevel = value;
                    this.RaiseDataMemberChanged("IdSchoolLevel");
                    this.OnIdSchoolLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSchoolType
        {
            get
            {
                return this._idSchoolType;
            }
            set
            {
                if ((this._idSchoolType != value))
                {
                    this.OnIdSchoolTypeChanging(value);
                    this.RaiseDataMemberChanging("IdSchoolType");
                    this.ValidateProperty("IdSchoolType", value);
                    this._idSchoolType = value;
                    this.RaiseDataMemberChanged("IdSchoolType");
                    this.OnIdSchoolTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdStudentInformation' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdStudentInformation
        {
            get
            {
                return this._idStudentInformation;
            }
            set
            {
                if ((this._idStudentInformation != value))
                {
                    this.OnIdStudentInformationChanging(value);
                    this.ValidateProperty("IdStudentInformation", value);
                    this._idStudentInformation = value;
                    this.RaisePropertyChanged("IdStudentInformation");
                    this.OnIdStudentInformationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SchoolLevel"/> entity.
        /// </summary>
        [Association("SchoolLevel_StudentsInformation", "IdSchoolLevel", "IdSchoolLevel", IsForeignKey=true)]
        [XmlIgnore()]
        public SchoolLevel SchoolLevel
        {
            get
            {
                if ((this._schoolLevel == null))
                {
                    this._schoolLevel = new EntityRef<SchoolLevel>(this, "SchoolLevel", this.FilterSchoolLevel);
                }
                return this._schoolLevel.Entity;
            }
            set
            {
                SchoolLevel previous = this.SchoolLevel;
                if ((previous != value))
                {
                    this.ValidateProperty("SchoolLevel", value);
                    if ((previous != null))
                    {
                        this._schoolLevel.Entity = null;
                        previous.StudentsInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSchoolLevel = value.IdSchoolLevel;
                    }
                    else
                    {
                        this.IdSchoolLevel = default(int);
                    }
                    this._schoolLevel.Entity = value;
                    if ((value != null))
                    {
                        value.StudentsInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SchoolLevel");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SchoolType"/> entity.
        /// </summary>
        [Association("SchoolType_StudentsInformation", "IdSchoolType", "IdSchoolType", IsForeignKey=true)]
        [XmlIgnore()]
        public SchoolType SchoolType
        {
            get
            {
                if ((this._schoolType == null))
                {
                    this._schoolType = new EntityRef<SchoolType>(this, "SchoolType", this.FilterSchoolType);
                }
                return this._schoolType.Entity;
            }
            set
            {
                SchoolType previous = this.SchoolType;
                if ((previous != value))
                {
                    this.ValidateProperty("SchoolType", value);
                    if ((previous != null))
                    {
                        this._schoolType.Entity = null;
                        previous.StudentsInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSchoolType = value.IdSchoolType;
                    }
                    else
                    {
                        this.IdSchoolType = default(int);
                    }
                    this._schoolType.Entity = value;
                    if ((value != null))
                    {
                        value.StudentsInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SchoolType");
                }
            }
        }
        
        private bool FilterEducationInformationState(EducationInformationState entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private bool FilterSchoolLevel(SchoolLevel entity)
        {
            return (entity.IdSchoolLevel == this.IdSchoolLevel);
        }
        
        private bool FilterSchoolType(SchoolType entity)
        {
            return (entity.IdSchoolType == this.IdSchoolType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idStudentInformation;
        }
    }
    
    /// <summary>
    /// The 'TeachersInformation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class TeachersInformation : Entity
    {
        
        private EntityRef<EducationInformationState> _educationInformationState;
        
        private int _idEducationInformationState;
        
        private int _idSchoolLevel;
        
        private int _idSchoolType;
        
        private int _idTeachersInformation;
        
        private int _number;
        
        private EntityRef<SchoolLevel> _schoolLevel;
        
        private EntityRef<SchoolType> _schoolType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdEducationInformationStateChanging(int value);
        partial void OnIdEducationInformationStateChanged();
        partial void OnIdSchoolLevelChanging(int value);
        partial void OnIdSchoolLevelChanged();
        partial void OnIdSchoolTypeChanging(int value);
        partial void OnIdSchoolTypeChanged();
        partial void OnIdTeachersInformationChanging(int value);
        partial void OnIdTeachersInformationChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeachersInformation"/> class.
        /// </summary>
        public TeachersInformation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="EducationInformationState"/> entity.
        /// </summary>
        [Association("EducationInformationState_TeachersInformation", "IdEducationInformationState", "IdEducationInformationState", IsForeignKey=true)]
        [XmlIgnore()]
        public EducationInformationState EducationInformationState
        {
            get
            {
                if ((this._educationInformationState == null))
                {
                    this._educationInformationState = new EntityRef<EducationInformationState>(this, "EducationInformationState", this.FilterEducationInformationState);
                }
                return this._educationInformationState.Entity;
            }
            set
            {
                EducationInformationState previous = this.EducationInformationState;
                if ((previous != value))
                {
                    this.ValidateProperty("EducationInformationState", value);
                    if ((previous != null))
                    {
                        this._educationInformationState.Entity = null;
                        previous.TeachersInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdEducationInformationState = value.IdEducationInformationState;
                    }
                    else
                    {
                        this.IdEducationInformationState = default(int);
                    }
                    this._educationInformationState.Entity = value;
                    if ((value != null))
                    {
                        value.TeachersInformations.Add(this);
                    }
                    this.RaisePropertyChanged("EducationInformationState");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdEducationInformationState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdEducationInformationState
        {
            get
            {
                return this._idEducationInformationState;
            }
            set
            {
                if ((this._idEducationInformationState != value))
                {
                    this.OnIdEducationInformationStateChanging(value);
                    this.RaiseDataMemberChanging("IdEducationInformationState");
                    this.ValidateProperty("IdEducationInformationState", value);
                    this._idEducationInformationState = value;
                    this.RaiseDataMemberChanged("IdEducationInformationState");
                    this.OnIdEducationInformationStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolLevel' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSchoolLevel
        {
            get
            {
                return this._idSchoolLevel;
            }
            set
            {
                if ((this._idSchoolLevel != value))
                {
                    this.OnIdSchoolLevelChanging(value);
                    this.RaiseDataMemberChanging("IdSchoolLevel");
                    this.ValidateProperty("IdSchoolLevel", value);
                    this._idSchoolLevel = value;
                    this.RaiseDataMemberChanged("IdSchoolLevel");
                    this.OnIdSchoolLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdSchoolType' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdSchoolType
        {
            get
            {
                return this._idSchoolType;
            }
            set
            {
                if ((this._idSchoolType != value))
                {
                    this.OnIdSchoolTypeChanging(value);
                    this.RaiseDataMemberChanging("IdSchoolType");
                    this.ValidateProperty("IdSchoolType", value);
                    this._idSchoolType = value;
                    this.RaiseDataMemberChanged("IdSchoolType");
                    this.OnIdSchoolTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdTeachersInformation' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdTeachersInformation
        {
            get
            {
                return this._idTeachersInformation;
            }
            set
            {
                if ((this._idTeachersInformation != value))
                {
                    this.OnIdTeachersInformationChanging(value);
                    this.ValidateProperty("IdTeachersInformation", value);
                    this._idTeachersInformation = value;
                    this.RaisePropertyChanged("IdTeachersInformation");
                    this.OnIdTeachersInformationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.RaiseDataMemberChanging("Number");
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaiseDataMemberChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SchoolLevel"/> entity.
        /// </summary>
        [Association("SchoolLevel_TeachersInformation", "IdSchoolLevel", "IdSchoolLevel", IsForeignKey=true)]
        [XmlIgnore()]
        public SchoolLevel SchoolLevel
        {
            get
            {
                if ((this._schoolLevel == null))
                {
                    this._schoolLevel = new EntityRef<SchoolLevel>(this, "SchoolLevel", this.FilterSchoolLevel);
                }
                return this._schoolLevel.Entity;
            }
            set
            {
                SchoolLevel previous = this.SchoolLevel;
                if ((previous != value))
                {
                    this.ValidateProperty("SchoolLevel", value);
                    if ((previous != null))
                    {
                        this._schoolLevel.Entity = null;
                        previous.TeachersInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSchoolLevel = value.IdSchoolLevel;
                    }
                    else
                    {
                        this.IdSchoolLevel = default(int);
                    }
                    this._schoolLevel.Entity = value;
                    if ((value != null))
                    {
                        value.TeachersInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SchoolLevel");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SchoolType"/> entity.
        /// </summary>
        [Association("SchoolType_TeachersInformation", "IdSchoolType", "IdSchoolType", IsForeignKey=true)]
        [XmlIgnore()]
        public SchoolType SchoolType
        {
            get
            {
                if ((this._schoolType == null))
                {
                    this._schoolType = new EntityRef<SchoolType>(this, "SchoolType", this.FilterSchoolType);
                }
                return this._schoolType.Entity;
            }
            set
            {
                SchoolType previous = this.SchoolType;
                if ((previous != value))
                {
                    this.ValidateProperty("SchoolType", value);
                    if ((previous != null))
                    {
                        this._schoolType.Entity = null;
                        previous.TeachersInformations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdSchoolType = value.IdSchoolType;
                    }
                    else
                    {
                        this.IdSchoolType = default(int);
                    }
                    this._schoolType.Entity = value;
                    if ((value != null))
                    {
                        value.TeachersInformations.Add(this);
                    }
                    this.RaisePropertyChanged("SchoolType");
                }
            }
        }
        
        private bool FilterEducationInformationState(EducationInformationState entity)
        {
            return (entity.IdEducationInformationState == this.IdEducationInformationState);
        }
        
        private bool FilterSchoolLevel(SchoolLevel entity)
        {
            return (entity.IdSchoolLevel == this.IdSchoolLevel);
        }
        
        private bool FilterSchoolType(SchoolType entity)
        {
            return (entity.IdSchoolType == this.IdSchoolType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idTeachersInformation;
        }
    }
    
    /// <summary>
    /// The 'TypeAgreement' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class TypeAgreement : Entity
    {
        
        private int _idTypeAgreement;
        
        private EntityCollection<MexicoAgreement> _mexicoAgreements;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdTypeAgreementChanging(int value);
        partial void OnIdTypeAgreementChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeAgreement"/> class.
        /// </summary>
        public TypeAgreement()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdTypeAgreement' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdTypeAgreement
        {
            get
            {
                return this._idTypeAgreement;
            }
            set
            {
                if ((this._idTypeAgreement != value))
                {
                    this.OnIdTypeAgreementChanging(value);
                    this.ValidateProperty("IdTypeAgreement", value);
                    this._idTypeAgreement = value;
                    this.RaisePropertyChanged("IdTypeAgreement");
                    this.OnIdTypeAgreementChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MexicoAgreement"/> entity instances.
        /// </summary>
        [Association("TypeAgreement_MexicoAgreement", "IdTypeAgreement", "IdTypeAgreement")]
        [XmlIgnore()]
        public EntityCollection<MexicoAgreement> MexicoAgreements
        {
            get
            {
                if ((this._mexicoAgreements == null))
                {
                    this._mexicoAgreements = new EntityCollection<MexicoAgreement>(this, "MexicoAgreements", this.FilterMexicoAgreements, this.AttachMexicoAgreements, this.DetachMexicoAgreements);
                }
                return this._mexicoAgreements;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachMexicoAgreements(MexicoAgreement entity)
        {
            entity.TypeAgreement = this;
        }
        
        private void DetachMexicoAgreements(MexicoAgreement entity)
        {
            entity.TypeAgreement = null;
        }
        
        private bool FilterMexicoAgreements(MexicoAgreement entity)
        {
            return (entity.IdTypeAgreement == this.IdTypeAgreement);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idTypeAgreement;
        }
    }
    
    /// <summary>
    /// The 'TypeProduct' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class TypeProduct : Entity
    {
        
        private int _idTypeProduct;
        
        private string _name;
        
        private EntityCollection<OpenSourceState> _openSourceStates;
        
        private EntityCollection<Product> _products;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdTypeProductChanging(int value);
        partial void OnIdTypeProductChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeProduct"/> class.
        /// </summary>
        public TypeProduct()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdTypeProduct' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdTypeProduct
        {
            get
            {
                return this._idTypeProduct;
            }
            set
            {
                if ((this._idTypeProduct != value))
                {
                    this.OnIdTypeProductChanging(value);
                    this.ValidateProperty("IdTypeProduct", value);
                    this._idTypeProduct = value;
                    this.RaisePropertyChanged("IdTypeProduct");
                    this.OnIdTypeProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="OpenSourceState"/> entity instances.
        /// </summary>
        [Association("TypeProduct_OpenSourceState", "IdTypeProduct", "IdTypeProduct")]
        [XmlIgnore()]
        public EntityCollection<OpenSourceState> OpenSourceStates
        {
            get
            {
                if ((this._openSourceStates == null))
                {
                    this._openSourceStates = new EntityCollection<OpenSourceState>(this, "OpenSourceStates", this.FilterOpenSourceStates, this.AttachOpenSourceStates, this.DetachOpenSourceStates);
                }
                return this._openSourceStates;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Product"/> entity instances.
        /// </summary>
        [Association("TypeProduct_Product", "IdTypeProduct", "IdTypeProduct")]
        [XmlIgnore()]
        public EntityCollection<Product> Products
        {
            get
            {
                if ((this._products == null))
                {
                    this._products = new EntityCollection<Product>(this, "Products", this.FilterProducts, this.AttachProducts, this.DetachProducts);
                }
                return this._products;
            }
        }
        
        private void AttachOpenSourceStates(OpenSourceState entity)
        {
            entity.TypeProduct = this;
        }
        
        private void DetachOpenSourceStates(OpenSourceState entity)
        {
            entity.TypeProduct = null;
        }
        
        private bool FilterOpenSourceStates(OpenSourceState entity)
        {
            return (entity.IdTypeProduct == this.IdTypeProduct);
        }
        
        private void AttachProducts(Product entity)
        {
            entity.TypeProduct = this;
        }
        
        private void DetachProducts(Product entity)
        {
            entity.TypeProduct = null;
        }
        
        private bool FilterProducts(Product entity)
        {
            return (entity.IdTypeProduct == this.IdTypeProduct);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idTypeProduct;
        }
    }
    
    /// <summary>
    /// The 'TypeSepProject' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class TypeSepProject : Entity
    {
        
        private int _idTypeSepProject;
        
        private string _name;
        
        private EntityCollection<SEPProjectState> _sepProjectStates;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdTypeSepProjectChanging(int value);
        partial void OnIdTypeSepProjectChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeSepProject"/> class.
        /// </summary>
        public TypeSepProject()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdTypeSepProject' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdTypeSepProject
        {
            get
            {
                return this._idTypeSepProject;
            }
            set
            {
                if ((this._idTypeSepProject != value))
                {
                    this.OnIdTypeSepProjectChanging(value);
                    this.ValidateProperty("IdTypeSepProject", value);
                    this._idTypeSepProject = value;
                    this.RaisePropertyChanged("IdTypeSepProject");
                    this.OnIdTypeSepProjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SEPProjectState"/> entity instances.
        /// </summary>
        [Association("TypeSepProject_SEPProjectState", "IdTypeSepProject", "IdTypeSepProject")]
        [XmlIgnore()]
        public EntityCollection<SEPProjectState> SEPProjectStates
        {
            get
            {
                if ((this._sepProjectStates == null))
                {
                    this._sepProjectStates = new EntityCollection<SEPProjectState>(this, "SEPProjectStates", this.FilterSEPProjectStates, this.AttachSEPProjectStates, this.DetachSEPProjectStates);
                }
                return this._sepProjectStates;
            }
        }
        
        private void AttachSEPProjectStates(SEPProjectState entity)
        {
            entity.TypeSepProject = this;
        }
        
        private void DetachSEPProjectStates(SEPProjectState entity)
        {
            entity.TypeSepProject = null;
        }
        
        private bool FilterSEPProjectStates(SEPProjectState entity)
        {
            return (entity.IdTypeSepProject == this.IdTypeSepProject);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idTypeSepProject;
        }
    }
    
    /// <summary>
    /// The 'TypeSource' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class TypeSource : Entity
    {
        
        private EntityCollection<Competition> _competitions;
        
        private int _idType;
        
        private EntityCollection<MicrosoftProgramState> _microsoftProgramStates;
        
        private string _name;
        
        private EntityCollection<StateProgram> _statePrograms;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdTypeChanging(int value);
        partial void OnIdTypeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeSource"/> class.
        /// </summary>
        public TypeSource()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Competition"/> entity instances.
        /// </summary>
        [Association("TypeSource_Competition", "IdType", "IdType")]
        [XmlIgnore()]
        public EntityCollection<Competition> Competitions
        {
            get
            {
                if ((this._competitions == null))
                {
                    this._competitions = new EntityCollection<Competition>(this, "Competitions", this.FilterCompetitions, this.AttachCompetitions, this.DetachCompetitions);
                }
                return this._competitions;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdType' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdType
        {
            get
            {
                return this._idType;
            }
            set
            {
                if ((this._idType != value))
                {
                    this.OnIdTypeChanging(value);
                    this.ValidateProperty("IdType", value);
                    this._idType = value;
                    this.RaisePropertyChanged("IdType");
                    this.OnIdTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MicrosoftProgramState"/> entity instances.
        /// </summary>
        [Association("TypeSource_MicrosoftProgramState", "IdType", "IdType")]
        [XmlIgnore()]
        public EntityCollection<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                if ((this._microsoftProgramStates == null))
                {
                    this._microsoftProgramStates = new EntityCollection<MicrosoftProgramState>(this, "MicrosoftProgramStates", this.FilterMicrosoftProgramStates, this.AttachMicrosoftProgramStates, this.DetachMicrosoftProgramStates);
                }
                return this._microsoftProgramStates;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StateProgram"/> entity instances.
        /// </summary>
        [Association("TypeSource_StateProgram", "IdType", "IdType")]
        [XmlIgnore()]
        public EntityCollection<StateProgram> StatePrograms
        {
            get
            {
                if ((this._statePrograms == null))
                {
                    this._statePrograms = new EntityCollection<StateProgram>(this, "StatePrograms", this.FilterStatePrograms, this.AttachStatePrograms, this.DetachStatePrograms);
                }
                return this._statePrograms;
            }
        }
        
        private void AttachCompetitions(Competition entity)
        {
            entity.TypeSource = this;
        }
        
        private void DetachCompetitions(Competition entity)
        {
            entity.TypeSource = null;
        }
        
        private bool FilterCompetitions(Competition entity)
        {
            return (entity.IdType == this.IdType);
        }
        
        private void AttachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.TypeSource = this;
        }
        
        private void DetachMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            entity.TypeSource = null;
        }
        
        private bool FilterMicrosoftProgramStates(MicrosoftProgramState entity)
        {
            return (entity.IdType == this.IdType);
        }
        
        private void AttachStatePrograms(StateProgram entity)
        {
            entity.TypeSource = this;
        }
        
        private void DetachStatePrograms(StateProgram entity)
        {
            entity.TypeSource = null;
        }
        
        private bool FilterStatePrograms(StateProgram entity)
        {
            return (entity.IdType == this.IdType);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idType;
        }
    }
    
    /// <summary>
    /// The 'University' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class University : Entity
    {
        
        private int _idState;
        
        private int _idUniversity;
        
        private EntityCollection<MainUniversity> _mainUniversities;
        
        private string _name;
        
        private EntityRef<State> _state;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdStateChanging(int value);
        partial void OnIdStateChanged();
        partial void OnIdUniversityChanging(int value);
        partial void OnIdUniversityChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="University"/> class.
        /// </summary>
        public University()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdState' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int IdState
        {
            get
            {
                return this._idState;
            }
            set
            {
                if ((this._idState != value))
                {
                    this.OnIdStateChanging(value);
                    this.RaiseDataMemberChanging("IdState");
                    this.ValidateProperty("IdState", value);
                    this._idState = value;
                    this.RaiseDataMemberChanged("IdState");
                    this.OnIdStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdUniversity' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdUniversity
        {
            get
            {
                return this._idUniversity;
            }
            set
            {
                if ((this._idUniversity != value))
                {
                    this.OnIdUniversityChanging(value);
                    this.ValidateProperty("IdUniversity", value);
                    this._idUniversity = value;
                    this.RaisePropertyChanged("IdUniversity");
                    this.OnIdUniversityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MainUniversity"/> entity instances.
        /// </summary>
        [Association("University_MainUniversity", "IdUniversity", "IdUniversity")]
        [XmlIgnore()]
        public EntityCollection<MainUniversity> MainUniversities
        {
            get
            {
                if ((this._mainUniversities == null))
                {
                    this._mainUniversities = new EntityCollection<MainUniversity>(this, "MainUniversities", this.FilterMainUniversities, this.AttachMainUniversities, this.DetachMainUniversities);
                }
                return this._mainUniversities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(200)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="State"/> entity.
        /// </summary>
        [Association("State_University", "IdState", "IdState", IsForeignKey=true)]
        [XmlIgnore()]
        public State State
        {
            get
            {
                if ((this._state == null))
                {
                    this._state = new EntityRef<State>(this, "State", this.FilterState);
                }
                return this._state.Entity;
            }
            set
            {
                State previous = this.State;
                if ((previous != value))
                {
                    this.ValidateProperty("State", value);
                    if ((previous != null))
                    {
                        this._state.Entity = null;
                        previous.Universities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdState = value.IdState;
                    }
                    else
                    {
                        this.IdState = default(int);
                    }
                    this._state.Entity = value;
                    if ((value != null))
                    {
                        value.Universities.Add(this);
                    }
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        private void AttachMainUniversities(MainUniversity entity)
        {
            entity.University = this;
        }
        
        private void DetachMainUniversities(MainUniversity entity)
        {
            entity.University = null;
        }
        
        private bool FilterMainUniversities(MainUniversity entity)
        {
            return (entity.IdUniversity == this.IdUniversity);
        }
        
        private bool FilterState(State entity)
        {
            return (entity.IdState == this.IdState);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._idUniversity;
        }
    }
    
    /// <summary>
    /// The 'Year' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MsftDashboard.Web.Models")]
    public sealed partial class Year : Entity
    {
        
        private int _id;
        
        private int _year1;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnYear1Changing(int value);
        partial void OnYear1Changed();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Year"/> class.
        /// </summary>
        public Year()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Year1' value.
        /// </summary>
        [DataMember()]
        public int Year1
        {
            get
            {
                return this._year1;
            }
            set
            {
                if ((this._year1 != value))
                {
                    this.OnYear1Changing(value);
                    this.RaiseDataMemberChanging("Year1");
                    this.ValidateProperty("Year1", value);
                    this._year1 = value;
                    this.RaiseDataMemberChanged("Year1");
                    this.OnYear1Changed();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace MsftDashboard.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using MsftDashboard.Web.Models;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'DBService' DomainService.
    /// </summary>
    public sealed partial class DBContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DBContext"/> class.
        /// </summary>
        public DBContext() : 
                this(new WebDomainClient<IDBServiceContract>(new Uri("MsftDashboard-Web-Services-DBService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DBContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DBService service URI.</param>
        public DBContext(Uri serviceUri) : 
                this(new WebDomainClient<IDBServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DBContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DBContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CapacitationCenterInformation"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<CapacitationCenterInformation> CapacitationCenterInformations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CapacitationCenterInformation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CapacitationCenter"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<CapacitationCenter> CapacitationCenters
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CapacitationCenter>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Competition"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Competition> Competitions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Competition>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Competitor"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Competitor> Competitors
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Competitor>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Conectivity"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Conectivity> Conectivities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Conectivity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Contact"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Contact> Contacts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Contact>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EducationInformationState"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<EducationInformationState> EducationInformationStates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EducationInformationState>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="StateEconomicInfo"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<StateEconomicInfo> StateEconomicInfos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<StateEconomicInfo>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="EnlaceTest"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<EnlaceTest> EnlaceTests
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EnlaceTest>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MainUniversity"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<MainUniversity> MainUniversities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MainUniversity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MexicoAgreement"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<MexicoAgreement> MexicoAgreements
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MexicoAgreement>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MicrosoftProgramState"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<MicrosoftProgramState> MicrosoftProgramStates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MicrosoftProgramState>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Month"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Month> Months
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Month>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Municipality"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Municipality> Municipalities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Municipality>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OpenSourceStateCommunity"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<OpenSourceStateCommunity> OpenSourceStateCommunities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OpenSourceStateCommunity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OpenSourceStateProvider"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<OpenSourceStateProvider> OpenSourceStateProviders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OpenSourceStateProvider>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OpenSourceState"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<OpenSourceState> OpenSourceStates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OpenSourceState>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Organization"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Organization> Organizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Organization>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Owner"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Owner> Owners
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Owner>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Partner"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Partner> Partners
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Partner>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Penetration"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Penetration> Penetrations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Penetration>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PoliticalInformationMunicipality"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<PoliticalInformationMunicipality> PoliticalInformationMunicipalities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PoliticalInformationMunicipality>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PoliticalInformationStateFile"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<PoliticalInformationStateFile> PoliticalInformationStateFiles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PoliticalInformationStateFile>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PoliticalInformationState"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<PoliticalInformationState> PoliticalInformationStates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PoliticalInformationState>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PoliticalParty"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<PoliticalParty> PoliticalParties
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PoliticalParty>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PopulationAttended"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<PopulationAttended> PopulationAttendeds
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PopulationAttended>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Program"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Program> Programs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Program>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SchoolGrade"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SchoolGrade> SchoolGrades
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SchoolGrade>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SchoolLevel"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SchoolLevel> SchoolLevels
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SchoolLevel>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SchoolsInformation"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SchoolsInformation> SchoolsInformations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SchoolsInformation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SchoolType"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SchoolType> SchoolTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SchoolType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SEPProjectState"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SEPProjectState> SEPProjectStates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SEPProjectState>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SocialCause"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SocialCause> SocialCauses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SocialCause>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SocialOrganizationInformation"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SocialOrganizationInformation> SocialOrganizationInformations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SocialOrganizationInformation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SocialOrganization"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<SocialOrganization> SocialOrganizations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SocialOrganization>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Source"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Source> Sources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Source>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="StateProgram"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<StateProgram> StatePrograms
        {
            get
            {
                return base.EntityContainer.GetEntitySet<StateProgram>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="State"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<State> States
        {
            get
            {
                return base.EntityContainer.GetEntitySet<State>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="StudentsInformation"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<StudentsInformation> StudentsInformations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<StudentsInformation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TeachersInformation"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<TeachersInformation> TeachersInformations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TeachersInformation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TypeAgreement"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<TypeAgreement> TypeAgreements
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TypeAgreement>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TypeProduct"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<TypeProduct> TypeProducts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TypeProduct>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TypeSepProject"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<TypeSepProject> TypeSepProjects
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TypeSepProject>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TypeSource"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<TypeSource> TypeSources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TypeSource>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="University"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<University> Universities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<University>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Year"/> entity instances that have been loaded into this <see cref="DBContext"/> instance.
        /// </summary>
        public EntitySet<Year> Years
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Year>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CapacitationCenterInformation"/> entity instances using the 'GetCapacitationCenterInformations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CapacitationCenterInformation"/> entity instances.</returns>
        public EntityQuery<CapacitationCenterInformation> GetCapacitationCenterInformationsQuery()
        {
            this.ValidateMethod("GetCapacitationCenterInformationsQuery", null);
            return base.CreateQuery<CapacitationCenterInformation>("GetCapacitationCenterInformations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CapacitationCenterInformation"/> entity instances using the 'GetCapacitationCenterInformationsById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CapacitationCenterInformation"/> entity instances.</returns>
        public EntityQuery<CapacitationCenterInformation> GetCapacitationCenterInformationsByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetCapacitationCenterInformationsByIdQuery", parameters);
            return base.CreateQuery<CapacitationCenterInformation>("GetCapacitationCenterInformationsById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CapacitationCenter"/> entity instances using the 'GetCapacitationCenters' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CapacitationCenter"/> entity instances.</returns>
        public EntityQuery<CapacitationCenter> GetCapacitationCentersQuery()
        {
            this.ValidateMethod("GetCapacitationCentersQuery", null);
            return base.CreateQuery<CapacitationCenter>("GetCapacitationCenters", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Competition"/> entity instances using the 'GetCompetitions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Competition"/> entity instances.</returns>
        public EntityQuery<Competition> GetCompetitionsQuery()
        {
            this.ValidateMethod("GetCompetitionsQuery", null);
            return base.CreateQuery<Competition>("GetCompetitions", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Competition"/> entity instances using the 'GetCompetitionsByDate' query.
        /// </summary>
        /// <param name="initialDate">The value for the 'initialDate' parameter of the query.</param>
        /// <param name="finalDate">The value for the 'finalDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Competition"/> entity instances.</returns>
        public EntityQuery<Competition> GetCompetitionsByDateQuery(DateTime initialDate, DateTime finalDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("initialDate", initialDate);
            parameters.Add("finalDate", finalDate);
            this.ValidateMethod("GetCompetitionsByDateQuery", parameters);
            return base.CreateQuery<Competition>("GetCompetitionsByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Competition"/> entity instances using the 'GetCompetitionsId' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Competition"/> entity instances.</returns>
        public EntityQuery<Competition> GetCompetitionsIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetCompetitionsIdQuery", parameters);
            return base.CreateQuery<Competition>("GetCompetitionsId", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Competitor"/> entity instances using the 'GetCompetitors' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Competitor"/> entity instances.</returns>
        public EntityQuery<Competitor> GetCompetitorsQuery()
        {
            this.ValidateMethod("GetCompetitorsQuery", null);
            return base.CreateQuery<Competitor>("GetCompetitors", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Conectivity"/> entity instances using the 'GetConectivities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Conectivity"/> entity instances.</returns>
        public EntityQuery<Conectivity> GetConectivitiesQuery()
        {
            this.ValidateMethod("GetConectivitiesQuery", null);
            return base.CreateQuery<Conectivity>("GetConectivities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContacts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactsQuery()
        {
            this.ValidateMethod("GetContactsQuery", null);
            return base.CreateQuery<Contact>("GetContacts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContactsById' query.
        /// </summary>
        /// <param name="idContact">The value for the 'idContact' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactsByIdQuery(int idContact)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("idContact", idContact);
            this.ValidateMethod("GetContactsByIdQuery", parameters);
            return base.CreateQuery<Contact>("GetContactsById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EducationInformationState"/> entity instances using the 'GetCurrentEducationInformationStatesByIdState' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EducationInformationState"/> entity instances.</returns>
        public EntityQuery<EducationInformationState> GetCurrentEducationInformationStatesByIdStateQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetCurrentEducationInformationStatesByIdStateQuery", parameters);
            return base.CreateQuery<EducationInformationState>("GetCurrentEducationInformationStatesByIdState", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateEconomicInfo"/> entity instances using the 'GetCurrentStateEconomicInfoByIdState' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateEconomicInfo"/> entity instances.</returns>
        public EntityQuery<StateEconomicInfo> GetCurrentStateEconomicInfoByIdStateQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetCurrentStateEconomicInfoByIdStateQuery", parameters);
            return base.CreateQuery<StateEconomicInfo>("GetCurrentStateEconomicInfoByIdState", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EducationInformationState"/> entity instances using the 'GetEducationInformationStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EducationInformationState"/> entity instances.</returns>
        public EntityQuery<EducationInformationState> GetEducationInformationStatesQuery()
        {
            this.ValidateMethod("GetEducationInformationStatesQuery", null);
            return base.CreateQuery<EducationInformationState>("GetEducationInformationStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EducationInformationState"/> entity instances using the 'GetEducationInformationStatesById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EducationInformationState"/> entity instances.</returns>
        public EntityQuery<EducationInformationState> GetEducationInformationStatesByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetEducationInformationStatesByIdQuery", parameters);
            return base.CreateQuery<EducationInformationState>("GetEducationInformationStatesById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EnlaceTest"/> entity instances using the 'GetEnlaceTests' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EnlaceTest"/> entity instances.</returns>
        public EntityQuery<EnlaceTest> GetEnlaceTestsQuery()
        {
            this.ValidateMethod("GetEnlaceTestsQuery", null);
            return base.CreateQuery<EnlaceTest>("GetEnlaceTests", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MainUniversity"/> entity instances using the 'GetMainUniversities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MainUniversity"/> entity instances.</returns>
        public EntityQuery<MainUniversity> GetMainUniversitiesQuery()
        {
            this.ValidateMethod("GetMainUniversitiesQuery", null);
            return base.CreateQuery<MainUniversity>("GetMainUniversities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MexicoAgreement"/> entity instances using the 'GetMexicoAgreements' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MexicoAgreement"/> entity instances.</returns>
        public EntityQuery<MexicoAgreement> GetMexicoAgreementsQuery()
        {
            this.ValidateMethod("GetMexicoAgreementsQuery", null);
            return base.CreateQuery<MexicoAgreement>("GetMexicoAgreements", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MexicoAgreement"/> entity instances using the 'GetMexicoAgreementsByDate' query.
        /// </summary>
        /// <param name="initialDate">The value for the 'initialDate' parameter of the query.</param>
        /// <param name="finalDate">The value for the 'finalDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MexicoAgreement"/> entity instances.</returns>
        public EntityQuery<MexicoAgreement> GetMexicoAgreementsByDateQuery(DateTime initialDate, DateTime finalDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("initialDate", initialDate);
            parameters.Add("finalDate", finalDate);
            this.ValidateMethod("GetMexicoAgreementsByDateQuery", parameters);
            return base.CreateQuery<MexicoAgreement>("GetMexicoAgreementsByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MexicoAgreement"/> entity instances using the 'GetMexicoAgreementsById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MexicoAgreement"/> entity instances.</returns>
        public EntityQuery<MexicoAgreement> GetMexicoAgreementsByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetMexicoAgreementsByIdQuery", parameters);
            return base.CreateQuery<MexicoAgreement>("GetMexicoAgreementsById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MicrosoftProgramState"/> entity instances using the 'GetMicrosoftProgramStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MicrosoftProgramState"/> entity instances.</returns>
        public EntityQuery<MicrosoftProgramState> GetMicrosoftProgramStatesQuery()
        {
            this.ValidateMethod("GetMicrosoftProgramStatesQuery", null);
            return base.CreateQuery<MicrosoftProgramState>("GetMicrosoftProgramStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MicrosoftProgramState"/> entity instances using the 'GetMicrosoftProgramStatesByDate' query.
        /// </summary>
        /// <param name="initialDate">The value for the 'initialDate' parameter of the query.</param>
        /// <param name="finalDate">The value for the 'finalDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MicrosoftProgramState"/> entity instances.</returns>
        public EntityQuery<MicrosoftProgramState> GetMicrosoftProgramStatesByDateQuery(DateTime initialDate, DateTime finalDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("initialDate", initialDate);
            parameters.Add("finalDate", finalDate);
            this.ValidateMethod("GetMicrosoftProgramStatesByDateQuery", parameters);
            return base.CreateQuery<MicrosoftProgramState>("GetMicrosoftProgramStatesByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MicrosoftProgramState"/> entity instances using the 'GetMicrosoftProgramStatesById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MicrosoftProgramState"/> entity instances.</returns>
        public EntityQuery<MicrosoftProgramState> GetMicrosoftProgramStatesByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetMicrosoftProgramStatesByIdQuery", parameters);
            return base.CreateQuery<MicrosoftProgramState>("GetMicrosoftProgramStatesById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MicrosoftProgramState"/> entity instances using the 'GetMicrosoftProgramStatesByIdState' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MicrosoftProgramState"/> entity instances.</returns>
        public EntityQuery<MicrosoftProgramState> GetMicrosoftProgramStatesByIdStateQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetMicrosoftProgramStatesByIdStateQuery", parameters);
            return base.CreateQuery<MicrosoftProgramState>("GetMicrosoftProgramStatesByIdState", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Month"/> entity instances using the 'GetMonths' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Month"/> entity instances.</returns>
        public EntityQuery<Month> GetMonthsQuery()
        {
            this.ValidateMethod("GetMonthsQuery", null);
            return base.CreateQuery<Month>("GetMonths", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Municipality"/> entity instances using the 'GetMunicipalities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Municipality"/> entity instances.</returns>
        public EntityQuery<Municipality> GetMunicipalitiesQuery()
        {
            this.ValidateMethod("GetMunicipalitiesQuery", null);
            return base.CreateQuery<Municipality>("GetMunicipalities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Municipality"/> entity instances using the 'GetMunicipalitiesById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Municipality"/> entity instances.</returns>
        public EntityQuery<Municipality> GetMunicipalitiesByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetMunicipalitiesByIdQuery", parameters);
            return base.CreateQuery<Municipality>("GetMunicipalitiesById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OpenSourceStateCommunity"/> entity instances using the 'GetOpenSourceStateCommunities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OpenSourceStateCommunity"/> entity instances.</returns>
        public EntityQuery<OpenSourceStateCommunity> GetOpenSourceStateCommunitiesQuery()
        {
            this.ValidateMethod("GetOpenSourceStateCommunitiesQuery", null);
            return base.CreateQuery<OpenSourceStateCommunity>("GetOpenSourceStateCommunities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OpenSourceStateCommunity"/> entity instances using the 'GetOpenSourceStateCommunitiesById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OpenSourceStateCommunity"/> entity instances.</returns>
        public EntityQuery<OpenSourceStateCommunity> GetOpenSourceStateCommunitiesByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetOpenSourceStateCommunitiesByIdQuery", parameters);
            return base.CreateQuery<OpenSourceStateCommunity>("GetOpenSourceStateCommunitiesById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OpenSourceStateProvider"/> entity instances using the 'GetOpenSourceStateProviders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OpenSourceStateProvider"/> entity instances.</returns>
        public EntityQuery<OpenSourceStateProvider> GetOpenSourceStateProvidersQuery()
        {
            this.ValidateMethod("GetOpenSourceStateProvidersQuery", null);
            return base.CreateQuery<OpenSourceStateProvider>("GetOpenSourceStateProviders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OpenSourceStateProvider"/> entity instances using the 'GetOpenSourceStateProvidersById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OpenSourceStateProvider"/> entity instances.</returns>
        public EntityQuery<OpenSourceStateProvider> GetOpenSourceStateProvidersByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetOpenSourceStateProvidersByIdQuery", parameters);
            return base.CreateQuery<OpenSourceStateProvider>("GetOpenSourceStateProvidersById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OpenSourceState"/> entity instances using the 'GetOpenSourceStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OpenSourceState"/> entity instances.</returns>
        public EntityQuery<OpenSourceState> GetOpenSourceStatesQuery()
        {
            this.ValidateMethod("GetOpenSourceStatesQuery", null);
            return base.CreateQuery<OpenSourceState>("GetOpenSourceStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OpenSourceState"/> entity instances using the 'GetOpenSourceStatesById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OpenSourceState"/> entity instances.</returns>
        public EntityQuery<OpenSourceState> GetOpenSourceStatesByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetOpenSourceStatesByIdQuery", parameters);
            return base.CreateQuery<OpenSourceState>("GetOpenSourceStatesById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Organization"/> entity instances using the 'GetOrganizations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Organization"/> entity instances.</returns>
        public EntityQuery<Organization> GetOrganizationsQuery()
        {
            this.ValidateMethod("GetOrganizationsQuery", null);
            return base.CreateQuery<Organization>("GetOrganizations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Owner"/> entity instances using the 'GetOwners' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Owner"/> entity instances.</returns>
        public EntityQuery<Owner> GetOwnersQuery()
        {
            this.ValidateMethod("GetOwnersQuery", null);
            return base.CreateQuery<Owner>("GetOwners", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Partner"/> entity instances using the 'GetPartners' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Partner"/> entity instances.</returns>
        public EntityQuery<Partner> GetPartnersQuery()
        {
            this.ValidateMethod("GetPartnersQuery", null);
            return base.CreateQuery<Partner>("GetPartners", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Penetration"/> entity instances using the 'GetPenetrations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Penetration"/> entity instances.</returns>
        public EntityQuery<Penetration> GetPenetrationsQuery()
        {
            this.ValidateMethod("GetPenetrationsQuery", null);
            return base.CreateQuery<Penetration>("GetPenetrations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalInformationMunicipality"/> entity instances using the 'GetPoliticalInformationMunicipalities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalInformationMunicipality"/> entity instances.</returns>
        public EntityQuery<PoliticalInformationMunicipality> GetPoliticalInformationMunicipalitiesQuery()
        {
            this.ValidateMethod("GetPoliticalInformationMunicipalitiesQuery", null);
            return base.CreateQuery<PoliticalInformationMunicipality>("GetPoliticalInformationMunicipalities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalInformationMunicipality"/> entity instances using the 'GetPoliticalInformationMunicipalitiesByIdPoliticState' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalInformationMunicipality"/> entity instances.</returns>
        public EntityQuery<PoliticalInformationMunicipality> GetPoliticalInformationMunicipalitiesByIdPoliticStateQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetPoliticalInformationMunicipalitiesByIdPoliticStateQuery", parameters);
            return base.CreateQuery<PoliticalInformationMunicipality>("GetPoliticalInformationMunicipalitiesByIdPoliticState", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalInformationStateFile"/> entity instances using the 'GetPoliticalInformationStateFiles' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalInformationStateFile"/> entity instances.</returns>
        public EntityQuery<PoliticalInformationStateFile> GetPoliticalInformationStateFilesQuery()
        {
            this.ValidateMethod("GetPoliticalInformationStateFilesQuery", null);
            return base.CreateQuery<PoliticalInformationStateFile>("GetPoliticalInformationStateFiles", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalInformationState"/> entity instances using the 'GetPoliticalInformationStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalInformationState"/> entity instances.</returns>
        public EntityQuery<PoliticalInformationState> GetPoliticalInformationStatesQuery()
        {
            this.ValidateMethod("GetPoliticalInformationStatesQuery", null);
            return base.CreateQuery<PoliticalInformationState>("GetPoliticalInformationStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalInformationState"/> entity instances using the 'GetPoliticalInformationStatesByDate' query.
        /// </summary>
        /// <param name="periodDate">The value for the 'periodDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalInformationState"/> entity instances.</returns>
        public EntityQuery<PoliticalInformationState> GetPoliticalInformationStatesByDateQuery(DateTime periodDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("periodDate", periodDate);
            this.ValidateMethod("GetPoliticalInformationStatesByDateQuery", parameters);
            return base.CreateQuery<PoliticalInformationState>("GetPoliticalInformationStatesByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalInformationState"/> entity instances using the 'GetPoliticalInformationStatesById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalInformationState"/> entity instances.</returns>
        public EntityQuery<PoliticalInformationState> GetPoliticalInformationStatesByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetPoliticalInformationStatesByIdQuery", parameters);
            return base.CreateQuery<PoliticalInformationState>("GetPoliticalInformationStatesById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalParty"/> entity instances using the 'GetPoliticalParties' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalParty"/> entity instances.</returns>
        public EntityQuery<PoliticalParty> GetPoliticalPartiesQuery()
        {
            this.ValidateMethod("GetPoliticalPartiesQuery", null);
            return base.CreateQuery<PoliticalParty>("GetPoliticalParties", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PoliticalParty"/> entity instances using the 'GetPoliticalPartiesById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PoliticalParty"/> entity instances.</returns>
        public EntityQuery<PoliticalParty> GetPoliticalPartiesByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetPoliticalPartiesByIdQuery", parameters);
            return base.CreateQuery<PoliticalParty>("GetPoliticalPartiesById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PopulationAttended"/> entity instances using the 'GetPopulationAttendeds' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PopulationAttended"/> entity instances.</returns>
        public EntityQuery<PopulationAttended> GetPopulationAttendedsQuery()
        {
            this.ValidateMethod("GetPopulationAttendedsQuery", null);
            return base.CreateQuery<PopulationAttended>("GetPopulationAttendeds", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsQuery()
        {
            this.ValidateMethod("GetProductsQuery", null);
            return base.CreateQuery<Product>("GetProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProductsByIdTypeProduct' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsByIdTypeProductQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetProductsByIdTypeProductQuery", parameters);
            return base.CreateQuery<Product>("GetProductsByIdTypeProduct", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Program"/> entity instances using the 'GetPrograms' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Program"/> entity instances.</returns>
        public EntityQuery<Program> GetProgramsQuery()
        {
            this.ValidateMethod("GetProgramsQuery", null);
            return base.CreateQuery<Program>("GetPrograms", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SchoolGrade"/> entity instances using the 'GetSchoolGrades' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SchoolGrade"/> entity instances.</returns>
        public EntityQuery<SchoolGrade> GetSchoolGradesQuery()
        {
            this.ValidateMethod("GetSchoolGradesQuery", null);
            return base.CreateQuery<SchoolGrade>("GetSchoolGrades", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SchoolLevel"/> entity instances using the 'GetSchoolLevels' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SchoolLevel"/> entity instances.</returns>
        public EntityQuery<SchoolLevel> GetSchoolLevelsQuery()
        {
            this.ValidateMethod("GetSchoolLevelsQuery", null);
            return base.CreateQuery<SchoolLevel>("GetSchoolLevels", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SchoolsInformation"/> entity instances using the 'GetSchoolsInformations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SchoolsInformation"/> entity instances.</returns>
        public EntityQuery<SchoolsInformation> GetSchoolsInformationsQuery()
        {
            this.ValidateMethod("GetSchoolsInformationsQuery", null);
            return base.CreateQuery<SchoolsInformation>("GetSchoolsInformations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SchoolType"/> entity instances using the 'GetSchoolTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SchoolType"/> entity instances.</returns>
        public EntityQuery<SchoolType> GetSchoolTypesQuery()
        {
            this.ValidateMethod("GetSchoolTypesQuery", null);
            return base.CreateQuery<SchoolType>("GetSchoolTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SEPProjectState"/> entity instances using the 'GetSEPProjectStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SEPProjectState"/> entity instances.</returns>
        public EntityQuery<SEPProjectState> GetSEPProjectStatesQuery()
        {
            this.ValidateMethod("GetSEPProjectStatesQuery", null);
            return base.CreateQuery<SEPProjectState>("GetSEPProjectStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SocialCause"/> entity instances using the 'GetSocialCauses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SocialCause"/> entity instances.</returns>
        public EntityQuery<SocialCause> GetSocialCausesQuery()
        {
            this.ValidateMethod("GetSocialCausesQuery", null);
            return base.CreateQuery<SocialCause>("GetSocialCauses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SocialOrganizationInformation"/> entity instances using the 'GetSocialOrganizationInformations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SocialOrganizationInformation"/> entity instances.</returns>
        public EntityQuery<SocialOrganizationInformation> GetSocialOrganizationInformationsQuery()
        {
            this.ValidateMethod("GetSocialOrganizationInformationsQuery", null);
            return base.CreateQuery<SocialOrganizationInformation>("GetSocialOrganizationInformations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SocialOrganizationInformation"/> entity instances using the 'GetSocialOrganizationInformationsById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SocialOrganizationInformation"/> entity instances.</returns>
        public EntityQuery<SocialOrganizationInformation> GetSocialOrganizationInformationsByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetSocialOrganizationInformationsByIdQuery", parameters);
            return base.CreateQuery<SocialOrganizationInformation>("GetSocialOrganizationInformationsById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SocialOrganization"/> entity instances using the 'GetSocialOrganizations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SocialOrganization"/> entity instances.</returns>
        public EntityQuery<SocialOrganization> GetSocialOrganizationsQuery()
        {
            this.ValidateMethod("GetSocialOrganizationsQuery", null);
            return base.CreateQuery<SocialOrganization>("GetSocialOrganizations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SocialOrganization"/> entity instances using the 'GetSocialOrganizationsById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SocialOrganization"/> entity instances.</returns>
        public EntityQuery<SocialOrganization> GetSocialOrganizationsByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetSocialOrganizationsByIdQuery", parameters);
            return base.CreateQuery<SocialOrganization>("GetSocialOrganizationsById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Source"/> entity instances using the 'GetSources' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Source"/> entity instances.</returns>
        public EntityQuery<Source> GetSourcesQuery()
        {
            this.ValidateMethod("GetSourcesQuery", null);
            return base.CreateQuery<Source>("GetSources", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateEconomicInfo"/> entity instances using the 'GetStateEconomicByIdState' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateEconomicInfo"/> entity instances.</returns>
        public EntityQuery<StateEconomicInfo> GetStateEconomicByIdStateQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetStateEconomicByIdStateQuery", parameters);
            return base.CreateQuery<StateEconomicInfo>("GetStateEconomicByIdState", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateEconomicInfo"/> entity instances using the 'GetStateEconomicInfoById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateEconomicInfo"/> entity instances.</returns>
        public EntityQuery<StateEconomicInfo> GetStateEconomicInfoByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetStateEconomicInfoByIdQuery", parameters);
            return base.CreateQuery<StateEconomicInfo>("GetStateEconomicInfoById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateEconomicInfo"/> entity instances using the 'GetStateEconomicInfoes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateEconomicInfo"/> entity instances.</returns>
        public EntityQuery<StateEconomicInfo> GetStateEconomicInfoesQuery()
        {
            this.ValidateMethod("GetStateEconomicInfoesQuery", null);
            return base.CreateQuery<StateEconomicInfo>("GetStateEconomicInfoes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateProgram"/> entity instances using the 'GetStatePrograms' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateProgram"/> entity instances.</returns>
        public EntityQuery<StateProgram> GetStateProgramsQuery()
        {
            this.ValidateMethod("GetStateProgramsQuery", null);
            return base.CreateQuery<StateProgram>("GetStatePrograms", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateProgram"/> entity instances using the 'GetStateProgramsByDate' query.
        /// </summary>
        /// <param name="initialDate">The value for the 'initialDate' parameter of the query.</param>
        /// <param name="finalDate">The value for the 'finalDate' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateProgram"/> entity instances.</returns>
        public EntityQuery<StateProgram> GetStateProgramsByDateQuery(DateTime initialDate, DateTime finalDate)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("initialDate", initialDate);
            parameters.Add("finalDate", finalDate);
            this.ValidateMethod("GetStateProgramsByDateQuery", parameters);
            return base.CreateQuery<StateProgram>("GetStateProgramsByDate", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateProgram"/> entity instances using the 'GetStateProgramsById' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateProgram"/> entity instances.</returns>
        public EntityQuery<StateProgram> GetStateProgramsByIdQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetStateProgramsByIdQuery", parameters);
            return base.CreateQuery<StateProgram>("GetStateProgramsById", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StateProgram"/> entity instances using the 'GetStateProgramsByIdState' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StateProgram"/> entity instances.</returns>
        public EntityQuery<StateProgram> GetStateProgramsByIdStateQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetStateProgramsByIdStateQuery", parameters);
            return base.CreateQuery<StateProgram>("GetStateProgramsByIdState", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="State"/> entity instances using the 'GetStates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="State"/> entity instances.</returns>
        public EntityQuery<State> GetStatesQuery()
        {
            this.ValidateMethod("GetStatesQuery", null);
            return base.CreateQuery<State>("GetStates", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StudentsInformation"/> entity instances using the 'GetStudentsInformations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StudentsInformation"/> entity instances.</returns>
        public EntityQuery<StudentsInformation> GetStudentsInformationsQuery()
        {
            this.ValidateMethod("GetStudentsInformationsQuery", null);
            return base.CreateQuery<StudentsInformation>("GetStudentsInformations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TeachersInformation"/> entity instances using the 'GetTeachersInformations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TeachersInformation"/> entity instances.</returns>
        public EntityQuery<TeachersInformation> GetTeachersInformationsQuery()
        {
            this.ValidateMethod("GetTeachersInformationsQuery", null);
            return base.CreateQuery<TeachersInformation>("GetTeachersInformations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TypeAgreement"/> entity instances using the 'GetTypeAgreements' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TypeAgreement"/> entity instances.</returns>
        public EntityQuery<TypeAgreement> GetTypeAgreementsQuery()
        {
            this.ValidateMethod("GetTypeAgreementsQuery", null);
            return base.CreateQuery<TypeAgreement>("GetTypeAgreements", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TypeProduct"/> entity instances using the 'GetTypeProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TypeProduct"/> entity instances.</returns>
        public EntityQuery<TypeProduct> GetTypeProductsQuery()
        {
            this.ValidateMethod("GetTypeProductsQuery", null);
            return base.CreateQuery<TypeProduct>("GetTypeProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TypeSepProject"/> entity instances using the 'GetTypeSepProjects' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TypeSepProject"/> entity instances.</returns>
        public EntityQuery<TypeSepProject> GetTypeSepProjectsQuery()
        {
            this.ValidateMethod("GetTypeSepProjectsQuery", null);
            return base.CreateQuery<TypeSepProject>("GetTypeSepProjects", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TypeSource"/> entity instances using the 'GetTypeSources' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TypeSource"/> entity instances.</returns>
        public EntityQuery<TypeSource> GetTypeSourcesQuery()
        {
            this.ValidateMethod("GetTypeSourcesQuery", null);
            return base.CreateQuery<TypeSource>("GetTypeSources", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="University"/> entity instances using the 'GetUniversities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="University"/> entity instances.</returns>
        public EntityQuery<University> GetUniversitiesQuery()
        {
            this.ValidateMethod("GetUniversitiesQuery", null);
            return base.CreateQuery<University>("GetUniversities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="University"/> entity instances using the 'GetUniversitiesByIdState' query.
        /// </summary>
        /// <param name="Id">The value for the 'Id' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="University"/> entity instances.</returns>
        public EntityQuery<University> GetUniversitiesByIdStateQuery(int Id)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Id", Id);
            this.ValidateMethod("GetUniversitiesByIdStateQuery", parameters);
            return base.CreateQuery<University>("GetUniversitiesByIdState", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Year"/> entity instances using the 'GetYears' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Year"/> entity instances.</returns>
        public EntityQuery<Year> GetYearsQuery()
        {
            this.ValidateMethod("GetYearsQuery", null);
            return base.CreateQuery<Year>("GetYears", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DBContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DBService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDBServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCapacitationCenterInformations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCapacitationCenterInformationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCapacitationCenterInformations", ReplyAction="http://tempuri.org/DBService/GetCapacitationCenterInformationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCapacitationCenterInformations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCapacitationCenterInformations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCapacitationCenterInformations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCapacitationCenterInformations' operation.</returns>
            QueryResult<CapacitationCenterInformation> EndGetCapacitationCenterInformations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCapacitationCenterInformationsById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCapacitationCenterInformationsByIdDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCapacitationCenterInformationsById", ReplyAction="http://tempuri.org/DBService/GetCapacitationCenterInformationsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetCapacitationCenterInformationsById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCapacitationCenterInformationsById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCapacitationCenterInformationsById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCapacitationCenterInformationsById' operation.</returns>
            QueryResult<CapacitationCenterInformation> EndGetCapacitationCenterInformationsById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCapacitationCenters' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCapacitationCentersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCapacitationCenters", ReplyAction="http://tempuri.org/DBService/GetCapacitationCentersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCapacitationCenters(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCapacitationCenters'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCapacitationCenters'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCapacitationCenters' operation.</returns>
            QueryResult<CapacitationCenter> EndGetCapacitationCenters(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompetitions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCompetitionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCompetitions", ReplyAction="http://tempuri.org/DBService/GetCompetitionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompetitions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompetitions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompetitions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompetitions' operation.</returns>
            QueryResult<Competition> EndGetCompetitions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompetitionsByDate' operation.
            /// </summary>
            /// <param name="initialDate">The value for the 'initialDate' parameter of this action.</param>
            /// <param name="finalDate">The value for the 'finalDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCompetitionsByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCompetitionsByDate", ReplyAction="http://tempuri.org/DBService/GetCompetitionsByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompetitionsByDate(DateTime initialDate, DateTime finalDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompetitionsByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompetitionsByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompetitionsByDate' operation.</returns>
            QueryResult<Competition> EndGetCompetitionsByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompetitionsId' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCompetitionsIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCompetitionsId", ReplyAction="http://tempuri.org/DBService/GetCompetitionsIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompetitionsId(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompetitionsId'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompetitionsId'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompetitionsId' operation.</returns>
            QueryResult<Competition> EndGetCompetitionsId(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompetitors' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCompetitorsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCompetitors", ReplyAction="http://tempuri.org/DBService/GetCompetitorsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompetitors(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompetitors'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompetitors'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompetitors' operation.</returns>
            QueryResult<Competitor> EndGetCompetitors(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetConectivities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetConectivitiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetConectivities", ReplyAction="http://tempuri.org/DBService/GetConectivitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetConectivities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConectivities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConectivities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConectivities' operation.</returns>
            QueryResult<Conectivity> EndGetConectivities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContacts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetContactsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetContacts", ReplyAction="http://tempuri.org/DBService/GetContactsResponse")]
            [WebGet()]
            IAsyncResult BeginGetContacts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContacts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContacts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContacts' operation.</returns>
            QueryResult<Contact> EndGetContacts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactsById' operation.
            /// </summary>
            /// <param name="idContact">The value for the 'idContact' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetContactsByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetContactsById", ReplyAction="http://tempuri.org/DBService/GetContactsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetContactsById(int idContact, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactsById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactsById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContactsById' operation.</returns>
            QueryResult<Contact> EndGetContactsById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCurrentEducationInformationStatesByIdState' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCurrentEducationInformationStatesByIdStateDomainS" +
                "erviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCurrentEducationInformationStatesByIdState", ReplyAction="http://tempuri.org/DBService/GetCurrentEducationInformationStatesByIdStateRespons" +
                "e")]
            [WebGet()]
            IAsyncResult BeginGetCurrentEducationInformationStatesByIdState(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCurrentEducationInformationStatesByIdState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCurrentEducationInformationStatesByIdState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCurrentEducationInformationStatesByIdState' operation.</returns>
            QueryResult<EducationInformationState> EndGetCurrentEducationInformationStatesByIdState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCurrentStateEconomicInfoByIdState' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetCurrentStateEconomicInfoByIdStateDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetCurrentStateEconomicInfoByIdState", ReplyAction="http://tempuri.org/DBService/GetCurrentStateEconomicInfoByIdStateResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrentStateEconomicInfoByIdState(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCurrentStateEconomicInfoByIdState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCurrentStateEconomicInfoByIdState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCurrentStateEconomicInfoByIdState' operation.</returns>
            QueryResult<StateEconomicInfo> EndGetCurrentStateEconomicInfoByIdState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEducationInformationStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetEducationInformationStatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetEducationInformationStates", ReplyAction="http://tempuri.org/DBService/GetEducationInformationStatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEducationInformationStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEducationInformationStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEducationInformationStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEducationInformationStates' operation.</returns>
            QueryResult<EducationInformationState> EndGetEducationInformationStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEducationInformationStatesById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetEducationInformationStatesByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetEducationInformationStatesById", ReplyAction="http://tempuri.org/DBService/GetEducationInformationStatesByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetEducationInformationStatesById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEducationInformationStatesById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEducationInformationStatesById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEducationInformationStatesById' operation.</returns>
            QueryResult<EducationInformationState> EndGetEducationInformationStatesById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEnlaceTests' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetEnlaceTestsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetEnlaceTests", ReplyAction="http://tempuri.org/DBService/GetEnlaceTestsResponse")]
            [WebGet()]
            IAsyncResult BeginGetEnlaceTests(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEnlaceTests'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEnlaceTests'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEnlaceTests' operation.</returns>
            QueryResult<EnlaceTest> EndGetEnlaceTests(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMainUniversities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMainUniversitiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMainUniversities", ReplyAction="http://tempuri.org/DBService/GetMainUniversitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMainUniversities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMainUniversities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMainUniversities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMainUniversities' operation.</returns>
            QueryResult<MainUniversity> EndGetMainUniversities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMexicoAgreements' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMexicoAgreementsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMexicoAgreements", ReplyAction="http://tempuri.org/DBService/GetMexicoAgreementsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMexicoAgreements(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMexicoAgreements'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMexicoAgreements'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMexicoAgreements' operation.</returns>
            QueryResult<MexicoAgreement> EndGetMexicoAgreements(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMexicoAgreementsByDate' operation.
            /// </summary>
            /// <param name="initialDate">The value for the 'initialDate' parameter of this action.</param>
            /// <param name="finalDate">The value for the 'finalDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMexicoAgreementsByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMexicoAgreementsByDate", ReplyAction="http://tempuri.org/DBService/GetMexicoAgreementsByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetMexicoAgreementsByDate(DateTime initialDate, DateTime finalDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMexicoAgreementsByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMexicoAgreementsByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMexicoAgreementsByDate' operation.</returns>
            QueryResult<MexicoAgreement> EndGetMexicoAgreementsByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMexicoAgreementsById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMexicoAgreementsByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMexicoAgreementsById", ReplyAction="http://tempuri.org/DBService/GetMexicoAgreementsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetMexicoAgreementsById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMexicoAgreementsById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMexicoAgreementsById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMexicoAgreementsById' operation.</returns>
            QueryResult<MexicoAgreement> EndGetMexicoAgreementsById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMicrosoftProgramStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMicrosoftProgramStatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMicrosoftProgramStates", ReplyAction="http://tempuri.org/DBService/GetMicrosoftProgramStatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMicrosoftProgramStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMicrosoftProgramStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMicrosoftProgramStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMicrosoftProgramStates' operation.</returns>
            QueryResult<MicrosoftProgramState> EndGetMicrosoftProgramStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMicrosoftProgramStatesByDate' operation.
            /// </summary>
            /// <param name="initialDate">The value for the 'initialDate' parameter of this action.</param>
            /// <param name="finalDate">The value for the 'finalDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMicrosoftProgramStatesByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMicrosoftProgramStatesByDate", ReplyAction="http://tempuri.org/DBService/GetMicrosoftProgramStatesByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetMicrosoftProgramStatesByDate(DateTime initialDate, DateTime finalDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMicrosoftProgramStatesByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMicrosoftProgramStatesByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMicrosoftProgramStatesByDate' operation.</returns>
            QueryResult<MicrosoftProgramState> EndGetMicrosoftProgramStatesByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMicrosoftProgramStatesById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMicrosoftProgramStatesByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMicrosoftProgramStatesById", ReplyAction="http://tempuri.org/DBService/GetMicrosoftProgramStatesByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetMicrosoftProgramStatesById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMicrosoftProgramStatesById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMicrosoftProgramStatesById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMicrosoftProgramStatesById' operation.</returns>
            QueryResult<MicrosoftProgramState> EndGetMicrosoftProgramStatesById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMicrosoftProgramStatesByIdState' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMicrosoftProgramStatesByIdStateDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMicrosoftProgramStatesByIdState", ReplyAction="http://tempuri.org/DBService/GetMicrosoftProgramStatesByIdStateResponse")]
            [WebGet()]
            IAsyncResult BeginGetMicrosoftProgramStatesByIdState(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMicrosoftProgramStatesByIdState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMicrosoftProgramStatesByIdState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMicrosoftProgramStatesByIdState' operation.</returns>
            QueryResult<MicrosoftProgramState> EndGetMicrosoftProgramStatesByIdState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMonths' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMonthsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMonths", ReplyAction="http://tempuri.org/DBService/GetMonthsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMonths(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMonths'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMonths'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMonths' operation.</returns>
            QueryResult<Month> EndGetMonths(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMunicipalities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMunicipalitiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMunicipalities", ReplyAction="http://tempuri.org/DBService/GetMunicipalitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMunicipalities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMunicipalities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMunicipalities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMunicipalities' operation.</returns>
            QueryResult<Municipality> EndGetMunicipalities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMunicipalitiesById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetMunicipalitiesByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetMunicipalitiesById", ReplyAction="http://tempuri.org/DBService/GetMunicipalitiesByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetMunicipalitiesById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMunicipalitiesById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMunicipalitiesById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMunicipalitiesById' operation.</returns>
            QueryResult<Municipality> EndGetMunicipalitiesById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpenSourceStateCommunities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOpenSourceStateCommunitiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOpenSourceStateCommunities", ReplyAction="http://tempuri.org/DBService/GetOpenSourceStateCommunitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpenSourceStateCommunities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpenSourceStateCommunities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpenSourceStateCommunities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpenSourceStateCommunities' operation.</returns>
            QueryResult<OpenSourceStateCommunity> EndGetOpenSourceStateCommunities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpenSourceStateCommunitiesById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOpenSourceStateCommunitiesByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOpenSourceStateCommunitiesById", ReplyAction="http://tempuri.org/DBService/GetOpenSourceStateCommunitiesByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpenSourceStateCommunitiesById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpenSourceStateCommunitiesById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpenSourceStateCommunitiesById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpenSourceStateCommunitiesById' operation.</returns>
            QueryResult<OpenSourceStateCommunity> EndGetOpenSourceStateCommunitiesById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpenSourceStateProviders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOpenSourceStateProvidersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOpenSourceStateProviders", ReplyAction="http://tempuri.org/DBService/GetOpenSourceStateProvidersResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpenSourceStateProviders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpenSourceStateProviders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpenSourceStateProviders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpenSourceStateProviders' operation.</returns>
            QueryResult<OpenSourceStateProvider> EndGetOpenSourceStateProviders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpenSourceStateProvidersById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOpenSourceStateProvidersByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOpenSourceStateProvidersById", ReplyAction="http://tempuri.org/DBService/GetOpenSourceStateProvidersByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpenSourceStateProvidersById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpenSourceStateProvidersById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpenSourceStateProvidersById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpenSourceStateProvidersById' operation.</returns>
            QueryResult<OpenSourceStateProvider> EndGetOpenSourceStateProvidersById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpenSourceStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOpenSourceStatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOpenSourceStates", ReplyAction="http://tempuri.org/DBService/GetOpenSourceStatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpenSourceStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpenSourceStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpenSourceStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpenSourceStates' operation.</returns>
            QueryResult<OpenSourceState> EndGetOpenSourceStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpenSourceStatesById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOpenSourceStatesByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOpenSourceStatesById", ReplyAction="http://tempuri.org/DBService/GetOpenSourceStatesByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpenSourceStatesById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpenSourceStatesById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpenSourceStatesById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpenSourceStatesById' operation.</returns>
            QueryResult<OpenSourceState> EndGetOpenSourceStatesById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrganizations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOrganizationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOrganizations", ReplyAction="http://tempuri.org/DBService/GetOrganizationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrganizations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrganizations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrganizations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrganizations' operation.</returns>
            QueryResult<Organization> EndGetOrganizations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOwners' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetOwnersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetOwners", ReplyAction="http://tempuri.org/DBService/GetOwnersResponse")]
            [WebGet()]
            IAsyncResult BeginGetOwners(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOwners'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOwners'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOwners' operation.</returns>
            QueryResult<Owner> EndGetOwners(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPartners' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPartnersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPartners", ReplyAction="http://tempuri.org/DBService/GetPartnersResponse")]
            [WebGet()]
            IAsyncResult BeginGetPartners(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPartners'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPartners'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPartners' operation.</returns>
            QueryResult<Partner> EndGetPartners(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPenetrations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPenetrationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPenetrations", ReplyAction="http://tempuri.org/DBService/GetPenetrationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPenetrations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPenetrations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPenetrations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPenetrations' operation.</returns>
            QueryResult<Penetration> EndGetPenetrations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalInformationMunicipalities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalInformationMunicipalitiesDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalInformationMunicipalities", ReplyAction="http://tempuri.org/DBService/GetPoliticalInformationMunicipalitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalInformationMunicipalities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalInformationMunicipalities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalInformationMunicipalities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalInformationMunicipalities' operation.</returns>
            QueryResult<PoliticalInformationMunicipality> EndGetPoliticalInformationMunicipalities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalInformationMunicipalitiesByIdPoliticState' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalInformationMunicipalitiesByIdPoliticStat" +
                "eDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalInformationMunicipalitiesByIdPoliticStat" +
                "e", ReplyAction="http://tempuri.org/DBService/GetPoliticalInformationMunicipalitiesByIdPoliticStat" +
                "eResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalInformationMunicipalitiesByIdPoliticState(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalInformationMunicipalitiesByIdPoliticState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalInformationMunicipalitiesByIdPoliticState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalInformationMunicipalitiesByIdPoliticState' operation.</returns>
            QueryResult<PoliticalInformationMunicipality> EndGetPoliticalInformationMunicipalitiesByIdPoliticState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalInformationStateFiles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalInformationStateFilesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalInformationStateFiles", ReplyAction="http://tempuri.org/DBService/GetPoliticalInformationStateFilesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalInformationStateFiles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalInformationStateFiles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalInformationStateFiles'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalInformationStateFiles' operation.</returns>
            QueryResult<PoliticalInformationStateFile> EndGetPoliticalInformationStateFiles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalInformationStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalInformationStatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalInformationStates", ReplyAction="http://tempuri.org/DBService/GetPoliticalInformationStatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalInformationStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalInformationStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalInformationStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalInformationStates' operation.</returns>
            QueryResult<PoliticalInformationState> EndGetPoliticalInformationStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalInformationStatesByDate' operation.
            /// </summary>
            /// <param name="periodDate">The value for the 'periodDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalInformationStatesByDateDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalInformationStatesByDate", ReplyAction="http://tempuri.org/DBService/GetPoliticalInformationStatesByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalInformationStatesByDate(DateTime periodDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalInformationStatesByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalInformationStatesByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalInformationStatesByDate' operation.</returns>
            QueryResult<PoliticalInformationState> EndGetPoliticalInformationStatesByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalInformationStatesById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalInformationStatesByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalInformationStatesById", ReplyAction="http://tempuri.org/DBService/GetPoliticalInformationStatesByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalInformationStatesById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalInformationStatesById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalInformationStatesById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalInformationStatesById' operation.</returns>
            QueryResult<PoliticalInformationState> EndGetPoliticalInformationStatesById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalParties' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalPartiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalParties", ReplyAction="http://tempuri.org/DBService/GetPoliticalPartiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalParties(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalParties'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalParties'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalParties' operation.</returns>
            QueryResult<PoliticalParty> EndGetPoliticalParties(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPoliticalPartiesById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPoliticalPartiesByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPoliticalPartiesById", ReplyAction="http://tempuri.org/DBService/GetPoliticalPartiesByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetPoliticalPartiesById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPoliticalPartiesById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPoliticalPartiesById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPoliticalPartiesById' operation.</returns>
            QueryResult<PoliticalParty> EndGetPoliticalPartiesById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPopulationAttendeds' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetPopulationAttendedsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPopulationAttendeds", ReplyAction="http://tempuri.org/DBService/GetPopulationAttendedsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPopulationAttendeds(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPopulationAttendeds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPopulationAttendeds'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPopulationAttendeds' operation.</returns>
            QueryResult<PopulationAttended> EndGetPopulationAttendeds(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetProducts", ReplyAction="http://tempuri.org/DBService/GetProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            QueryResult<Product> EndGetProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsByIdTypeProduct' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetProductsByIdTypeProductDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetProductsByIdTypeProduct", ReplyAction="http://tempuri.org/DBService/GetProductsByIdTypeProductResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductsByIdTypeProduct(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsByIdTypeProduct'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsByIdTypeProduct'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsByIdTypeProduct' operation.</returns>
            QueryResult<Product> EndGetProductsByIdTypeProduct(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPrograms' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetProgramsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetPrograms", ReplyAction="http://tempuri.org/DBService/GetProgramsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPrograms(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPrograms'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPrograms'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPrograms' operation.</returns>
            QueryResult<Program> EndGetPrograms(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSchoolGrades' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSchoolGradesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSchoolGrades", ReplyAction="http://tempuri.org/DBService/GetSchoolGradesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSchoolGrades(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSchoolGrades'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSchoolGrades'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSchoolGrades' operation.</returns>
            QueryResult<SchoolGrade> EndGetSchoolGrades(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSchoolLevels' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSchoolLevelsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSchoolLevels", ReplyAction="http://tempuri.org/DBService/GetSchoolLevelsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSchoolLevels(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSchoolLevels'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSchoolLevels'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSchoolLevels' operation.</returns>
            QueryResult<SchoolLevel> EndGetSchoolLevels(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSchoolsInformations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSchoolsInformationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSchoolsInformations", ReplyAction="http://tempuri.org/DBService/GetSchoolsInformationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSchoolsInformations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSchoolsInformations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSchoolsInformations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSchoolsInformations' operation.</returns>
            QueryResult<SchoolsInformation> EndGetSchoolsInformations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSchoolTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSchoolTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSchoolTypes", ReplyAction="http://tempuri.org/DBService/GetSchoolTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSchoolTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSchoolTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSchoolTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSchoolTypes' operation.</returns>
            QueryResult<SchoolType> EndGetSchoolTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSEPProjectStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSEPProjectStatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSEPProjectStates", ReplyAction="http://tempuri.org/DBService/GetSEPProjectStatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSEPProjectStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSEPProjectStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSEPProjectStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSEPProjectStates' operation.</returns>
            QueryResult<SEPProjectState> EndGetSEPProjectStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSocialCauses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSocialCausesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSocialCauses", ReplyAction="http://tempuri.org/DBService/GetSocialCausesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSocialCauses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSocialCauses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSocialCauses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSocialCauses' operation.</returns>
            QueryResult<SocialCause> EndGetSocialCauses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSocialOrganizationInformations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSocialOrganizationInformationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSocialOrganizationInformations", ReplyAction="http://tempuri.org/DBService/GetSocialOrganizationInformationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSocialOrganizationInformations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSocialOrganizationInformations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSocialOrganizationInformations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSocialOrganizationInformations' operation.</returns>
            QueryResult<SocialOrganizationInformation> EndGetSocialOrganizationInformations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSocialOrganizationInformationsById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSocialOrganizationInformationsByIdDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSocialOrganizationInformationsById", ReplyAction="http://tempuri.org/DBService/GetSocialOrganizationInformationsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetSocialOrganizationInformationsById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSocialOrganizationInformationsById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSocialOrganizationInformationsById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSocialOrganizationInformationsById' operation.</returns>
            QueryResult<SocialOrganizationInformation> EndGetSocialOrganizationInformationsById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSocialOrganizations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSocialOrganizationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSocialOrganizations", ReplyAction="http://tempuri.org/DBService/GetSocialOrganizationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSocialOrganizations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSocialOrganizations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSocialOrganizations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSocialOrganizations' operation.</returns>
            QueryResult<SocialOrganization> EndGetSocialOrganizations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSocialOrganizationsById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSocialOrganizationsByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSocialOrganizationsById", ReplyAction="http://tempuri.org/DBService/GetSocialOrganizationsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetSocialOrganizationsById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSocialOrganizationsById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSocialOrganizationsById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSocialOrganizationsById' operation.</returns>
            QueryResult<SocialOrganization> EndGetSocialOrganizationsById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSources' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetSourcesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetSources", ReplyAction="http://tempuri.org/DBService/GetSourcesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSources(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSources'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSources'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSources' operation.</returns>
            QueryResult<Source> EndGetSources(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStateEconomicByIdState' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStateEconomicByIdStateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStateEconomicByIdState", ReplyAction="http://tempuri.org/DBService/GetStateEconomicByIdStateResponse")]
            [WebGet()]
            IAsyncResult BeginGetStateEconomicByIdState(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStateEconomicByIdState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStateEconomicByIdState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStateEconomicByIdState' operation.</returns>
            QueryResult<StateEconomicInfo> EndGetStateEconomicByIdState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStateEconomicInfoById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStateEconomicInfoByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStateEconomicInfoById", ReplyAction="http://tempuri.org/DBService/GetStateEconomicInfoByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetStateEconomicInfoById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStateEconomicInfoById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStateEconomicInfoById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStateEconomicInfoById' operation.</returns>
            QueryResult<StateEconomicInfo> EndGetStateEconomicInfoById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStateEconomicInfoes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStateEconomicInfoesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStateEconomicInfoes", ReplyAction="http://tempuri.org/DBService/GetStateEconomicInfoesResponse")]
            [WebGet()]
            IAsyncResult BeginGetStateEconomicInfoes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStateEconomicInfoes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStateEconomicInfoes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStateEconomicInfoes' operation.</returns>
            QueryResult<StateEconomicInfo> EndGetStateEconomicInfoes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStatePrograms' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStateProgramsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStatePrograms", ReplyAction="http://tempuri.org/DBService/GetStateProgramsResponse")]
            [WebGet()]
            IAsyncResult BeginGetStatePrograms(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStatePrograms'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStatePrograms'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStatePrograms' operation.</returns>
            QueryResult<StateProgram> EndGetStatePrograms(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStateProgramsByDate' operation.
            /// </summary>
            /// <param name="initialDate">The value for the 'initialDate' parameter of this action.</param>
            /// <param name="finalDate">The value for the 'finalDate' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStateProgramsByDateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStateProgramsByDate", ReplyAction="http://tempuri.org/DBService/GetStateProgramsByDateResponse")]
            [WebGet()]
            IAsyncResult BeginGetStateProgramsByDate(DateTime initialDate, DateTime finalDate, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStateProgramsByDate'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStateProgramsByDate'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStateProgramsByDate' operation.</returns>
            QueryResult<StateProgram> EndGetStateProgramsByDate(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStateProgramsById' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStateProgramsByIdDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStateProgramsById", ReplyAction="http://tempuri.org/DBService/GetStateProgramsByIdResponse")]
            [WebGet()]
            IAsyncResult BeginGetStateProgramsById(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStateProgramsById'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStateProgramsById'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStateProgramsById' operation.</returns>
            QueryResult<StateProgram> EndGetStateProgramsById(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStateProgramsByIdState' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStateProgramsByIdStateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStateProgramsByIdState", ReplyAction="http://tempuri.org/DBService/GetStateProgramsByIdStateResponse")]
            [WebGet()]
            IAsyncResult BeginGetStateProgramsByIdState(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStateProgramsByIdState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStateProgramsByIdState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStateProgramsByIdState' operation.</returns>
            QueryResult<StateProgram> EndGetStateProgramsByIdState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStates", ReplyAction="http://tempuri.org/DBService/GetStatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetStates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStates' operation.</returns>
            QueryResult<State> EndGetStates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStudentsInformations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetStudentsInformationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetStudentsInformations", ReplyAction="http://tempuri.org/DBService/GetStudentsInformationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetStudentsInformations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStudentsInformations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStudentsInformations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStudentsInformations' operation.</returns>
            QueryResult<StudentsInformation> EndGetStudentsInformations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTeachersInformations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetTeachersInformationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetTeachersInformations", ReplyAction="http://tempuri.org/DBService/GetTeachersInformationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTeachersInformations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTeachersInformations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTeachersInformations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTeachersInformations' operation.</returns>
            QueryResult<TeachersInformation> EndGetTeachersInformations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTypeAgreements' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetTypeAgreementsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetTypeAgreements", ReplyAction="http://tempuri.org/DBService/GetTypeAgreementsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTypeAgreements(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTypeAgreements'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTypeAgreements'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTypeAgreements' operation.</returns>
            QueryResult<TypeAgreement> EndGetTypeAgreements(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTypeProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetTypeProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetTypeProducts", ReplyAction="http://tempuri.org/DBService/GetTypeProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTypeProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTypeProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTypeProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTypeProducts' operation.</returns>
            QueryResult<TypeProduct> EndGetTypeProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTypeSepProjects' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetTypeSepProjectsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetTypeSepProjects", ReplyAction="http://tempuri.org/DBService/GetTypeSepProjectsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTypeSepProjects(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTypeSepProjects'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTypeSepProjects'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTypeSepProjects' operation.</returns>
            QueryResult<TypeSepProject> EndGetTypeSepProjects(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTypeSources' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetTypeSourcesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetTypeSources", ReplyAction="http://tempuri.org/DBService/GetTypeSourcesResponse")]
            [WebGet()]
            IAsyncResult BeginGetTypeSources(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTypeSources'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTypeSources'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTypeSources' operation.</returns>
            QueryResult<TypeSource> EndGetTypeSources(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUniversities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetUniversitiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetUniversities", ReplyAction="http://tempuri.org/DBService/GetUniversitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetUniversities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUniversities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUniversities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUniversities' operation.</returns>
            QueryResult<University> EndGetUniversities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUniversitiesByIdState' operation.
            /// </summary>
            /// <param name="Id">The value for the 'Id' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetUniversitiesByIdStateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetUniversitiesByIdState", ReplyAction="http://tempuri.org/DBService/GetUniversitiesByIdStateResponse")]
            [WebGet()]
            IAsyncResult BeginGetUniversitiesByIdState(int Id, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUniversitiesByIdState'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUniversitiesByIdState'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUniversitiesByIdState' operation.</returns>
            QueryResult<University> EndGetUniversitiesByIdState(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetYears' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/GetYearsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/GetYears", ReplyAction="http://tempuri.org/DBService/GetYearsResponse")]
            [WebGet()]
            IAsyncResult BeginGetYears(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetYears'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetYears'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetYears' operation.</returns>
            QueryResult<Year> EndGetYears(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DBService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DBService/SubmitChanges", ReplyAction="http://tempuri.org/DBService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DBContextEntityContainer : EntityContainer
        {
            
            public DBContextEntityContainer()
            {
                this.CreateEntitySet<CapacitationCenter>(EntitySetOperations.All);
                this.CreateEntitySet<CapacitationCenterInformation>(EntitySetOperations.All);
                this.CreateEntitySet<Competition>(EntitySetOperations.All);
                this.CreateEntitySet<Competitor>(EntitySetOperations.All);
                this.CreateEntitySet<Conectivity>(EntitySetOperations.All);
                this.CreateEntitySet<Contact>(EntitySetOperations.All);
                this.CreateEntitySet<EducationInformationState>(EntitySetOperations.All);
                this.CreateEntitySet<EnlaceTest>(EntitySetOperations.All);
                this.CreateEntitySet<MainUniversity>(EntitySetOperations.All);
                this.CreateEntitySet<MexicoAgreement>(EntitySetOperations.All);
                this.CreateEntitySet<MicrosoftProgramState>(EntitySetOperations.All);
                this.CreateEntitySet<Month>(EntitySetOperations.All);
                this.CreateEntitySet<Municipality>(EntitySetOperations.All);
                this.CreateEntitySet<OpenSourceState>(EntitySetOperations.All);
                this.CreateEntitySet<OpenSourceStateCommunity>(EntitySetOperations.All);
                this.CreateEntitySet<OpenSourceStateProvider>(EntitySetOperations.All);
                this.CreateEntitySet<Organization>(EntitySetOperations.All);
                this.CreateEntitySet<Owner>(EntitySetOperations.All);
                this.CreateEntitySet<Partner>(EntitySetOperations.All);
                this.CreateEntitySet<Penetration>(EntitySetOperations.All);
                this.CreateEntitySet<PoliticalInformationMunicipality>(EntitySetOperations.All);
                this.CreateEntitySet<PoliticalInformationState>(EntitySetOperations.All);
                this.CreateEntitySet<PoliticalInformationStateFile>(EntitySetOperations.All);
                this.CreateEntitySet<PoliticalParty>(EntitySetOperations.All);
                this.CreateEntitySet<PopulationAttended>(EntitySetOperations.All);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
                this.CreateEntitySet<Program>(EntitySetOperations.All);
                this.CreateEntitySet<SchoolGrade>(EntitySetOperations.All);
                this.CreateEntitySet<SchoolLevel>(EntitySetOperations.All);
                this.CreateEntitySet<SchoolsInformation>(EntitySetOperations.All);
                this.CreateEntitySet<SchoolType>(EntitySetOperations.All);
                this.CreateEntitySet<SEPProjectState>(EntitySetOperations.All);
                this.CreateEntitySet<SocialCause>(EntitySetOperations.All);
                this.CreateEntitySet<SocialOrganization>(EntitySetOperations.All);
                this.CreateEntitySet<SocialOrganizationInformation>(EntitySetOperations.All);
                this.CreateEntitySet<Source>(EntitySetOperations.All);
                this.CreateEntitySet<State>(EntitySetOperations.All);
                this.CreateEntitySet<StateEconomicInfo>(EntitySetOperations.All);
                this.CreateEntitySet<StateProgram>(EntitySetOperations.All);
                this.CreateEntitySet<StudentsInformation>(EntitySetOperations.All);
                this.CreateEntitySet<TeachersInformation>(EntitySetOperations.All);
                this.CreateEntitySet<TypeAgreement>(EntitySetOperations.All);
                this.CreateEntitySet<TypeProduct>(EntitySetOperations.All);
                this.CreateEntitySet<TypeSepProject>(EntitySetOperations.All);
                this.CreateEntitySet<TypeSource>(EntitySetOperations.All);
                this.CreateEntitySet<University>(EntitySetOperations.All);
                this.CreateEntitySet<Year>(EntitySetOperations.All);
            }
        }
    }
}
